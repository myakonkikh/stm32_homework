
USART_FREERTOS2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007398  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000278  08007598  08007598  00017598  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007810  08007810  00020010  2**0
                  CONTENTS
  4 .ARM          00000008  08007810  08007810  00017810  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007818  08007818  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007818  08007818  00017818  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800781c  0800781c  0001781c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  08007820  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004a60  20000010  08007830  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20004a70  08007830  00024a70  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001e0c0  00000000  00000000  0002003e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000362f  00000000  00000000  0003e0fe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000014e8  00000000  00000000  00041730  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000013b0  00000000  00000000  00042c18  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00003aef  00000000  00000000  00043fc8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00018a36  00000000  00000000  00047ab7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    001056e2  00000000  00000000  000604ed  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00165bcf  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000057fc  00000000  00000000  00165c24  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	20000010 	.word	0x20000010
 800021c:	00000000 	.word	0x00000000
 8000220:	08007580 	.word	0x08007580

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	20000014 	.word	0x20000014
 800023c:	08007580 	.word	0x08007580

08000240 <__aeabi_uldivmod>:
 8000240:	b953      	cbnz	r3, 8000258 <__aeabi_uldivmod+0x18>
 8000242:	b94a      	cbnz	r2, 8000258 <__aeabi_uldivmod+0x18>
 8000244:	2900      	cmp	r1, #0
 8000246:	bf08      	it	eq
 8000248:	2800      	cmpeq	r0, #0
 800024a:	bf1c      	itt	ne
 800024c:	f04f 31ff 	movne.w	r1, #4294967295
 8000250:	f04f 30ff 	movne.w	r0, #4294967295
 8000254:	f000 b96e 	b.w	8000534 <__aeabi_idiv0>
 8000258:	f1ad 0c08 	sub.w	ip, sp, #8
 800025c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000260:	f000 f806 	bl	8000270 <__udivmoddi4>
 8000264:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000268:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800026c:	b004      	add	sp, #16
 800026e:	4770      	bx	lr

08000270 <__udivmoddi4>:
 8000270:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000274:	9d08      	ldr	r5, [sp, #32]
 8000276:	4604      	mov	r4, r0
 8000278:	468c      	mov	ip, r1
 800027a:	2b00      	cmp	r3, #0
 800027c:	f040 8083 	bne.w	8000386 <__udivmoddi4+0x116>
 8000280:	428a      	cmp	r2, r1
 8000282:	4617      	mov	r7, r2
 8000284:	d947      	bls.n	8000316 <__udivmoddi4+0xa6>
 8000286:	fab2 f282 	clz	r2, r2
 800028a:	b142      	cbz	r2, 800029e <__udivmoddi4+0x2e>
 800028c:	f1c2 0020 	rsb	r0, r2, #32
 8000290:	fa24 f000 	lsr.w	r0, r4, r0
 8000294:	4091      	lsls	r1, r2
 8000296:	4097      	lsls	r7, r2
 8000298:	ea40 0c01 	orr.w	ip, r0, r1
 800029c:	4094      	lsls	r4, r2
 800029e:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80002a2:	0c23      	lsrs	r3, r4, #16
 80002a4:	fbbc f6f8 	udiv	r6, ip, r8
 80002a8:	fa1f fe87 	uxth.w	lr, r7
 80002ac:	fb08 c116 	mls	r1, r8, r6, ip
 80002b0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002b4:	fb06 f10e 	mul.w	r1, r6, lr
 80002b8:	4299      	cmp	r1, r3
 80002ba:	d909      	bls.n	80002d0 <__udivmoddi4+0x60>
 80002bc:	18fb      	adds	r3, r7, r3
 80002be:	f106 30ff 	add.w	r0, r6, #4294967295
 80002c2:	f080 8119 	bcs.w	80004f8 <__udivmoddi4+0x288>
 80002c6:	4299      	cmp	r1, r3
 80002c8:	f240 8116 	bls.w	80004f8 <__udivmoddi4+0x288>
 80002cc:	3e02      	subs	r6, #2
 80002ce:	443b      	add	r3, r7
 80002d0:	1a5b      	subs	r3, r3, r1
 80002d2:	b2a4      	uxth	r4, r4
 80002d4:	fbb3 f0f8 	udiv	r0, r3, r8
 80002d8:	fb08 3310 	mls	r3, r8, r0, r3
 80002dc:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002e0:	fb00 fe0e 	mul.w	lr, r0, lr
 80002e4:	45a6      	cmp	lr, r4
 80002e6:	d909      	bls.n	80002fc <__udivmoddi4+0x8c>
 80002e8:	193c      	adds	r4, r7, r4
 80002ea:	f100 33ff 	add.w	r3, r0, #4294967295
 80002ee:	f080 8105 	bcs.w	80004fc <__udivmoddi4+0x28c>
 80002f2:	45a6      	cmp	lr, r4
 80002f4:	f240 8102 	bls.w	80004fc <__udivmoddi4+0x28c>
 80002f8:	3802      	subs	r0, #2
 80002fa:	443c      	add	r4, r7
 80002fc:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000300:	eba4 040e 	sub.w	r4, r4, lr
 8000304:	2600      	movs	r6, #0
 8000306:	b11d      	cbz	r5, 8000310 <__udivmoddi4+0xa0>
 8000308:	40d4      	lsrs	r4, r2
 800030a:	2300      	movs	r3, #0
 800030c:	e9c5 4300 	strd	r4, r3, [r5]
 8000310:	4631      	mov	r1, r6
 8000312:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000316:	b902      	cbnz	r2, 800031a <__udivmoddi4+0xaa>
 8000318:	deff      	udf	#255	; 0xff
 800031a:	fab2 f282 	clz	r2, r2
 800031e:	2a00      	cmp	r2, #0
 8000320:	d150      	bne.n	80003c4 <__udivmoddi4+0x154>
 8000322:	1bcb      	subs	r3, r1, r7
 8000324:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000328:	fa1f f887 	uxth.w	r8, r7
 800032c:	2601      	movs	r6, #1
 800032e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000332:	0c21      	lsrs	r1, r4, #16
 8000334:	fb0e 331c 	mls	r3, lr, ip, r3
 8000338:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800033c:	fb08 f30c 	mul.w	r3, r8, ip
 8000340:	428b      	cmp	r3, r1
 8000342:	d907      	bls.n	8000354 <__udivmoddi4+0xe4>
 8000344:	1879      	adds	r1, r7, r1
 8000346:	f10c 30ff 	add.w	r0, ip, #4294967295
 800034a:	d202      	bcs.n	8000352 <__udivmoddi4+0xe2>
 800034c:	428b      	cmp	r3, r1
 800034e:	f200 80e9 	bhi.w	8000524 <__udivmoddi4+0x2b4>
 8000352:	4684      	mov	ip, r0
 8000354:	1ac9      	subs	r1, r1, r3
 8000356:	b2a3      	uxth	r3, r4
 8000358:	fbb1 f0fe 	udiv	r0, r1, lr
 800035c:	fb0e 1110 	mls	r1, lr, r0, r1
 8000360:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000364:	fb08 f800 	mul.w	r8, r8, r0
 8000368:	45a0      	cmp	r8, r4
 800036a:	d907      	bls.n	800037c <__udivmoddi4+0x10c>
 800036c:	193c      	adds	r4, r7, r4
 800036e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000372:	d202      	bcs.n	800037a <__udivmoddi4+0x10a>
 8000374:	45a0      	cmp	r8, r4
 8000376:	f200 80d9 	bhi.w	800052c <__udivmoddi4+0x2bc>
 800037a:	4618      	mov	r0, r3
 800037c:	eba4 0408 	sub.w	r4, r4, r8
 8000380:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000384:	e7bf      	b.n	8000306 <__udivmoddi4+0x96>
 8000386:	428b      	cmp	r3, r1
 8000388:	d909      	bls.n	800039e <__udivmoddi4+0x12e>
 800038a:	2d00      	cmp	r5, #0
 800038c:	f000 80b1 	beq.w	80004f2 <__udivmoddi4+0x282>
 8000390:	2600      	movs	r6, #0
 8000392:	e9c5 0100 	strd	r0, r1, [r5]
 8000396:	4630      	mov	r0, r6
 8000398:	4631      	mov	r1, r6
 800039a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800039e:	fab3 f683 	clz	r6, r3
 80003a2:	2e00      	cmp	r6, #0
 80003a4:	d14a      	bne.n	800043c <__udivmoddi4+0x1cc>
 80003a6:	428b      	cmp	r3, r1
 80003a8:	d302      	bcc.n	80003b0 <__udivmoddi4+0x140>
 80003aa:	4282      	cmp	r2, r0
 80003ac:	f200 80b8 	bhi.w	8000520 <__udivmoddi4+0x2b0>
 80003b0:	1a84      	subs	r4, r0, r2
 80003b2:	eb61 0103 	sbc.w	r1, r1, r3
 80003b6:	2001      	movs	r0, #1
 80003b8:	468c      	mov	ip, r1
 80003ba:	2d00      	cmp	r5, #0
 80003bc:	d0a8      	beq.n	8000310 <__udivmoddi4+0xa0>
 80003be:	e9c5 4c00 	strd	r4, ip, [r5]
 80003c2:	e7a5      	b.n	8000310 <__udivmoddi4+0xa0>
 80003c4:	f1c2 0320 	rsb	r3, r2, #32
 80003c8:	fa20 f603 	lsr.w	r6, r0, r3
 80003cc:	4097      	lsls	r7, r2
 80003ce:	fa01 f002 	lsl.w	r0, r1, r2
 80003d2:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003d6:	40d9      	lsrs	r1, r3
 80003d8:	4330      	orrs	r0, r6
 80003da:	0c03      	lsrs	r3, r0, #16
 80003dc:	fbb1 f6fe 	udiv	r6, r1, lr
 80003e0:	fa1f f887 	uxth.w	r8, r7
 80003e4:	fb0e 1116 	mls	r1, lr, r6, r1
 80003e8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003ec:	fb06 f108 	mul.w	r1, r6, r8
 80003f0:	4299      	cmp	r1, r3
 80003f2:	fa04 f402 	lsl.w	r4, r4, r2
 80003f6:	d909      	bls.n	800040c <__udivmoddi4+0x19c>
 80003f8:	18fb      	adds	r3, r7, r3
 80003fa:	f106 3cff 	add.w	ip, r6, #4294967295
 80003fe:	f080 808d 	bcs.w	800051c <__udivmoddi4+0x2ac>
 8000402:	4299      	cmp	r1, r3
 8000404:	f240 808a 	bls.w	800051c <__udivmoddi4+0x2ac>
 8000408:	3e02      	subs	r6, #2
 800040a:	443b      	add	r3, r7
 800040c:	1a5b      	subs	r3, r3, r1
 800040e:	b281      	uxth	r1, r0
 8000410:	fbb3 f0fe 	udiv	r0, r3, lr
 8000414:	fb0e 3310 	mls	r3, lr, r0, r3
 8000418:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800041c:	fb00 f308 	mul.w	r3, r0, r8
 8000420:	428b      	cmp	r3, r1
 8000422:	d907      	bls.n	8000434 <__udivmoddi4+0x1c4>
 8000424:	1879      	adds	r1, r7, r1
 8000426:	f100 3cff 	add.w	ip, r0, #4294967295
 800042a:	d273      	bcs.n	8000514 <__udivmoddi4+0x2a4>
 800042c:	428b      	cmp	r3, r1
 800042e:	d971      	bls.n	8000514 <__udivmoddi4+0x2a4>
 8000430:	3802      	subs	r0, #2
 8000432:	4439      	add	r1, r7
 8000434:	1acb      	subs	r3, r1, r3
 8000436:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800043a:	e778      	b.n	800032e <__udivmoddi4+0xbe>
 800043c:	f1c6 0c20 	rsb	ip, r6, #32
 8000440:	fa03 f406 	lsl.w	r4, r3, r6
 8000444:	fa22 f30c 	lsr.w	r3, r2, ip
 8000448:	431c      	orrs	r4, r3
 800044a:	fa20 f70c 	lsr.w	r7, r0, ip
 800044e:	fa01 f306 	lsl.w	r3, r1, r6
 8000452:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000456:	fa21 f10c 	lsr.w	r1, r1, ip
 800045a:	431f      	orrs	r7, r3
 800045c:	0c3b      	lsrs	r3, r7, #16
 800045e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000462:	fa1f f884 	uxth.w	r8, r4
 8000466:	fb0e 1119 	mls	r1, lr, r9, r1
 800046a:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 800046e:	fb09 fa08 	mul.w	sl, r9, r8
 8000472:	458a      	cmp	sl, r1
 8000474:	fa02 f206 	lsl.w	r2, r2, r6
 8000478:	fa00 f306 	lsl.w	r3, r0, r6
 800047c:	d908      	bls.n	8000490 <__udivmoddi4+0x220>
 800047e:	1861      	adds	r1, r4, r1
 8000480:	f109 30ff 	add.w	r0, r9, #4294967295
 8000484:	d248      	bcs.n	8000518 <__udivmoddi4+0x2a8>
 8000486:	458a      	cmp	sl, r1
 8000488:	d946      	bls.n	8000518 <__udivmoddi4+0x2a8>
 800048a:	f1a9 0902 	sub.w	r9, r9, #2
 800048e:	4421      	add	r1, r4
 8000490:	eba1 010a 	sub.w	r1, r1, sl
 8000494:	b2bf      	uxth	r7, r7
 8000496:	fbb1 f0fe 	udiv	r0, r1, lr
 800049a:	fb0e 1110 	mls	r1, lr, r0, r1
 800049e:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 80004a2:	fb00 f808 	mul.w	r8, r0, r8
 80004a6:	45b8      	cmp	r8, r7
 80004a8:	d907      	bls.n	80004ba <__udivmoddi4+0x24a>
 80004aa:	19e7      	adds	r7, r4, r7
 80004ac:	f100 31ff 	add.w	r1, r0, #4294967295
 80004b0:	d22e      	bcs.n	8000510 <__udivmoddi4+0x2a0>
 80004b2:	45b8      	cmp	r8, r7
 80004b4:	d92c      	bls.n	8000510 <__udivmoddi4+0x2a0>
 80004b6:	3802      	subs	r0, #2
 80004b8:	4427      	add	r7, r4
 80004ba:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004be:	eba7 0708 	sub.w	r7, r7, r8
 80004c2:	fba0 8902 	umull	r8, r9, r0, r2
 80004c6:	454f      	cmp	r7, r9
 80004c8:	46c6      	mov	lr, r8
 80004ca:	4649      	mov	r1, r9
 80004cc:	d31a      	bcc.n	8000504 <__udivmoddi4+0x294>
 80004ce:	d017      	beq.n	8000500 <__udivmoddi4+0x290>
 80004d0:	b15d      	cbz	r5, 80004ea <__udivmoddi4+0x27a>
 80004d2:	ebb3 020e 	subs.w	r2, r3, lr
 80004d6:	eb67 0701 	sbc.w	r7, r7, r1
 80004da:	fa07 fc0c 	lsl.w	ip, r7, ip
 80004de:	40f2      	lsrs	r2, r6
 80004e0:	ea4c 0202 	orr.w	r2, ip, r2
 80004e4:	40f7      	lsrs	r7, r6
 80004e6:	e9c5 2700 	strd	r2, r7, [r5]
 80004ea:	2600      	movs	r6, #0
 80004ec:	4631      	mov	r1, r6
 80004ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004f2:	462e      	mov	r6, r5
 80004f4:	4628      	mov	r0, r5
 80004f6:	e70b      	b.n	8000310 <__udivmoddi4+0xa0>
 80004f8:	4606      	mov	r6, r0
 80004fa:	e6e9      	b.n	80002d0 <__udivmoddi4+0x60>
 80004fc:	4618      	mov	r0, r3
 80004fe:	e6fd      	b.n	80002fc <__udivmoddi4+0x8c>
 8000500:	4543      	cmp	r3, r8
 8000502:	d2e5      	bcs.n	80004d0 <__udivmoddi4+0x260>
 8000504:	ebb8 0e02 	subs.w	lr, r8, r2
 8000508:	eb69 0104 	sbc.w	r1, r9, r4
 800050c:	3801      	subs	r0, #1
 800050e:	e7df      	b.n	80004d0 <__udivmoddi4+0x260>
 8000510:	4608      	mov	r0, r1
 8000512:	e7d2      	b.n	80004ba <__udivmoddi4+0x24a>
 8000514:	4660      	mov	r0, ip
 8000516:	e78d      	b.n	8000434 <__udivmoddi4+0x1c4>
 8000518:	4681      	mov	r9, r0
 800051a:	e7b9      	b.n	8000490 <__udivmoddi4+0x220>
 800051c:	4666      	mov	r6, ip
 800051e:	e775      	b.n	800040c <__udivmoddi4+0x19c>
 8000520:	4630      	mov	r0, r6
 8000522:	e74a      	b.n	80003ba <__udivmoddi4+0x14a>
 8000524:	f1ac 0c02 	sub.w	ip, ip, #2
 8000528:	4439      	add	r1, r7
 800052a:	e713      	b.n	8000354 <__udivmoddi4+0xe4>
 800052c:	3802      	subs	r0, #2
 800052e:	443c      	add	r4, r7
 8000530:	e724      	b.n	800037c <__udivmoddi4+0x10c>
 8000532:	bf00      	nop

08000534 <__aeabi_idiv0>:
 8000534:	4770      	bx	lr
 8000536:	bf00      	nop

08000538 <HAL_UART_RxCpltCallback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000538:	b480      	push	{r7}
 800053a:	b083      	sub	sp, #12
 800053c:	af00      	add	r7, sp, #0
 800053e:	6078      	str	r0, [r7, #4]
    if (huart == &huart3)
 8000540:	687b      	ldr	r3, [r7, #4]
 8000542:	4a06      	ldr	r2, [pc, #24]	; (800055c <HAL_UART_RxCpltCallback+0x24>)
 8000544:	4293      	cmp	r3, r2
 8000546:	d102      	bne.n	800054e <HAL_UART_RxCpltCallback+0x16>
      flag = 1;
 8000548:	4b05      	ldr	r3, [pc, #20]	; (8000560 <HAL_UART_RxCpltCallback+0x28>)
 800054a:	2201      	movs	r2, #1
 800054c:	701a      	strb	r2, [r3, #0]
}
 800054e:	bf00      	nop
 8000550:	370c      	adds	r7, #12
 8000552:	46bd      	mov	sp, r7
 8000554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000558:	4770      	bx	lr
 800055a:	bf00      	nop
 800055c:	20004944 	.word	0x20004944
 8000560:	20000031 	.word	0x20000031

08000564 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000564:	b580      	push	{r7, lr}
 8000566:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000568:	f000 fc77 	bl	8000e5a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800056c:	f000 f874 	bl	8000658 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000570:	f000 f910 	bl	8000794 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 8000574:	f000 f8de 	bl	8000734 <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000578:	f003 ffc0 	bl	80044fc <osKernelInitialize>
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* creation of Queue1 */
  Queue1Handle = osMessageQueueNew (16, sizeof(queue_t), &Queue1_attributes);
 800057c:	4a21      	ldr	r2, [pc, #132]	; (8000604 <main+0xa0>)
 800057e:	2105      	movs	r1, #5
 8000580:	2010      	movs	r0, #16
 8000582:	f004 f8f9 	bl	8004778 <osMessageQueueNew>
 8000586:	4603      	mov	r3, r0
 8000588:	4a1f      	ldr	r2, [pc, #124]	; (8000608 <main+0xa4>)
 800058a:	6013      	str	r3, [r2, #0]

  /* creation of Queue2 */
  Queue2Handle = osMessageQueueNew (16, sizeof(queue_t), &Queue2_attributes);
 800058c:	4a1f      	ldr	r2, [pc, #124]	; (800060c <main+0xa8>)
 800058e:	2105      	movs	r1, #5
 8000590:	2010      	movs	r0, #16
 8000592:	f004 f8f1 	bl	8004778 <osMessageQueueNew>
 8000596:	4603      	mov	r3, r0
 8000598:	4a1d      	ldr	r2, [pc, #116]	; (8000610 <main+0xac>)
 800059a:	6013      	str	r3, [r2, #0]

  /* creation of Queue3 */
  Queue3Handle = osMessageQueueNew (16, sizeof(queue_t), &Queue3_attributes);
 800059c:	4a1d      	ldr	r2, [pc, #116]	; (8000614 <main+0xb0>)
 800059e:	2105      	movs	r1, #5
 80005a0:	2010      	movs	r0, #16
 80005a2:	f004 f8e9 	bl	8004778 <osMessageQueueNew>
 80005a6:	4603      	mov	r3, r0
 80005a8:	4a1b      	ldr	r2, [pc, #108]	; (8000618 <main+0xb4>)
 80005aa:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 80005ac:	4a1b      	ldr	r2, [pc, #108]	; (800061c <main+0xb8>)
 80005ae:	2100      	movs	r1, #0
 80005b0:	481b      	ldr	r0, [pc, #108]	; (8000620 <main+0xbc>)
 80005b2:	f004 f80d 	bl	80045d0 <osThreadNew>
 80005b6:	4603      	mov	r3, r0
 80005b8:	4a1a      	ldr	r2, [pc, #104]	; (8000624 <main+0xc0>)
 80005ba:	6013      	str	r3, [r2, #0]

  /* creation of Task1 */
  Task1Handle = osThreadNew(StartTask1, NULL, &Task1_attributes);
 80005bc:	4a1a      	ldr	r2, [pc, #104]	; (8000628 <main+0xc4>)
 80005be:	2100      	movs	r1, #0
 80005c0:	481a      	ldr	r0, [pc, #104]	; (800062c <main+0xc8>)
 80005c2:	f004 f805 	bl	80045d0 <osThreadNew>
 80005c6:	4603      	mov	r3, r0
 80005c8:	4a19      	ldr	r2, [pc, #100]	; (8000630 <main+0xcc>)
 80005ca:	6013      	str	r3, [r2, #0]

  /* creation of Task2 */
  Task2Handle = osThreadNew(StartTask2, NULL, &Task2_attributes);
 80005cc:	4a19      	ldr	r2, [pc, #100]	; (8000634 <main+0xd0>)
 80005ce:	2100      	movs	r1, #0
 80005d0:	4819      	ldr	r0, [pc, #100]	; (8000638 <main+0xd4>)
 80005d2:	f003 fffd 	bl	80045d0 <osThreadNew>
 80005d6:	4603      	mov	r3, r0
 80005d8:	4a18      	ldr	r2, [pc, #96]	; (800063c <main+0xd8>)
 80005da:	6013      	str	r3, [r2, #0]

  /* creation of Task3 */
  Task3Handle = osThreadNew(StartTask3, NULL, &Task3_attributes);
 80005dc:	4a18      	ldr	r2, [pc, #96]	; (8000640 <main+0xdc>)
 80005de:	2100      	movs	r1, #0
 80005e0:	4818      	ldr	r0, [pc, #96]	; (8000644 <main+0xe0>)
 80005e2:	f003 fff5 	bl	80045d0 <osThreadNew>
 80005e6:	4603      	mov	r3, r0
 80005e8:	4a17      	ldr	r2, [pc, #92]	; (8000648 <main+0xe4>)
 80005ea:	6013      	str	r3, [r2, #0]

  /* creation of TaskReceive */
  TaskReceiveHandle = osThreadNew(StartTaskReceive, NULL, &TaskReceive_attributes);
 80005ec:	4a17      	ldr	r2, [pc, #92]	; (800064c <main+0xe8>)
 80005ee:	2100      	movs	r1, #0
 80005f0:	4817      	ldr	r0, [pc, #92]	; (8000650 <main+0xec>)
 80005f2:	f003 ffed 	bl	80045d0 <osThreadNew>
 80005f6:	4603      	mov	r3, r0
 80005f8:	4a16      	ldr	r2, [pc, #88]	; (8000654 <main+0xf0>)
 80005fa:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 80005fc:	f003 ffb2 	bl	8004564 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000600:	e7fe      	b.n	8000600 <main+0x9c>
 8000602:	bf00      	nop
 8000604:	080076ac 	.word	0x080076ac
 8000608:	200049cc 	.word	0x200049cc
 800060c:	080076c4 	.word	0x080076c4
 8000610:	20004940 	.word	0x20004940
 8000614:	080076dc 	.word	0x080076dc
 8000618:	200049d4 	.word	0x200049d4
 800061c:	080075f8 	.word	0x080075f8
 8000620:	0800099d 	.word	0x0800099d
 8000624:	2000493c 	.word	0x2000493c
 8000628:	0800761c 	.word	0x0800761c
 800062c:	080009ad 	.word	0x080009ad
 8000630:	200049d0 	.word	0x200049d0
 8000634:	08007640 	.word	0x08007640
 8000638:	080009e5 	.word	0x080009e5
 800063c:	200049dc 	.word	0x200049dc
 8000640:	08007664 	.word	0x08007664
 8000644:	08000a69 	.word	0x08000a69
 8000648:	200049d8 	.word	0x200049d8
 800064c:	08007688 	.word	0x08007688
 8000650:	08000aed 	.word	0x08000aed
 8000654:	200049c8 	.word	0x200049c8

08000658 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000658:	b580      	push	{r7, lr}
 800065a:	b094      	sub	sp, #80	; 0x50
 800065c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800065e:	f107 031c 	add.w	r3, r7, #28
 8000662:	2234      	movs	r2, #52	; 0x34
 8000664:	2100      	movs	r1, #0
 8000666:	4618      	mov	r0, r3
 8000668:	f006 ff7a 	bl	8007560 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800066c:	f107 0308 	add.w	r3, r7, #8
 8000670:	2200      	movs	r2, #0
 8000672:	601a      	str	r2, [r3, #0]
 8000674:	605a      	str	r2, [r3, #4]
 8000676:	609a      	str	r2, [r3, #8]
 8000678:	60da      	str	r2, [r3, #12]
 800067a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800067c:	4b2b      	ldr	r3, [pc, #172]	; (800072c <SystemClock_Config+0xd4>)
 800067e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000680:	4a2a      	ldr	r2, [pc, #168]	; (800072c <SystemClock_Config+0xd4>)
 8000682:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000686:	6413      	str	r3, [r2, #64]	; 0x40
 8000688:	4b28      	ldr	r3, [pc, #160]	; (800072c <SystemClock_Config+0xd4>)
 800068a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800068c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000690:	607b      	str	r3, [r7, #4]
 8000692:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000694:	4b26      	ldr	r3, [pc, #152]	; (8000730 <SystemClock_Config+0xd8>)
 8000696:	681b      	ldr	r3, [r3, #0]
 8000698:	4a25      	ldr	r2, [pc, #148]	; (8000730 <SystemClock_Config+0xd8>)
 800069a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800069e:	6013      	str	r3, [r2, #0]
 80006a0:	4b23      	ldr	r3, [pc, #140]	; (8000730 <SystemClock_Config+0xd8>)
 80006a2:	681b      	ldr	r3, [r3, #0]
 80006a4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80006a8:	603b      	str	r3, [r7, #0]
 80006aa:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80006ac:	2302      	movs	r3, #2
 80006ae:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80006b0:	2301      	movs	r3, #1
 80006b2:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80006b4:	2310      	movs	r3, #16
 80006b6:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006b8:	2302      	movs	r3, #2
 80006ba:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80006bc:	2300      	movs	r3, #0
 80006be:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 80006c0:	2308      	movs	r3, #8
 80006c2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 216;
 80006c4:	23d8      	movs	r3, #216	; 0xd8
 80006c6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80006c8:	2302      	movs	r3, #2
 80006ca:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80006cc:	2302      	movs	r3, #2
 80006ce:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 80006d0:	2302      	movs	r3, #2
 80006d2:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006d4:	f107 031c 	add.w	r3, r7, #28
 80006d8:	4618      	mov	r0, r3
 80006da:	f000 ff75 	bl	80015c8 <HAL_RCC_OscConfig>
 80006de:	4603      	mov	r3, r0
 80006e0:	2b00      	cmp	r3, #0
 80006e2:	d001      	beq.n	80006e8 <SystemClock_Config+0x90>
  {
    Error_Handler();
 80006e4:	f000 fa66 	bl	8000bb4 <Error_Handler>
  }
  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 80006e8:	f000 ff1e 	bl	8001528 <HAL_PWREx_EnableOverDrive>
 80006ec:	4603      	mov	r3, r0
 80006ee:	2b00      	cmp	r3, #0
 80006f0:	d001      	beq.n	80006f6 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 80006f2:	f000 fa5f 	bl	8000bb4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006f6:	230f      	movs	r3, #15
 80006f8:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006fa:	2302      	movs	r3, #2
 80006fc:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006fe:	2300      	movs	r3, #0
 8000700:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000702:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000706:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000708:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800070c:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 800070e:	f107 0308 	add.w	r3, r7, #8
 8000712:	2107      	movs	r1, #7
 8000714:	4618      	mov	r0, r3
 8000716:	f001 fa05 	bl	8001b24 <HAL_RCC_ClockConfig>
 800071a:	4603      	mov	r3, r0
 800071c:	2b00      	cmp	r3, #0
 800071e:	d001      	beq.n	8000724 <SystemClock_Config+0xcc>
  {
    Error_Handler();
 8000720:	f000 fa48 	bl	8000bb4 <Error_Handler>
  }
}
 8000724:	bf00      	nop
 8000726:	3750      	adds	r7, #80	; 0x50
 8000728:	46bd      	mov	sp, r7
 800072a:	bd80      	pop	{r7, pc}
 800072c:	40023800 	.word	0x40023800
 8000730:	40007000 	.word	0x40007000

08000734 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000734:	b580      	push	{r7, lr}
 8000736:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000738:	4b14      	ldr	r3, [pc, #80]	; (800078c <MX_USART3_UART_Init+0x58>)
 800073a:	4a15      	ldr	r2, [pc, #84]	; (8000790 <MX_USART3_UART_Init+0x5c>)
 800073c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800073e:	4b13      	ldr	r3, [pc, #76]	; (800078c <MX_USART3_UART_Init+0x58>)
 8000740:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000744:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000746:	4b11      	ldr	r3, [pc, #68]	; (800078c <MX_USART3_UART_Init+0x58>)
 8000748:	2200      	movs	r2, #0
 800074a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 800074c:	4b0f      	ldr	r3, [pc, #60]	; (800078c <MX_USART3_UART_Init+0x58>)
 800074e:	2200      	movs	r2, #0
 8000750:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000752:	4b0e      	ldr	r3, [pc, #56]	; (800078c <MX_USART3_UART_Init+0x58>)
 8000754:	2200      	movs	r2, #0
 8000756:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000758:	4b0c      	ldr	r3, [pc, #48]	; (800078c <MX_USART3_UART_Init+0x58>)
 800075a:	220c      	movs	r2, #12
 800075c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800075e:	4b0b      	ldr	r3, [pc, #44]	; (800078c <MX_USART3_UART_Init+0x58>)
 8000760:	2200      	movs	r2, #0
 8000762:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000764:	4b09      	ldr	r3, [pc, #36]	; (800078c <MX_USART3_UART_Init+0x58>)
 8000766:	2200      	movs	r2, #0
 8000768:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800076a:	4b08      	ldr	r3, [pc, #32]	; (800078c <MX_USART3_UART_Init+0x58>)
 800076c:	2200      	movs	r2, #0
 800076e:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000770:	4b06      	ldr	r3, [pc, #24]	; (800078c <MX_USART3_UART_Init+0x58>)
 8000772:	2200      	movs	r2, #0
 8000774:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000776:	4805      	ldr	r0, [pc, #20]	; (800078c <MX_USART3_UART_Init+0x58>)
 8000778:	f002 fb0e 	bl	8002d98 <HAL_UART_Init>
 800077c:	4603      	mov	r3, r0
 800077e:	2b00      	cmp	r3, #0
 8000780:	d001      	beq.n	8000786 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8000782:	f000 fa17 	bl	8000bb4 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000786:	bf00      	nop
 8000788:	bd80      	pop	{r7, pc}
 800078a:	bf00      	nop
 800078c:	20004944 	.word	0x20004944
 8000790:	40004800 	.word	0x40004800

08000794 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000794:	b580      	push	{r7, lr}
 8000796:	b08c      	sub	sp, #48	; 0x30
 8000798:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800079a:	f107 031c 	add.w	r3, r7, #28
 800079e:	2200      	movs	r2, #0
 80007a0:	601a      	str	r2, [r3, #0]
 80007a2:	605a      	str	r2, [r3, #4]
 80007a4:	609a      	str	r2, [r3, #8]
 80007a6:	60da      	str	r2, [r3, #12]
 80007a8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80007aa:	4b77      	ldr	r3, [pc, #476]	; (8000988 <MX_GPIO_Init+0x1f4>)
 80007ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ae:	4a76      	ldr	r2, [pc, #472]	; (8000988 <MX_GPIO_Init+0x1f4>)
 80007b0:	f043 0304 	orr.w	r3, r3, #4
 80007b4:	6313      	str	r3, [r2, #48]	; 0x30
 80007b6:	4b74      	ldr	r3, [pc, #464]	; (8000988 <MX_GPIO_Init+0x1f4>)
 80007b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ba:	f003 0304 	and.w	r3, r3, #4
 80007be:	61bb      	str	r3, [r7, #24]
 80007c0:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80007c2:	4b71      	ldr	r3, [pc, #452]	; (8000988 <MX_GPIO_Init+0x1f4>)
 80007c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007c6:	4a70      	ldr	r2, [pc, #448]	; (8000988 <MX_GPIO_Init+0x1f4>)
 80007c8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80007cc:	6313      	str	r3, [r2, #48]	; 0x30
 80007ce:	4b6e      	ldr	r3, [pc, #440]	; (8000988 <MX_GPIO_Init+0x1f4>)
 80007d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007d2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80007d6:	617b      	str	r3, [r7, #20]
 80007d8:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007da:	4b6b      	ldr	r3, [pc, #428]	; (8000988 <MX_GPIO_Init+0x1f4>)
 80007dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007de:	4a6a      	ldr	r2, [pc, #424]	; (8000988 <MX_GPIO_Init+0x1f4>)
 80007e0:	f043 0301 	orr.w	r3, r3, #1
 80007e4:	6313      	str	r3, [r2, #48]	; 0x30
 80007e6:	4b68      	ldr	r3, [pc, #416]	; (8000988 <MX_GPIO_Init+0x1f4>)
 80007e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ea:	f003 0301 	and.w	r3, r3, #1
 80007ee:	613b      	str	r3, [r7, #16]
 80007f0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80007f2:	4b65      	ldr	r3, [pc, #404]	; (8000988 <MX_GPIO_Init+0x1f4>)
 80007f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007f6:	4a64      	ldr	r2, [pc, #400]	; (8000988 <MX_GPIO_Init+0x1f4>)
 80007f8:	f043 0302 	orr.w	r3, r3, #2
 80007fc:	6313      	str	r3, [r2, #48]	; 0x30
 80007fe:	4b62      	ldr	r3, [pc, #392]	; (8000988 <MX_GPIO_Init+0x1f4>)
 8000800:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000802:	f003 0302 	and.w	r3, r3, #2
 8000806:	60fb      	str	r3, [r7, #12]
 8000808:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800080a:	4b5f      	ldr	r3, [pc, #380]	; (8000988 <MX_GPIO_Init+0x1f4>)
 800080c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800080e:	4a5e      	ldr	r2, [pc, #376]	; (8000988 <MX_GPIO_Init+0x1f4>)
 8000810:	f043 0308 	orr.w	r3, r3, #8
 8000814:	6313      	str	r3, [r2, #48]	; 0x30
 8000816:	4b5c      	ldr	r3, [pc, #368]	; (8000988 <MX_GPIO_Init+0x1f4>)
 8000818:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800081a:	f003 0308 	and.w	r3, r3, #8
 800081e:	60bb      	str	r3, [r7, #8]
 8000820:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000822:	4b59      	ldr	r3, [pc, #356]	; (8000988 <MX_GPIO_Init+0x1f4>)
 8000824:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000826:	4a58      	ldr	r2, [pc, #352]	; (8000988 <MX_GPIO_Init+0x1f4>)
 8000828:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800082c:	6313      	str	r3, [r2, #48]	; 0x30
 800082e:	4b56      	ldr	r3, [pc, #344]	; (8000988 <MX_GPIO_Init+0x1f4>)
 8000830:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000832:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000836:	607b      	str	r3, [r7, #4]
 8000838:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 800083a:	2200      	movs	r2, #0
 800083c:	f244 0181 	movw	r1, #16513	; 0x4081
 8000840:	4852      	ldr	r0, [pc, #328]	; (800098c <MX_GPIO_Init+0x1f8>)
 8000842:	f000 fe57 	bl	80014f4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8000846:	2200      	movs	r2, #0
 8000848:	2140      	movs	r1, #64	; 0x40
 800084a:	4851      	ldr	r0, [pc, #324]	; (8000990 <MX_GPIO_Init+0x1fc>)
 800084c:	f000 fe52 	bl	80014f4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8000850:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000854:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000856:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800085a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800085c:	2300      	movs	r3, #0
 800085e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8000860:	f107 031c 	add.w	r3, r7, #28
 8000864:	4619      	mov	r1, r3
 8000866:	484b      	ldr	r0, [pc, #300]	; (8000994 <MX_GPIO_Init+0x200>)
 8000868:	f000 fc98 	bl	800119c <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_MDC_Pin RMII_RXD0_Pin RMII_RXD1_Pin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 800086c:	2332      	movs	r3, #50	; 0x32
 800086e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000870:	2302      	movs	r3, #2
 8000872:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000874:	2300      	movs	r3, #0
 8000876:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000878:	2303      	movs	r3, #3
 800087a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800087c:	230b      	movs	r3, #11
 800087e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000880:	f107 031c 	add.w	r3, r7, #28
 8000884:	4619      	mov	r1, r3
 8000886:	4843      	ldr	r0, [pc, #268]	; (8000994 <MX_GPIO_Init+0x200>)
 8000888:	f000 fc88 	bl	800119c <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_REF_CLK_Pin RMII_MDIO_Pin RMII_CRS_DV_Pin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 800088c:	2386      	movs	r3, #134	; 0x86
 800088e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000890:	2302      	movs	r3, #2
 8000892:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000894:	2300      	movs	r3, #0
 8000896:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000898:	2303      	movs	r3, #3
 800089a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800089c:	230b      	movs	r3, #11
 800089e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008a0:	f107 031c 	add.w	r3, r7, #28
 80008a4:	4619      	mov	r1, r3
 80008a6:	483c      	ldr	r0, [pc, #240]	; (8000998 <MX_GPIO_Init+0x204>)
 80008a8:	f000 fc78 	bl	800119c <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 80008ac:	f244 0381 	movw	r3, #16513	; 0x4081
 80008b0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008b2:	2301      	movs	r3, #1
 80008b4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008b6:	2300      	movs	r3, #0
 80008b8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008ba:	2300      	movs	r3, #0
 80008bc:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80008be:	f107 031c 	add.w	r3, r7, #28
 80008c2:	4619      	mov	r1, r3
 80008c4:	4831      	ldr	r0, [pc, #196]	; (800098c <MX_GPIO_Init+0x1f8>)
 80008c6:	f000 fc69 	bl	800119c <HAL_GPIO_Init>

  /*Configure GPIO pin : RMII_TXD1_Pin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 80008ca:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80008ce:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008d0:	2302      	movs	r3, #2
 80008d2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008d4:	2300      	movs	r3, #0
 80008d6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80008d8:	2303      	movs	r3, #3
 80008da:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80008dc:	230b      	movs	r3, #11
 80008de:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 80008e0:	f107 031c 	add.w	r3, r7, #28
 80008e4:	4619      	mov	r1, r3
 80008e6:	4829      	ldr	r0, [pc, #164]	; (800098c <MX_GPIO_Init+0x1f8>)
 80008e8:	f000 fc58 	bl	800119c <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 80008ec:	2340      	movs	r3, #64	; 0x40
 80008ee:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008f0:	2301      	movs	r3, #1
 80008f2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008f4:	2300      	movs	r3, #0
 80008f6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008f8:	2300      	movs	r3, #0
 80008fa:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80008fc:	f107 031c 	add.w	r3, r7, #28
 8000900:	4619      	mov	r1, r3
 8000902:	4823      	ldr	r0, [pc, #140]	; (8000990 <MX_GPIO_Init+0x1fc>)
 8000904:	f000 fc4a 	bl	800119c <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8000908:	2380      	movs	r3, #128	; 0x80
 800090a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800090c:	2300      	movs	r3, #0
 800090e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000910:	2300      	movs	r3, #0
 8000912:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000914:	f107 031c 	add.w	r3, r7, #28
 8000918:	4619      	mov	r1, r3
 800091a:	481d      	ldr	r0, [pc, #116]	; (8000990 <MX_GPIO_Init+0x1fc>)
 800091c:	f000 fc3e 	bl	800119c <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_SOF_Pin USB_ID_Pin USB_DM_Pin USB_DP_Pin */
  GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8000920:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8000924:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000926:	2302      	movs	r3, #2
 8000928:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800092a:	2300      	movs	r3, #0
 800092c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800092e:	2303      	movs	r3, #3
 8000930:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000932:	230a      	movs	r3, #10
 8000934:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000936:	f107 031c 	add.w	r3, r7, #28
 800093a:	4619      	mov	r1, r3
 800093c:	4816      	ldr	r0, [pc, #88]	; (8000998 <MX_GPIO_Init+0x204>)
 800093e:	f000 fc2d 	bl	800119c <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_VBUS_Pin */
  GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8000942:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000946:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000948:	2300      	movs	r3, #0
 800094a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800094c:	2300      	movs	r3, #0
 800094e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8000950:	f107 031c 	add.w	r3, r7, #28
 8000954:	4619      	mov	r1, r3
 8000956:	4810      	ldr	r0, [pc, #64]	; (8000998 <MX_GPIO_Init+0x204>)
 8000958:	f000 fc20 	bl	800119c <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_TX_EN_Pin RMII_TXD0_Pin */
  GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 800095c:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8000960:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000962:	2302      	movs	r3, #2
 8000964:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000966:	2300      	movs	r3, #0
 8000968:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800096a:	2303      	movs	r3, #3
 800096c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800096e:	230b      	movs	r3, #11
 8000970:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000972:	f107 031c 	add.w	r3, r7, #28
 8000976:	4619      	mov	r1, r3
 8000978:	4805      	ldr	r0, [pc, #20]	; (8000990 <MX_GPIO_Init+0x1fc>)
 800097a:	f000 fc0f 	bl	800119c <HAL_GPIO_Init>

}
 800097e:	bf00      	nop
 8000980:	3730      	adds	r7, #48	; 0x30
 8000982:	46bd      	mov	sp, r7
 8000984:	bd80      	pop	{r7, pc}
 8000986:	bf00      	nop
 8000988:	40023800 	.word	0x40023800
 800098c:	40020400 	.word	0x40020400
 8000990:	40021800 	.word	0x40021800
 8000994:	40020800 	.word	0x40020800
 8000998:	40020000 	.word	0x40020000

0800099c <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 800099c:	b580      	push	{r7, lr}
 800099e:	b082      	sub	sp, #8
 80009a0:	af00      	add	r7, sp, #0
 80009a2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 80009a4:	2001      	movs	r0, #1
 80009a6:	f003 feb9 	bl	800471c <osDelay>
 80009aa:	e7fb      	b.n	80009a4 <StartDefaultTask+0x8>

080009ac <StartTask1>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask1 */
void StartTask1(void *argument)
{
 80009ac:	b580      	push	{r7, lr}
 80009ae:	b084      	sub	sp, #16
 80009b0:	af00      	add	r7, sp, #0
 80009b2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask1 */
    queue_t pocket;
  /* Infinite loop */
  for(;;)
  {
    osMessageQueueGet(Queue1Handle, &pocket, 0, osWaitForever);
 80009b4:	4b09      	ldr	r3, [pc, #36]	; (80009dc <StartTask1+0x30>)
 80009b6:	6818      	ldr	r0, [r3, #0]
 80009b8:	f107 0108 	add.w	r1, r7, #8
 80009bc:	f04f 33ff 	mov.w	r3, #4294967295
 80009c0:	2200      	movs	r2, #0
 80009c2:	f003 ffd3 	bl	800496c <osMessageQueueGet>
    HAL_UART_Transmit_IT(&huart3, (uint8_t*)pocket.Buf, 4);
 80009c6:	f107 0308 	add.w	r3, r7, #8
 80009ca:	2204      	movs	r2, #4
 80009cc:	4619      	mov	r1, r3
 80009ce:	4804      	ldr	r0, [pc, #16]	; (80009e0 <StartTask1+0x34>)
 80009d0:	f002 fa30 	bl	8002e34 <HAL_UART_Transmit_IT>
    osDelay(1);
 80009d4:	2001      	movs	r0, #1
 80009d6:	f003 fea1 	bl	800471c <osDelay>
    osMessageQueueGet(Queue1Handle, &pocket, 0, osWaitForever);
 80009da:	e7eb      	b.n	80009b4 <StartTask1+0x8>
 80009dc:	200049cc 	.word	0x200049cc
 80009e0:	20004944 	.word	0x20004944

080009e4 <StartTask2>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask2 */
void StartTask2(void *argument)
{
 80009e4:	b580      	push	{r7, lr}
 80009e6:	b086      	sub	sp, #24
 80009e8:	af00      	add	r7, sp, #0
 80009ea:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask2 */
	queue_t pocket;
  /* Infinite loop */
  for(;;)
  {
    osMessageQueueGet(Queue2Handle, &pocket, 0, osWaitForever);
 80009ec:	4b1b      	ldr	r3, [pc, #108]	; (8000a5c <StartTask2+0x78>)
 80009ee:	6818      	ldr	r0, [r3, #0]
 80009f0:	f107 010c 	add.w	r1, r7, #12
 80009f4:	f04f 33ff 	mov.w	r3, #4294967295
 80009f8:	2200      	movs	r2, #0
 80009fa:	f003 ffb7 	bl	800496c <osMessageQueueGet>
    for (size_t i = 0; i < 4; ++i)
 80009fe:	2300      	movs	r3, #0
 8000a00:	617b      	str	r3, [r7, #20]
 8000a02:	e01c      	b.n	8000a3e <StartTask2+0x5a>
      pocket.Buf[i] = toupper(pocket.Buf[i]);
 8000a04:	f107 020c 	add.w	r2, r7, #12
 8000a08:	697b      	ldr	r3, [r7, #20]
 8000a0a:	4413      	add	r3, r2
 8000a0c:	781b      	ldrb	r3, [r3, #0]
 8000a0e:	74fb      	strb	r3, [r7, #19]
 8000a10:	7cfb      	ldrb	r3, [r7, #19]
 8000a12:	3301      	adds	r3, #1
 8000a14:	4a12      	ldr	r2, [pc, #72]	; (8000a60 <StartTask2+0x7c>)
 8000a16:	4413      	add	r3, r2
 8000a18:	781b      	ldrb	r3, [r3, #0]
 8000a1a:	f003 0303 	and.w	r3, r3, #3
 8000a1e:	2b02      	cmp	r3, #2
 8000a20:	d102      	bne.n	8000a28 <StartTask2+0x44>
 8000a22:	7cfb      	ldrb	r3, [r7, #19]
 8000a24:	3b20      	subs	r3, #32
 8000a26:	e000      	b.n	8000a2a <StartTask2+0x46>
 8000a28:	7cfb      	ldrb	r3, [r7, #19]
 8000a2a:	b2d9      	uxtb	r1, r3
 8000a2c:	f107 020c 	add.w	r2, r7, #12
 8000a30:	697b      	ldr	r3, [r7, #20]
 8000a32:	4413      	add	r3, r2
 8000a34:	460a      	mov	r2, r1
 8000a36:	701a      	strb	r2, [r3, #0]
    for (size_t i = 0; i < 4; ++i)
 8000a38:	697b      	ldr	r3, [r7, #20]
 8000a3a:	3301      	adds	r3, #1
 8000a3c:	617b      	str	r3, [r7, #20]
 8000a3e:	697b      	ldr	r3, [r7, #20]
 8000a40:	2b03      	cmp	r3, #3
 8000a42:	d9df      	bls.n	8000a04 <StartTask2+0x20>
    HAL_UART_Transmit_IT(&huart3, (uint8_t*)pocket.Buf, 4);
 8000a44:	f107 030c 	add.w	r3, r7, #12
 8000a48:	2204      	movs	r2, #4
 8000a4a:	4619      	mov	r1, r3
 8000a4c:	4805      	ldr	r0, [pc, #20]	; (8000a64 <StartTask2+0x80>)
 8000a4e:	f002 f9f1 	bl	8002e34 <HAL_UART_Transmit_IT>
    osDelay(1);
 8000a52:	2001      	movs	r0, #1
 8000a54:	f003 fe62 	bl	800471c <osDelay>
    osMessageQueueGet(Queue2Handle, &pocket, 0, osWaitForever);
 8000a58:	e7c8      	b.n	80009ec <StartTask2+0x8>
 8000a5a:	bf00      	nop
 8000a5c:	20004940 	.word	0x20004940
 8000a60:	0800770c 	.word	0x0800770c
 8000a64:	20004944 	.word	0x20004944

08000a68 <StartTask3>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask3 */
void StartTask3(void *argument)
{
 8000a68:	b580      	push	{r7, lr}
 8000a6a:	b086      	sub	sp, #24
 8000a6c:	af00      	add	r7, sp, #0
 8000a6e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask3 */
    queue_t pocket;
  /* Infinite loop */
  for(;;)
  {
    osMessageQueueGet(Queue3Handle, &pocket, 0, osWaitForever);
 8000a70:	4b1b      	ldr	r3, [pc, #108]	; (8000ae0 <StartTask3+0x78>)
 8000a72:	6818      	ldr	r0, [r3, #0]
 8000a74:	f107 010c 	add.w	r1, r7, #12
 8000a78:	f04f 33ff 	mov.w	r3, #4294967295
 8000a7c:	2200      	movs	r2, #0
 8000a7e:	f003 ff75 	bl	800496c <osMessageQueueGet>
    for (size_t i = 0; i < 4; ++i)
 8000a82:	2300      	movs	r3, #0
 8000a84:	617b      	str	r3, [r7, #20]
 8000a86:	e01c      	b.n	8000ac2 <StartTask3+0x5a>
      pocket.Buf[i] = tolower(pocket.Buf[i]);
 8000a88:	f107 020c 	add.w	r2, r7, #12
 8000a8c:	697b      	ldr	r3, [r7, #20]
 8000a8e:	4413      	add	r3, r2
 8000a90:	781b      	ldrb	r3, [r3, #0]
 8000a92:	74fb      	strb	r3, [r7, #19]
 8000a94:	7cfb      	ldrb	r3, [r7, #19]
 8000a96:	3301      	adds	r3, #1
 8000a98:	4a12      	ldr	r2, [pc, #72]	; (8000ae4 <StartTask3+0x7c>)
 8000a9a:	4413      	add	r3, r2
 8000a9c:	781b      	ldrb	r3, [r3, #0]
 8000a9e:	f003 0303 	and.w	r3, r3, #3
 8000aa2:	2b01      	cmp	r3, #1
 8000aa4:	d102      	bne.n	8000aac <StartTask3+0x44>
 8000aa6:	7cfb      	ldrb	r3, [r7, #19]
 8000aa8:	3320      	adds	r3, #32
 8000aaa:	e000      	b.n	8000aae <StartTask3+0x46>
 8000aac:	7cfb      	ldrb	r3, [r7, #19]
 8000aae:	b2d9      	uxtb	r1, r3
 8000ab0:	f107 020c 	add.w	r2, r7, #12
 8000ab4:	697b      	ldr	r3, [r7, #20]
 8000ab6:	4413      	add	r3, r2
 8000ab8:	460a      	mov	r2, r1
 8000aba:	701a      	strb	r2, [r3, #0]
    for (size_t i = 0; i < 4; ++i)
 8000abc:	697b      	ldr	r3, [r7, #20]
 8000abe:	3301      	adds	r3, #1
 8000ac0:	617b      	str	r3, [r7, #20]
 8000ac2:	697b      	ldr	r3, [r7, #20]
 8000ac4:	2b03      	cmp	r3, #3
 8000ac6:	d9df      	bls.n	8000a88 <StartTask3+0x20>
    HAL_UART_Transmit_IT(&huart3, (uint8_t*)pocket.Buf, 4);
 8000ac8:	f107 030c 	add.w	r3, r7, #12
 8000acc:	2204      	movs	r2, #4
 8000ace:	4619      	mov	r1, r3
 8000ad0:	4805      	ldr	r0, [pc, #20]	; (8000ae8 <StartTask3+0x80>)
 8000ad2:	f002 f9af 	bl	8002e34 <HAL_UART_Transmit_IT>
    osDelay(1);
 8000ad6:	2001      	movs	r0, #1
 8000ad8:	f003 fe20 	bl	800471c <osDelay>
    osMessageQueueGet(Queue3Handle, &pocket, 0, osWaitForever);
 8000adc:	e7c8      	b.n	8000a70 <StartTask3+0x8>
 8000ade:	bf00      	nop
 8000ae0:	200049d4 	.word	0x200049d4
 8000ae4:	0800770c 	.word	0x0800770c
 8000ae8:	20004944 	.word	0x20004944

08000aec <StartTaskReceive>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTaskReceive */
void StartTaskReceive(void *argument)
{
 8000aec:	b580      	push	{r7, lr}
 8000aee:	b084      	sub	sp, #16
 8000af0:	af00      	add	r7, sp, #0
 8000af2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTaskReceive */
  /* Infinite loop */
  for(;;)
  {
    HAL_UART_Receive_IT(&huart3, (uint8_t*)buf, 5);
 8000af4:	2205      	movs	r2, #5
 8000af6:	491f      	ldr	r1, [pc, #124]	; (8000b74 <StartTaskReceive+0x88>)
 8000af8:	481f      	ldr	r0, [pc, #124]	; (8000b78 <StartTaskReceive+0x8c>)
 8000afa:	f002 fa09 	bl	8002f10 <HAL_UART_Receive_IT>

    if (flag)
 8000afe:	4b1f      	ldr	r3, [pc, #124]	; (8000b7c <StartTaskReceive+0x90>)
 8000b00:	781b      	ldrb	r3, [r3, #0]
 8000b02:	2b00      	cmp	r3, #0
 8000b04:	d032      	beq.n	8000b6c <StartTaskReceive+0x80>
    {
        queue_t pocket;
        strcpy(pocket.Buf, buf + 1);
 8000b06:	4a1e      	ldr	r2, [pc, #120]	; (8000b80 <StartTaskReceive+0x94>)
 8000b08:	f107 0308 	add.w	r3, r7, #8
 8000b0c:	4611      	mov	r1, r2
 8000b0e:	4618      	mov	r0, r3
 8000b10:	f006 fd2e 	bl	8007570 <strcpy>

        switch (buf[0])
 8000b14:	4b17      	ldr	r3, [pc, #92]	; (8000b74 <StartTaskReceive+0x88>)
 8000b16:	781b      	ldrb	r3, [r3, #0]
 8000b18:	2b33      	cmp	r3, #51	; 0x33
 8000b1a:	d01a      	beq.n	8000b52 <StartTaskReceive+0x66>
 8000b1c:	2b33      	cmp	r3, #51	; 0x33
 8000b1e:	dc22      	bgt.n	8000b66 <StartTaskReceive+0x7a>
 8000b20:	2b31      	cmp	r3, #49	; 0x31
 8000b22:	d002      	beq.n	8000b2a <StartTaskReceive+0x3e>
 8000b24:	2b32      	cmp	r3, #50	; 0x32
 8000b26:	d00a      	beq.n	8000b3e <StartTaskReceive+0x52>
 8000b28:	e01d      	b.n	8000b66 <StartTaskReceive+0x7a>
        {
            case '1' :
                osMessageQueuePut(Queue1Handle, &pocket, 0, osWaitForever);
 8000b2a:	4b16      	ldr	r3, [pc, #88]	; (8000b84 <StartTaskReceive+0x98>)
 8000b2c:	6818      	ldr	r0, [r3, #0]
 8000b2e:	f107 0108 	add.w	r1, r7, #8
 8000b32:	f04f 33ff 	mov.w	r3, #4294967295
 8000b36:	2200      	movs	r2, #0
 8000b38:	f003 fea4 	bl	8004884 <osMessageQueuePut>
                break;
 8000b3c:	e013      	b.n	8000b66 <StartTaskReceive+0x7a>

            case '2' :
                osMessageQueuePut(Queue2Handle, &pocket, 0, osWaitForever);
 8000b3e:	4b12      	ldr	r3, [pc, #72]	; (8000b88 <StartTaskReceive+0x9c>)
 8000b40:	6818      	ldr	r0, [r3, #0]
 8000b42:	f107 0108 	add.w	r1, r7, #8
 8000b46:	f04f 33ff 	mov.w	r3, #4294967295
 8000b4a:	2200      	movs	r2, #0
 8000b4c:	f003 fe9a 	bl	8004884 <osMessageQueuePut>
                break;
 8000b50:	e009      	b.n	8000b66 <StartTaskReceive+0x7a>

            case '3' :
                osMessageQueuePut(Queue3Handle, &pocket, 0, osWaitForever);
 8000b52:	4b0e      	ldr	r3, [pc, #56]	; (8000b8c <StartTaskReceive+0xa0>)
 8000b54:	6818      	ldr	r0, [r3, #0]
 8000b56:	f107 0108 	add.w	r1, r7, #8
 8000b5a:	f04f 33ff 	mov.w	r3, #4294967295
 8000b5e:	2200      	movs	r2, #0
 8000b60:	f003 fe90 	bl	8004884 <osMessageQueuePut>
                break;
 8000b64:	bf00      	nop
        }

        flag = 0;
 8000b66:	4b05      	ldr	r3, [pc, #20]	; (8000b7c <StartTaskReceive+0x90>)
 8000b68:	2200      	movs	r2, #0
 8000b6a:	701a      	strb	r2, [r3, #0]
    }

    osDelay(1);
 8000b6c:	2001      	movs	r0, #1
 8000b6e:	f003 fdd5 	bl	800471c <osDelay>
    HAL_UART_Receive_IT(&huart3, (uint8_t*)buf, 5);
 8000b72:	e7bf      	b.n	8000af4 <StartTaskReceive+0x8>
 8000b74:	2000002c 	.word	0x2000002c
 8000b78:	20004944 	.word	0x20004944
 8000b7c:	20000031 	.word	0x20000031
 8000b80:	2000002d 	.word	0x2000002d
 8000b84:	200049cc 	.word	0x200049cc
 8000b88:	20004940 	.word	0x20004940
 8000b8c:	200049d4 	.word	0x200049d4

08000b90 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000b90:	b580      	push	{r7, lr}
 8000b92:	b082      	sub	sp, #8
 8000b94:	af00      	add	r7, sp, #0
 8000b96:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM5) {
 8000b98:	687b      	ldr	r3, [r7, #4]
 8000b9a:	681b      	ldr	r3, [r3, #0]
 8000b9c:	4a04      	ldr	r2, [pc, #16]	; (8000bb0 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000b9e:	4293      	cmp	r3, r2
 8000ba0:	d101      	bne.n	8000ba6 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000ba2:	f000 f967 	bl	8000e74 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000ba6:	bf00      	nop
 8000ba8:	3708      	adds	r7, #8
 8000baa:	46bd      	mov	sp, r7
 8000bac:	bd80      	pop	{r7, pc}
 8000bae:	bf00      	nop
 8000bb0:	40000c00 	.word	0x40000c00

08000bb4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000bb4:	b480      	push	{r7}
 8000bb6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000bb8:	b672      	cpsid	i
}
 8000bba:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000bbc:	e7fe      	b.n	8000bbc <Error_Handler+0x8>
	...

08000bc0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000bc0:	b580      	push	{r7, lr}
 8000bc2:	b082      	sub	sp, #8
 8000bc4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8000bc6:	4b11      	ldr	r3, [pc, #68]	; (8000c0c <HAL_MspInit+0x4c>)
 8000bc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bca:	4a10      	ldr	r2, [pc, #64]	; (8000c0c <HAL_MspInit+0x4c>)
 8000bcc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000bd0:	6413      	str	r3, [r2, #64]	; 0x40
 8000bd2:	4b0e      	ldr	r3, [pc, #56]	; (8000c0c <HAL_MspInit+0x4c>)
 8000bd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bd6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000bda:	607b      	str	r3, [r7, #4]
 8000bdc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000bde:	4b0b      	ldr	r3, [pc, #44]	; (8000c0c <HAL_MspInit+0x4c>)
 8000be0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000be2:	4a0a      	ldr	r2, [pc, #40]	; (8000c0c <HAL_MspInit+0x4c>)
 8000be4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000be8:	6453      	str	r3, [r2, #68]	; 0x44
 8000bea:	4b08      	ldr	r3, [pc, #32]	; (8000c0c <HAL_MspInit+0x4c>)
 8000bec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000bee:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000bf2:	603b      	str	r3, [r7, #0]
 8000bf4:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000bf6:	2200      	movs	r2, #0
 8000bf8:	210f      	movs	r1, #15
 8000bfa:	f06f 0001 	mvn.w	r0, #1
 8000bfe:	f000 fa11 	bl	8001024 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c02:	bf00      	nop
 8000c04:	3708      	adds	r7, #8
 8000c06:	46bd      	mov	sp, r7
 8000c08:	bd80      	pop	{r7, pc}
 8000c0a:	bf00      	nop
 8000c0c:	40023800 	.word	0x40023800

08000c10 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000c10:	b580      	push	{r7, lr}
 8000c12:	b0ae      	sub	sp, #184	; 0xb8
 8000c14:	af00      	add	r7, sp, #0
 8000c16:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c18:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000c1c:	2200      	movs	r2, #0
 8000c1e:	601a      	str	r2, [r3, #0]
 8000c20:	605a      	str	r2, [r3, #4]
 8000c22:	609a      	str	r2, [r3, #8]
 8000c24:	60da      	str	r2, [r3, #12]
 8000c26:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000c28:	f107 0314 	add.w	r3, r7, #20
 8000c2c:	2290      	movs	r2, #144	; 0x90
 8000c2e:	2100      	movs	r1, #0
 8000c30:	4618      	mov	r0, r3
 8000c32:	f006 fc95 	bl	8007560 <memset>
  if(huart->Instance==USART3)
 8000c36:	687b      	ldr	r3, [r7, #4]
 8000c38:	681b      	ldr	r3, [r3, #0]
 8000c3a:	4a26      	ldr	r2, [pc, #152]	; (8000cd4 <HAL_UART_MspInit+0xc4>)
 8000c3c:	4293      	cmp	r3, r2
 8000c3e:	d144      	bne.n	8000cca <HAL_UART_MspInit+0xba>
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8000c40:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000c44:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8000c46:	2300      	movs	r3, #0
 8000c48:	663b      	str	r3, [r7, #96]	; 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000c4a:	f107 0314 	add.w	r3, r7, #20
 8000c4e:	4618      	mov	r0, r3
 8000c50:	f001 f99a 	bl	8001f88 <HAL_RCCEx_PeriphCLKConfig>
 8000c54:	4603      	mov	r3, r0
 8000c56:	2b00      	cmp	r3, #0
 8000c58:	d001      	beq.n	8000c5e <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8000c5a:	f7ff ffab 	bl	8000bb4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000c5e:	4b1e      	ldr	r3, [pc, #120]	; (8000cd8 <HAL_UART_MspInit+0xc8>)
 8000c60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c62:	4a1d      	ldr	r2, [pc, #116]	; (8000cd8 <HAL_UART_MspInit+0xc8>)
 8000c64:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000c68:	6413      	str	r3, [r2, #64]	; 0x40
 8000c6a:	4b1b      	ldr	r3, [pc, #108]	; (8000cd8 <HAL_UART_MspInit+0xc8>)
 8000c6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c6e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000c72:	613b      	str	r3, [r7, #16]
 8000c74:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000c76:	4b18      	ldr	r3, [pc, #96]	; (8000cd8 <HAL_UART_MspInit+0xc8>)
 8000c78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c7a:	4a17      	ldr	r2, [pc, #92]	; (8000cd8 <HAL_UART_MspInit+0xc8>)
 8000c7c:	f043 0308 	orr.w	r3, r3, #8
 8000c80:	6313      	str	r3, [r2, #48]	; 0x30
 8000c82:	4b15      	ldr	r3, [pc, #84]	; (8000cd8 <HAL_UART_MspInit+0xc8>)
 8000c84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c86:	f003 0308 	and.w	r3, r3, #8
 8000c8a:	60fb      	str	r3, [r7, #12]
 8000c8c:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8000c8e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000c92:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c96:	2302      	movs	r3, #2
 8000c98:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c9c:	2300      	movs	r3, #0
 8000c9e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ca2:	2303      	movs	r3, #3
 8000ca4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000ca8:	2307      	movs	r3, #7
 8000caa:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000cae:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000cb2:	4619      	mov	r1, r3
 8000cb4:	4809      	ldr	r0, [pc, #36]	; (8000cdc <HAL_UART_MspInit+0xcc>)
 8000cb6:	f000 fa71 	bl	800119c <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 5, 0);
 8000cba:	2200      	movs	r2, #0
 8000cbc:	2105      	movs	r1, #5
 8000cbe:	2027      	movs	r0, #39	; 0x27
 8000cc0:	f000 f9b0 	bl	8001024 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8000cc4:	2027      	movs	r0, #39	; 0x27
 8000cc6:	f000 f9c9 	bl	800105c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000cca:	bf00      	nop
 8000ccc:	37b8      	adds	r7, #184	; 0xb8
 8000cce:	46bd      	mov	sp, r7
 8000cd0:	bd80      	pop	{r7, pc}
 8000cd2:	bf00      	nop
 8000cd4:	40004800 	.word	0x40004800
 8000cd8:	40023800 	.word	0x40023800
 8000cdc:	40020c00 	.word	0x40020c00

08000ce0 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ce0:	b580      	push	{r7, lr}
 8000ce2:	b08c      	sub	sp, #48	; 0x30
 8000ce4:	af00      	add	r7, sp, #0
 8000ce6:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000ce8:	2300      	movs	r3, #0
 8000cea:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8000cec:	2300      	movs	r3, #0
 8000cee:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM5 IRQ priority */
  HAL_NVIC_SetPriority(TIM5_IRQn, TickPriority ,0);
 8000cf0:	2200      	movs	r2, #0
 8000cf2:	6879      	ldr	r1, [r7, #4]
 8000cf4:	2032      	movs	r0, #50	; 0x32
 8000cf6:	f000 f995 	bl	8001024 <HAL_NVIC_SetPriority>

  /* Enable the TIM5 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM5_IRQn);
 8000cfa:	2032      	movs	r0, #50	; 0x32
 8000cfc:	f000 f9ae 	bl	800105c <HAL_NVIC_EnableIRQ>

  /* Enable TIM5 clock */
  __HAL_RCC_TIM5_CLK_ENABLE();
 8000d00:	4b1f      	ldr	r3, [pc, #124]	; (8000d80 <HAL_InitTick+0xa0>)
 8000d02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d04:	4a1e      	ldr	r2, [pc, #120]	; (8000d80 <HAL_InitTick+0xa0>)
 8000d06:	f043 0308 	orr.w	r3, r3, #8
 8000d0a:	6413      	str	r3, [r2, #64]	; 0x40
 8000d0c:	4b1c      	ldr	r3, [pc, #112]	; (8000d80 <HAL_InitTick+0xa0>)
 8000d0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d10:	f003 0308 	and.w	r3, r3, #8
 8000d14:	60fb      	str	r3, [r7, #12]
 8000d16:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000d18:	f107 0210 	add.w	r2, r7, #16
 8000d1c:	f107 0314 	add.w	r3, r7, #20
 8000d20:	4611      	mov	r1, r2
 8000d22:	4618      	mov	r0, r3
 8000d24:	f001 f8fe 	bl	8001f24 <HAL_RCC_GetClockConfig>

  /* Compute TIM5 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8000d28:	f001 f8d4 	bl	8001ed4 <HAL_RCC_GetPCLK1Freq>
 8000d2c:	4603      	mov	r3, r0
 8000d2e:	005b      	lsls	r3, r3, #1
 8000d30:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM5 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000d32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000d34:	4a13      	ldr	r2, [pc, #76]	; (8000d84 <HAL_InitTick+0xa4>)
 8000d36:	fba2 2303 	umull	r2, r3, r2, r3
 8000d3a:	0c9b      	lsrs	r3, r3, #18
 8000d3c:	3b01      	subs	r3, #1
 8000d3e:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM5 */
  htim5.Instance = TIM5;
 8000d40:	4b11      	ldr	r3, [pc, #68]	; (8000d88 <HAL_InitTick+0xa8>)
 8000d42:	4a12      	ldr	r2, [pc, #72]	; (8000d8c <HAL_InitTick+0xac>)
 8000d44:	601a      	str	r2, [r3, #0]
  + Period = [(TIM5CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim5.Init.Period = (1000000U / 1000U) - 1U;
 8000d46:	4b10      	ldr	r3, [pc, #64]	; (8000d88 <HAL_InitTick+0xa8>)
 8000d48:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000d4c:	60da      	str	r2, [r3, #12]
  htim5.Init.Prescaler = uwPrescalerValue;
 8000d4e:	4a0e      	ldr	r2, [pc, #56]	; (8000d88 <HAL_InitTick+0xa8>)
 8000d50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000d52:	6053      	str	r3, [r2, #4]
  htim5.Init.ClockDivision = 0;
 8000d54:	4b0c      	ldr	r3, [pc, #48]	; (8000d88 <HAL_InitTick+0xa8>)
 8000d56:	2200      	movs	r2, #0
 8000d58:	611a      	str	r2, [r3, #16]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d5a:	4b0b      	ldr	r3, [pc, #44]	; (8000d88 <HAL_InitTick+0xa8>)
 8000d5c:	2200      	movs	r2, #0
 8000d5e:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim5) == HAL_OK)
 8000d60:	4809      	ldr	r0, [pc, #36]	; (8000d88 <HAL_InitTick+0xa8>)
 8000d62:	f001 fd39 	bl	80027d8 <HAL_TIM_Base_Init>
 8000d66:	4603      	mov	r3, r0
 8000d68:	2b00      	cmp	r3, #0
 8000d6a:	d104      	bne.n	8000d76 <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim5);
 8000d6c:	4806      	ldr	r0, [pc, #24]	; (8000d88 <HAL_InitTick+0xa8>)
 8000d6e:	f001 fd95 	bl	800289c <HAL_TIM_Base_Start_IT>
 8000d72:	4603      	mov	r3, r0
 8000d74:	e000      	b.n	8000d78 <HAL_InitTick+0x98>
  }

  /* Return function status */
  return HAL_ERROR;
 8000d76:	2301      	movs	r3, #1
}
 8000d78:	4618      	mov	r0, r3
 8000d7a:	3730      	adds	r7, #48	; 0x30
 8000d7c:	46bd      	mov	sp, r7
 8000d7e:	bd80      	pop	{r7, pc}
 8000d80:	40023800 	.word	0x40023800
 8000d84:	431bde83 	.word	0x431bde83
 8000d88:	200049e0 	.word	0x200049e0
 8000d8c:	40000c00 	.word	0x40000c00

08000d90 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000d90:	b480      	push	{r7}
 8000d92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000d94:	e7fe      	b.n	8000d94 <NMI_Handler+0x4>

08000d96 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d96:	b480      	push	{r7}
 8000d98:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d9a:	e7fe      	b.n	8000d9a <HardFault_Handler+0x4>

08000d9c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000d9c:	b480      	push	{r7}
 8000d9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000da0:	e7fe      	b.n	8000da0 <MemManage_Handler+0x4>

08000da2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000da2:	b480      	push	{r7}
 8000da4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000da6:	e7fe      	b.n	8000da6 <BusFault_Handler+0x4>

08000da8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000da8:	b480      	push	{r7}
 8000daa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000dac:	e7fe      	b.n	8000dac <UsageFault_Handler+0x4>

08000dae <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000dae:	b480      	push	{r7}
 8000db0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000db2:	bf00      	nop
 8000db4:	46bd      	mov	sp, r7
 8000db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dba:	4770      	bx	lr

08000dbc <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8000dbc:	b580      	push	{r7, lr}
 8000dbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8000dc0:	4802      	ldr	r0, [pc, #8]	; (8000dcc <USART3_IRQHandler+0x10>)
 8000dc2:	f002 f8f3 	bl	8002fac <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8000dc6:	bf00      	nop
 8000dc8:	bd80      	pop	{r7, pc}
 8000dca:	bf00      	nop
 8000dcc:	20004944 	.word	0x20004944

08000dd0 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 8000dd0:	b580      	push	{r7, lr}
 8000dd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 8000dd4:	4802      	ldr	r0, [pc, #8]	; (8000de0 <TIM5_IRQHandler+0x10>)
 8000dd6:	f001 fdd9 	bl	800298c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 8000dda:	bf00      	nop
 8000ddc:	bd80      	pop	{r7, pc}
 8000dde:	bf00      	nop
 8000de0:	200049e0 	.word	0x200049e0

08000de4 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000de4:	b480      	push	{r7}
 8000de6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000de8:	4b06      	ldr	r3, [pc, #24]	; (8000e04 <SystemInit+0x20>)
 8000dea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000dee:	4a05      	ldr	r2, [pc, #20]	; (8000e04 <SystemInit+0x20>)
 8000df0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000df4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000df8:	bf00      	nop
 8000dfa:	46bd      	mov	sp, r7
 8000dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e00:	4770      	bx	lr
 8000e02:	bf00      	nop
 8000e04:	e000ed00 	.word	0xe000ed00

08000e08 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000e08:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000e40 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000e0c:	480d      	ldr	r0, [pc, #52]	; (8000e44 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000e0e:	490e      	ldr	r1, [pc, #56]	; (8000e48 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000e10:	4a0e      	ldr	r2, [pc, #56]	; (8000e4c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000e12:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000e14:	e002      	b.n	8000e1c <LoopCopyDataInit>

08000e16 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000e16:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000e18:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000e1a:	3304      	adds	r3, #4

08000e1c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000e1c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000e1e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000e20:	d3f9      	bcc.n	8000e16 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000e22:	4a0b      	ldr	r2, [pc, #44]	; (8000e50 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000e24:	4c0b      	ldr	r4, [pc, #44]	; (8000e54 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000e26:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000e28:	e001      	b.n	8000e2e <LoopFillZerobss>

08000e2a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000e2a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000e2c:	3204      	adds	r2, #4

08000e2e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000e2e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000e30:	d3fb      	bcc.n	8000e2a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000e32:	f7ff ffd7 	bl	8000de4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000e36:	f006 fb61 	bl	80074fc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000e3a:	f7ff fb93 	bl	8000564 <main>
  bx  lr    
 8000e3e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000e40:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 8000e44:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000e48:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8000e4c:	08007820 	.word	0x08007820
  ldr r2, =_sbss
 8000e50:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8000e54:	20004a70 	.word	0x20004a70

08000e58 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000e58:	e7fe      	b.n	8000e58 <ADC_IRQHandler>

08000e5a <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e5a:	b580      	push	{r7, lr}
 8000e5c:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000e5e:	2003      	movs	r0, #3
 8000e60:	f000 f8d5 	bl	800100e <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000e64:	200f      	movs	r0, #15
 8000e66:	f7ff ff3b 	bl	8000ce0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000e6a:	f7ff fea9 	bl	8000bc0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000e6e:	2300      	movs	r3, #0
}
 8000e70:	4618      	mov	r0, r3
 8000e72:	bd80      	pop	{r7, pc}

08000e74 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000e74:	b480      	push	{r7}
 8000e76:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000e78:	4b06      	ldr	r3, [pc, #24]	; (8000e94 <HAL_IncTick+0x20>)
 8000e7a:	781b      	ldrb	r3, [r3, #0]
 8000e7c:	461a      	mov	r2, r3
 8000e7e:	4b06      	ldr	r3, [pc, #24]	; (8000e98 <HAL_IncTick+0x24>)
 8000e80:	681b      	ldr	r3, [r3, #0]
 8000e82:	4413      	add	r3, r2
 8000e84:	4a04      	ldr	r2, [pc, #16]	; (8000e98 <HAL_IncTick+0x24>)
 8000e86:	6013      	str	r3, [r2, #0]
}
 8000e88:	bf00      	nop
 8000e8a:	46bd      	mov	sp, r7
 8000e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e90:	4770      	bx	lr
 8000e92:	bf00      	nop
 8000e94:	20000008 	.word	0x20000008
 8000e98:	20004a2c 	.word	0x20004a2c

08000e9c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000e9c:	b480      	push	{r7}
 8000e9e:	af00      	add	r7, sp, #0
  return uwTick;
 8000ea0:	4b03      	ldr	r3, [pc, #12]	; (8000eb0 <HAL_GetTick+0x14>)
 8000ea2:	681b      	ldr	r3, [r3, #0]
}
 8000ea4:	4618      	mov	r0, r3
 8000ea6:	46bd      	mov	sp, r7
 8000ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eac:	4770      	bx	lr
 8000eae:	bf00      	nop
 8000eb0:	20004a2c 	.word	0x20004a2c

08000eb4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000eb4:	b480      	push	{r7}
 8000eb6:	b085      	sub	sp, #20
 8000eb8:	af00      	add	r7, sp, #0
 8000eba:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	f003 0307 	and.w	r3, r3, #7
 8000ec2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000ec4:	4b0b      	ldr	r3, [pc, #44]	; (8000ef4 <__NVIC_SetPriorityGrouping+0x40>)
 8000ec6:	68db      	ldr	r3, [r3, #12]
 8000ec8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000eca:	68ba      	ldr	r2, [r7, #8]
 8000ecc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000ed0:	4013      	ands	r3, r2
 8000ed2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000ed4:	68fb      	ldr	r3, [r7, #12]
 8000ed6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000ed8:	68bb      	ldr	r3, [r7, #8]
 8000eda:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8000edc:	4b06      	ldr	r3, [pc, #24]	; (8000ef8 <__NVIC_SetPriorityGrouping+0x44>)
 8000ede:	4313      	orrs	r3, r2
 8000ee0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000ee2:	4a04      	ldr	r2, [pc, #16]	; (8000ef4 <__NVIC_SetPriorityGrouping+0x40>)
 8000ee4:	68bb      	ldr	r3, [r7, #8]
 8000ee6:	60d3      	str	r3, [r2, #12]
}
 8000ee8:	bf00      	nop
 8000eea:	3714      	adds	r7, #20
 8000eec:	46bd      	mov	sp, r7
 8000eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ef2:	4770      	bx	lr
 8000ef4:	e000ed00 	.word	0xe000ed00
 8000ef8:	05fa0000 	.word	0x05fa0000

08000efc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000efc:	b480      	push	{r7}
 8000efe:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000f00:	4b04      	ldr	r3, [pc, #16]	; (8000f14 <__NVIC_GetPriorityGrouping+0x18>)
 8000f02:	68db      	ldr	r3, [r3, #12]
 8000f04:	0a1b      	lsrs	r3, r3, #8
 8000f06:	f003 0307 	and.w	r3, r3, #7
}
 8000f0a:	4618      	mov	r0, r3
 8000f0c:	46bd      	mov	sp, r7
 8000f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f12:	4770      	bx	lr
 8000f14:	e000ed00 	.word	0xe000ed00

08000f18 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f18:	b480      	push	{r7}
 8000f1a:	b083      	sub	sp, #12
 8000f1c:	af00      	add	r7, sp, #0
 8000f1e:	4603      	mov	r3, r0
 8000f20:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f22:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f26:	2b00      	cmp	r3, #0
 8000f28:	db0b      	blt.n	8000f42 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000f2a:	79fb      	ldrb	r3, [r7, #7]
 8000f2c:	f003 021f 	and.w	r2, r3, #31
 8000f30:	4907      	ldr	r1, [pc, #28]	; (8000f50 <__NVIC_EnableIRQ+0x38>)
 8000f32:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f36:	095b      	lsrs	r3, r3, #5
 8000f38:	2001      	movs	r0, #1
 8000f3a:	fa00 f202 	lsl.w	r2, r0, r2
 8000f3e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000f42:	bf00      	nop
 8000f44:	370c      	adds	r7, #12
 8000f46:	46bd      	mov	sp, r7
 8000f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f4c:	4770      	bx	lr
 8000f4e:	bf00      	nop
 8000f50:	e000e100 	.word	0xe000e100

08000f54 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000f54:	b480      	push	{r7}
 8000f56:	b083      	sub	sp, #12
 8000f58:	af00      	add	r7, sp, #0
 8000f5a:	4603      	mov	r3, r0
 8000f5c:	6039      	str	r1, [r7, #0]
 8000f5e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f60:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f64:	2b00      	cmp	r3, #0
 8000f66:	db0a      	blt.n	8000f7e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f68:	683b      	ldr	r3, [r7, #0]
 8000f6a:	b2da      	uxtb	r2, r3
 8000f6c:	490c      	ldr	r1, [pc, #48]	; (8000fa0 <__NVIC_SetPriority+0x4c>)
 8000f6e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f72:	0112      	lsls	r2, r2, #4
 8000f74:	b2d2      	uxtb	r2, r2
 8000f76:	440b      	add	r3, r1
 8000f78:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000f7c:	e00a      	b.n	8000f94 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f7e:	683b      	ldr	r3, [r7, #0]
 8000f80:	b2da      	uxtb	r2, r3
 8000f82:	4908      	ldr	r1, [pc, #32]	; (8000fa4 <__NVIC_SetPriority+0x50>)
 8000f84:	79fb      	ldrb	r3, [r7, #7]
 8000f86:	f003 030f 	and.w	r3, r3, #15
 8000f8a:	3b04      	subs	r3, #4
 8000f8c:	0112      	lsls	r2, r2, #4
 8000f8e:	b2d2      	uxtb	r2, r2
 8000f90:	440b      	add	r3, r1
 8000f92:	761a      	strb	r2, [r3, #24]
}
 8000f94:	bf00      	nop
 8000f96:	370c      	adds	r7, #12
 8000f98:	46bd      	mov	sp, r7
 8000f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f9e:	4770      	bx	lr
 8000fa0:	e000e100 	.word	0xe000e100
 8000fa4:	e000ed00 	.word	0xe000ed00

08000fa8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000fa8:	b480      	push	{r7}
 8000faa:	b089      	sub	sp, #36	; 0x24
 8000fac:	af00      	add	r7, sp, #0
 8000fae:	60f8      	str	r0, [r7, #12]
 8000fb0:	60b9      	str	r1, [r7, #8]
 8000fb2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000fb4:	68fb      	ldr	r3, [r7, #12]
 8000fb6:	f003 0307 	and.w	r3, r3, #7
 8000fba:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000fbc:	69fb      	ldr	r3, [r7, #28]
 8000fbe:	f1c3 0307 	rsb	r3, r3, #7
 8000fc2:	2b04      	cmp	r3, #4
 8000fc4:	bf28      	it	cs
 8000fc6:	2304      	movcs	r3, #4
 8000fc8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000fca:	69fb      	ldr	r3, [r7, #28]
 8000fcc:	3304      	adds	r3, #4
 8000fce:	2b06      	cmp	r3, #6
 8000fd0:	d902      	bls.n	8000fd8 <NVIC_EncodePriority+0x30>
 8000fd2:	69fb      	ldr	r3, [r7, #28]
 8000fd4:	3b03      	subs	r3, #3
 8000fd6:	e000      	b.n	8000fda <NVIC_EncodePriority+0x32>
 8000fd8:	2300      	movs	r3, #0
 8000fda:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000fdc:	f04f 32ff 	mov.w	r2, #4294967295
 8000fe0:	69bb      	ldr	r3, [r7, #24]
 8000fe2:	fa02 f303 	lsl.w	r3, r2, r3
 8000fe6:	43da      	mvns	r2, r3
 8000fe8:	68bb      	ldr	r3, [r7, #8]
 8000fea:	401a      	ands	r2, r3
 8000fec:	697b      	ldr	r3, [r7, #20]
 8000fee:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000ff0:	f04f 31ff 	mov.w	r1, #4294967295
 8000ff4:	697b      	ldr	r3, [r7, #20]
 8000ff6:	fa01 f303 	lsl.w	r3, r1, r3
 8000ffa:	43d9      	mvns	r1, r3
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001000:	4313      	orrs	r3, r2
         );
}
 8001002:	4618      	mov	r0, r3
 8001004:	3724      	adds	r7, #36	; 0x24
 8001006:	46bd      	mov	sp, r7
 8001008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800100c:	4770      	bx	lr

0800100e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800100e:	b580      	push	{r7, lr}
 8001010:	b082      	sub	sp, #8
 8001012:	af00      	add	r7, sp, #0
 8001014:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001016:	6878      	ldr	r0, [r7, #4]
 8001018:	f7ff ff4c 	bl	8000eb4 <__NVIC_SetPriorityGrouping>
}
 800101c:	bf00      	nop
 800101e:	3708      	adds	r7, #8
 8001020:	46bd      	mov	sp, r7
 8001022:	bd80      	pop	{r7, pc}

08001024 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001024:	b580      	push	{r7, lr}
 8001026:	b086      	sub	sp, #24
 8001028:	af00      	add	r7, sp, #0
 800102a:	4603      	mov	r3, r0
 800102c:	60b9      	str	r1, [r7, #8]
 800102e:	607a      	str	r2, [r7, #4]
 8001030:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001032:	2300      	movs	r3, #0
 8001034:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001036:	f7ff ff61 	bl	8000efc <__NVIC_GetPriorityGrouping>
 800103a:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800103c:	687a      	ldr	r2, [r7, #4]
 800103e:	68b9      	ldr	r1, [r7, #8]
 8001040:	6978      	ldr	r0, [r7, #20]
 8001042:	f7ff ffb1 	bl	8000fa8 <NVIC_EncodePriority>
 8001046:	4602      	mov	r2, r0
 8001048:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800104c:	4611      	mov	r1, r2
 800104e:	4618      	mov	r0, r3
 8001050:	f7ff ff80 	bl	8000f54 <__NVIC_SetPriority>
}
 8001054:	bf00      	nop
 8001056:	3718      	adds	r7, #24
 8001058:	46bd      	mov	sp, r7
 800105a:	bd80      	pop	{r7, pc}

0800105c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800105c:	b580      	push	{r7, lr}
 800105e:	b082      	sub	sp, #8
 8001060:	af00      	add	r7, sp, #0
 8001062:	4603      	mov	r3, r0
 8001064:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001066:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800106a:	4618      	mov	r0, r3
 800106c:	f7ff ff54 	bl	8000f18 <__NVIC_EnableIRQ>
}
 8001070:	bf00      	nop
 8001072:	3708      	adds	r7, #8
 8001074:	46bd      	mov	sp, r7
 8001076:	bd80      	pop	{r7, pc}

08001078 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001078:	b580      	push	{r7, lr}
 800107a:	b084      	sub	sp, #16
 800107c:	af00      	add	r7, sp, #0
 800107e:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001084:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001086:	f7ff ff09 	bl	8000e9c <HAL_GetTick>
 800108a:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001092:	b2db      	uxtb	r3, r3
 8001094:	2b02      	cmp	r3, #2
 8001096:	d008      	beq.n	80010aa <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	2280      	movs	r2, #128	; 0x80
 800109c:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	2200      	movs	r2, #0
 80010a2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 80010a6:	2301      	movs	r3, #1
 80010a8:	e052      	b.n	8001150 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	681b      	ldr	r3, [r3, #0]
 80010ae:	681a      	ldr	r2, [r3, #0]
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	681b      	ldr	r3, [r3, #0]
 80010b4:	f022 0216 	bic.w	r2, r2, #22
 80010b8:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	681b      	ldr	r3, [r3, #0]
 80010be:	695a      	ldr	r2, [r3, #20]
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	681b      	ldr	r3, [r3, #0]
 80010c4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80010c8:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010ce:	2b00      	cmp	r3, #0
 80010d0:	d103      	bne.n	80010da <HAL_DMA_Abort+0x62>
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80010d6:	2b00      	cmp	r3, #0
 80010d8:	d007      	beq.n	80010ea <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	681b      	ldr	r3, [r3, #0]
 80010de:	681a      	ldr	r2, [r3, #0]
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	681b      	ldr	r3, [r3, #0]
 80010e4:	f022 0208 	bic.w	r2, r2, #8
 80010e8:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	681b      	ldr	r3, [r3, #0]
 80010ee:	681a      	ldr	r2, [r3, #0]
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	681b      	ldr	r3, [r3, #0]
 80010f4:	f022 0201 	bic.w	r2, r2, #1
 80010f8:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80010fa:	e013      	b.n	8001124 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80010fc:	f7ff fece 	bl	8000e9c <HAL_GetTick>
 8001100:	4602      	mov	r2, r0
 8001102:	68bb      	ldr	r3, [r7, #8]
 8001104:	1ad3      	subs	r3, r2, r3
 8001106:	2b05      	cmp	r3, #5
 8001108:	d90c      	bls.n	8001124 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	2220      	movs	r2, #32
 800110e:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	2203      	movs	r2, #3
 8001114:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	2200      	movs	r2, #0
 800111c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_TIMEOUT;
 8001120:	2303      	movs	r3, #3
 8001122:	e015      	b.n	8001150 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	681b      	ldr	r3, [r3, #0]
 8001128:	681b      	ldr	r3, [r3, #0]
 800112a:	f003 0301 	and.w	r3, r3, #1
 800112e:	2b00      	cmp	r3, #0
 8001130:	d1e4      	bne.n	80010fc <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001136:	223f      	movs	r2, #63	; 0x3f
 8001138:	409a      	lsls	r2, r3
 800113a:	68fb      	ldr	r3, [r7, #12]
 800113c:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	2201      	movs	r2, #1
 8001142:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	2200      	movs	r2, #0
 800114a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
  }
  return HAL_OK;
 800114e:	2300      	movs	r3, #0
}
 8001150:	4618      	mov	r0, r3
 8001152:	3710      	adds	r7, #16
 8001154:	46bd      	mov	sp, r7
 8001156:	bd80      	pop	{r7, pc}

08001158 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001158:	b480      	push	{r7}
 800115a:	b083      	sub	sp, #12
 800115c:	af00      	add	r7, sp, #0
 800115e:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001166:	b2db      	uxtb	r3, r3
 8001168:	2b02      	cmp	r3, #2
 800116a:	d004      	beq.n	8001176 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	2280      	movs	r2, #128	; 0x80
 8001170:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001172:	2301      	movs	r3, #1
 8001174:	e00c      	b.n	8001190 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	2205      	movs	r2, #5
 800117a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	681b      	ldr	r3, [r3, #0]
 8001182:	681a      	ldr	r2, [r3, #0]
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	681b      	ldr	r3, [r3, #0]
 8001188:	f022 0201 	bic.w	r2, r2, #1
 800118c:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800118e:	2300      	movs	r3, #0
}
 8001190:	4618      	mov	r0, r3
 8001192:	370c      	adds	r7, #12
 8001194:	46bd      	mov	sp, r7
 8001196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800119a:	4770      	bx	lr

0800119c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800119c:	b480      	push	{r7}
 800119e:	b089      	sub	sp, #36	; 0x24
 80011a0:	af00      	add	r7, sp, #0
 80011a2:	6078      	str	r0, [r7, #4]
 80011a4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 80011a6:	2300      	movs	r3, #0
 80011a8:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 80011aa:	2300      	movs	r3, #0
 80011ac:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 80011ae:	2300      	movs	r3, #0
 80011b0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 80011b2:	2300      	movs	r3, #0
 80011b4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 80011b6:	2300      	movs	r3, #0
 80011b8:	61fb      	str	r3, [r7, #28]
 80011ba:	e175      	b.n	80014a8 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 80011bc:	2201      	movs	r2, #1
 80011be:	69fb      	ldr	r3, [r7, #28]
 80011c0:	fa02 f303 	lsl.w	r3, r2, r3
 80011c4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80011c6:	683b      	ldr	r3, [r7, #0]
 80011c8:	681b      	ldr	r3, [r3, #0]
 80011ca:	697a      	ldr	r2, [r7, #20]
 80011cc:	4013      	ands	r3, r2
 80011ce:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80011d0:	693a      	ldr	r2, [r7, #16]
 80011d2:	697b      	ldr	r3, [r7, #20]
 80011d4:	429a      	cmp	r2, r3
 80011d6:	f040 8164 	bne.w	80014a2 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80011da:	683b      	ldr	r3, [r7, #0]
 80011dc:	685b      	ldr	r3, [r3, #4]
 80011de:	f003 0303 	and.w	r3, r3, #3
 80011e2:	2b01      	cmp	r3, #1
 80011e4:	d005      	beq.n	80011f2 <HAL_GPIO_Init+0x56>
 80011e6:	683b      	ldr	r3, [r7, #0]
 80011e8:	685b      	ldr	r3, [r3, #4]
 80011ea:	f003 0303 	and.w	r3, r3, #3
 80011ee:	2b02      	cmp	r3, #2
 80011f0:	d130      	bne.n	8001254 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	689b      	ldr	r3, [r3, #8]
 80011f6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 80011f8:	69fb      	ldr	r3, [r7, #28]
 80011fa:	005b      	lsls	r3, r3, #1
 80011fc:	2203      	movs	r2, #3
 80011fe:	fa02 f303 	lsl.w	r3, r2, r3
 8001202:	43db      	mvns	r3, r3
 8001204:	69ba      	ldr	r2, [r7, #24]
 8001206:	4013      	ands	r3, r2
 8001208:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 800120a:	683b      	ldr	r3, [r7, #0]
 800120c:	68da      	ldr	r2, [r3, #12]
 800120e:	69fb      	ldr	r3, [r7, #28]
 8001210:	005b      	lsls	r3, r3, #1
 8001212:	fa02 f303 	lsl.w	r3, r2, r3
 8001216:	69ba      	ldr	r2, [r7, #24]
 8001218:	4313      	orrs	r3, r2
 800121a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	69ba      	ldr	r2, [r7, #24]
 8001220:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	685b      	ldr	r3, [r3, #4]
 8001226:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001228:	2201      	movs	r2, #1
 800122a:	69fb      	ldr	r3, [r7, #28]
 800122c:	fa02 f303 	lsl.w	r3, r2, r3
 8001230:	43db      	mvns	r3, r3
 8001232:	69ba      	ldr	r2, [r7, #24]
 8001234:	4013      	ands	r3, r2
 8001236:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001238:	683b      	ldr	r3, [r7, #0]
 800123a:	685b      	ldr	r3, [r3, #4]
 800123c:	091b      	lsrs	r3, r3, #4
 800123e:	f003 0201 	and.w	r2, r3, #1
 8001242:	69fb      	ldr	r3, [r7, #28]
 8001244:	fa02 f303 	lsl.w	r3, r2, r3
 8001248:	69ba      	ldr	r2, [r7, #24]
 800124a:	4313      	orrs	r3, r2
 800124c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	69ba      	ldr	r2, [r7, #24]
 8001252:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001254:	683b      	ldr	r3, [r7, #0]
 8001256:	685b      	ldr	r3, [r3, #4]
 8001258:	f003 0303 	and.w	r3, r3, #3
 800125c:	2b03      	cmp	r3, #3
 800125e:	d017      	beq.n	8001290 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	68db      	ldr	r3, [r3, #12]
 8001264:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8001266:	69fb      	ldr	r3, [r7, #28]
 8001268:	005b      	lsls	r3, r3, #1
 800126a:	2203      	movs	r2, #3
 800126c:	fa02 f303 	lsl.w	r3, r2, r3
 8001270:	43db      	mvns	r3, r3
 8001272:	69ba      	ldr	r2, [r7, #24]
 8001274:	4013      	ands	r3, r2
 8001276:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8001278:	683b      	ldr	r3, [r7, #0]
 800127a:	689a      	ldr	r2, [r3, #8]
 800127c:	69fb      	ldr	r3, [r7, #28]
 800127e:	005b      	lsls	r3, r3, #1
 8001280:	fa02 f303 	lsl.w	r3, r2, r3
 8001284:	69ba      	ldr	r2, [r7, #24]
 8001286:	4313      	orrs	r3, r2
 8001288:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	69ba      	ldr	r2, [r7, #24]
 800128e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001290:	683b      	ldr	r3, [r7, #0]
 8001292:	685b      	ldr	r3, [r3, #4]
 8001294:	f003 0303 	and.w	r3, r3, #3
 8001298:	2b02      	cmp	r3, #2
 800129a:	d123      	bne.n	80012e4 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 800129c:	69fb      	ldr	r3, [r7, #28]
 800129e:	08da      	lsrs	r2, r3, #3
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	3208      	adds	r2, #8
 80012a4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80012a8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 80012aa:	69fb      	ldr	r3, [r7, #28]
 80012ac:	f003 0307 	and.w	r3, r3, #7
 80012b0:	009b      	lsls	r3, r3, #2
 80012b2:	220f      	movs	r2, #15
 80012b4:	fa02 f303 	lsl.w	r3, r2, r3
 80012b8:	43db      	mvns	r3, r3
 80012ba:	69ba      	ldr	r2, [r7, #24]
 80012bc:	4013      	ands	r3, r2
 80012be:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 80012c0:	683b      	ldr	r3, [r7, #0]
 80012c2:	691a      	ldr	r2, [r3, #16]
 80012c4:	69fb      	ldr	r3, [r7, #28]
 80012c6:	f003 0307 	and.w	r3, r3, #7
 80012ca:	009b      	lsls	r3, r3, #2
 80012cc:	fa02 f303 	lsl.w	r3, r2, r3
 80012d0:	69ba      	ldr	r2, [r7, #24]
 80012d2:	4313      	orrs	r3, r2
 80012d4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 80012d6:	69fb      	ldr	r3, [r7, #28]
 80012d8:	08da      	lsrs	r2, r3, #3
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	3208      	adds	r2, #8
 80012de:	69b9      	ldr	r1, [r7, #24]
 80012e0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	681b      	ldr	r3, [r3, #0]
 80012e8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 80012ea:	69fb      	ldr	r3, [r7, #28]
 80012ec:	005b      	lsls	r3, r3, #1
 80012ee:	2203      	movs	r2, #3
 80012f0:	fa02 f303 	lsl.w	r3, r2, r3
 80012f4:	43db      	mvns	r3, r3
 80012f6:	69ba      	ldr	r2, [r7, #24]
 80012f8:	4013      	ands	r3, r2
 80012fa:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80012fc:	683b      	ldr	r3, [r7, #0]
 80012fe:	685b      	ldr	r3, [r3, #4]
 8001300:	f003 0203 	and.w	r2, r3, #3
 8001304:	69fb      	ldr	r3, [r7, #28]
 8001306:	005b      	lsls	r3, r3, #1
 8001308:	fa02 f303 	lsl.w	r3, r2, r3
 800130c:	69ba      	ldr	r2, [r7, #24]
 800130e:	4313      	orrs	r3, r2
 8001310:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	69ba      	ldr	r2, [r7, #24]
 8001316:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001318:	683b      	ldr	r3, [r7, #0]
 800131a:	685b      	ldr	r3, [r3, #4]
 800131c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001320:	2b00      	cmp	r3, #0
 8001322:	f000 80be 	beq.w	80014a2 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001326:	4b66      	ldr	r3, [pc, #408]	; (80014c0 <HAL_GPIO_Init+0x324>)
 8001328:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800132a:	4a65      	ldr	r2, [pc, #404]	; (80014c0 <HAL_GPIO_Init+0x324>)
 800132c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001330:	6453      	str	r3, [r2, #68]	; 0x44
 8001332:	4b63      	ldr	r3, [pc, #396]	; (80014c0 <HAL_GPIO_Init+0x324>)
 8001334:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001336:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800133a:	60fb      	str	r3, [r7, #12]
 800133c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 800133e:	4a61      	ldr	r2, [pc, #388]	; (80014c4 <HAL_GPIO_Init+0x328>)
 8001340:	69fb      	ldr	r3, [r7, #28]
 8001342:	089b      	lsrs	r3, r3, #2
 8001344:	3302      	adds	r3, #2
 8001346:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800134a:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 800134c:	69fb      	ldr	r3, [r7, #28]
 800134e:	f003 0303 	and.w	r3, r3, #3
 8001352:	009b      	lsls	r3, r3, #2
 8001354:	220f      	movs	r2, #15
 8001356:	fa02 f303 	lsl.w	r3, r2, r3
 800135a:	43db      	mvns	r3, r3
 800135c:	69ba      	ldr	r2, [r7, #24]
 800135e:	4013      	ands	r3, r2
 8001360:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	4a58      	ldr	r2, [pc, #352]	; (80014c8 <HAL_GPIO_Init+0x32c>)
 8001366:	4293      	cmp	r3, r2
 8001368:	d037      	beq.n	80013da <HAL_GPIO_Init+0x23e>
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	4a57      	ldr	r2, [pc, #348]	; (80014cc <HAL_GPIO_Init+0x330>)
 800136e:	4293      	cmp	r3, r2
 8001370:	d031      	beq.n	80013d6 <HAL_GPIO_Init+0x23a>
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	4a56      	ldr	r2, [pc, #344]	; (80014d0 <HAL_GPIO_Init+0x334>)
 8001376:	4293      	cmp	r3, r2
 8001378:	d02b      	beq.n	80013d2 <HAL_GPIO_Init+0x236>
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	4a55      	ldr	r2, [pc, #340]	; (80014d4 <HAL_GPIO_Init+0x338>)
 800137e:	4293      	cmp	r3, r2
 8001380:	d025      	beq.n	80013ce <HAL_GPIO_Init+0x232>
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	4a54      	ldr	r2, [pc, #336]	; (80014d8 <HAL_GPIO_Init+0x33c>)
 8001386:	4293      	cmp	r3, r2
 8001388:	d01f      	beq.n	80013ca <HAL_GPIO_Init+0x22e>
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	4a53      	ldr	r2, [pc, #332]	; (80014dc <HAL_GPIO_Init+0x340>)
 800138e:	4293      	cmp	r3, r2
 8001390:	d019      	beq.n	80013c6 <HAL_GPIO_Init+0x22a>
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	4a52      	ldr	r2, [pc, #328]	; (80014e0 <HAL_GPIO_Init+0x344>)
 8001396:	4293      	cmp	r3, r2
 8001398:	d013      	beq.n	80013c2 <HAL_GPIO_Init+0x226>
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	4a51      	ldr	r2, [pc, #324]	; (80014e4 <HAL_GPIO_Init+0x348>)
 800139e:	4293      	cmp	r3, r2
 80013a0:	d00d      	beq.n	80013be <HAL_GPIO_Init+0x222>
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	4a50      	ldr	r2, [pc, #320]	; (80014e8 <HAL_GPIO_Init+0x34c>)
 80013a6:	4293      	cmp	r3, r2
 80013a8:	d007      	beq.n	80013ba <HAL_GPIO_Init+0x21e>
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	4a4f      	ldr	r2, [pc, #316]	; (80014ec <HAL_GPIO_Init+0x350>)
 80013ae:	4293      	cmp	r3, r2
 80013b0:	d101      	bne.n	80013b6 <HAL_GPIO_Init+0x21a>
 80013b2:	2309      	movs	r3, #9
 80013b4:	e012      	b.n	80013dc <HAL_GPIO_Init+0x240>
 80013b6:	230a      	movs	r3, #10
 80013b8:	e010      	b.n	80013dc <HAL_GPIO_Init+0x240>
 80013ba:	2308      	movs	r3, #8
 80013bc:	e00e      	b.n	80013dc <HAL_GPIO_Init+0x240>
 80013be:	2307      	movs	r3, #7
 80013c0:	e00c      	b.n	80013dc <HAL_GPIO_Init+0x240>
 80013c2:	2306      	movs	r3, #6
 80013c4:	e00a      	b.n	80013dc <HAL_GPIO_Init+0x240>
 80013c6:	2305      	movs	r3, #5
 80013c8:	e008      	b.n	80013dc <HAL_GPIO_Init+0x240>
 80013ca:	2304      	movs	r3, #4
 80013cc:	e006      	b.n	80013dc <HAL_GPIO_Init+0x240>
 80013ce:	2303      	movs	r3, #3
 80013d0:	e004      	b.n	80013dc <HAL_GPIO_Init+0x240>
 80013d2:	2302      	movs	r3, #2
 80013d4:	e002      	b.n	80013dc <HAL_GPIO_Init+0x240>
 80013d6:	2301      	movs	r3, #1
 80013d8:	e000      	b.n	80013dc <HAL_GPIO_Init+0x240>
 80013da:	2300      	movs	r3, #0
 80013dc:	69fa      	ldr	r2, [r7, #28]
 80013de:	f002 0203 	and.w	r2, r2, #3
 80013e2:	0092      	lsls	r2, r2, #2
 80013e4:	4093      	lsls	r3, r2
 80013e6:	69ba      	ldr	r2, [r7, #24]
 80013e8:	4313      	orrs	r3, r2
 80013ea:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 80013ec:	4935      	ldr	r1, [pc, #212]	; (80014c4 <HAL_GPIO_Init+0x328>)
 80013ee:	69fb      	ldr	r3, [r7, #28]
 80013f0:	089b      	lsrs	r3, r3, #2
 80013f2:	3302      	adds	r3, #2
 80013f4:	69ba      	ldr	r2, [r7, #24]
 80013f6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80013fa:	4b3d      	ldr	r3, [pc, #244]	; (80014f0 <HAL_GPIO_Init+0x354>)
 80013fc:	689b      	ldr	r3, [r3, #8]
 80013fe:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001400:	693b      	ldr	r3, [r7, #16]
 8001402:	43db      	mvns	r3, r3
 8001404:	69ba      	ldr	r2, [r7, #24]
 8001406:	4013      	ands	r3, r2
 8001408:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800140a:	683b      	ldr	r3, [r7, #0]
 800140c:	685b      	ldr	r3, [r3, #4]
 800140e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001412:	2b00      	cmp	r3, #0
 8001414:	d003      	beq.n	800141e <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8001416:	69ba      	ldr	r2, [r7, #24]
 8001418:	693b      	ldr	r3, [r7, #16]
 800141a:	4313      	orrs	r3, r2
 800141c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800141e:	4a34      	ldr	r2, [pc, #208]	; (80014f0 <HAL_GPIO_Init+0x354>)
 8001420:	69bb      	ldr	r3, [r7, #24]
 8001422:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001424:	4b32      	ldr	r3, [pc, #200]	; (80014f0 <HAL_GPIO_Init+0x354>)
 8001426:	68db      	ldr	r3, [r3, #12]
 8001428:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800142a:	693b      	ldr	r3, [r7, #16]
 800142c:	43db      	mvns	r3, r3
 800142e:	69ba      	ldr	r2, [r7, #24]
 8001430:	4013      	ands	r3, r2
 8001432:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001434:	683b      	ldr	r3, [r7, #0]
 8001436:	685b      	ldr	r3, [r3, #4]
 8001438:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800143c:	2b00      	cmp	r3, #0
 800143e:	d003      	beq.n	8001448 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001440:	69ba      	ldr	r2, [r7, #24]
 8001442:	693b      	ldr	r3, [r7, #16]
 8001444:	4313      	orrs	r3, r2
 8001446:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001448:	4a29      	ldr	r2, [pc, #164]	; (80014f0 <HAL_GPIO_Init+0x354>)
 800144a:	69bb      	ldr	r3, [r7, #24]
 800144c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800144e:	4b28      	ldr	r3, [pc, #160]	; (80014f0 <HAL_GPIO_Init+0x354>)
 8001450:	685b      	ldr	r3, [r3, #4]
 8001452:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001454:	693b      	ldr	r3, [r7, #16]
 8001456:	43db      	mvns	r3, r3
 8001458:	69ba      	ldr	r2, [r7, #24]
 800145a:	4013      	ands	r3, r2
 800145c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800145e:	683b      	ldr	r3, [r7, #0]
 8001460:	685b      	ldr	r3, [r3, #4]
 8001462:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001466:	2b00      	cmp	r3, #0
 8001468:	d003      	beq.n	8001472 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800146a:	69ba      	ldr	r2, [r7, #24]
 800146c:	693b      	ldr	r3, [r7, #16]
 800146e:	4313      	orrs	r3, r2
 8001470:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001472:	4a1f      	ldr	r2, [pc, #124]	; (80014f0 <HAL_GPIO_Init+0x354>)
 8001474:	69bb      	ldr	r3, [r7, #24]
 8001476:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001478:	4b1d      	ldr	r3, [pc, #116]	; (80014f0 <HAL_GPIO_Init+0x354>)
 800147a:	681b      	ldr	r3, [r3, #0]
 800147c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800147e:	693b      	ldr	r3, [r7, #16]
 8001480:	43db      	mvns	r3, r3
 8001482:	69ba      	ldr	r2, [r7, #24]
 8001484:	4013      	ands	r3, r2
 8001486:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001488:	683b      	ldr	r3, [r7, #0]
 800148a:	685b      	ldr	r3, [r3, #4]
 800148c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001490:	2b00      	cmp	r3, #0
 8001492:	d003      	beq.n	800149c <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8001494:	69ba      	ldr	r2, [r7, #24]
 8001496:	693b      	ldr	r3, [r7, #16]
 8001498:	4313      	orrs	r3, r2
 800149a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800149c:	4a14      	ldr	r2, [pc, #80]	; (80014f0 <HAL_GPIO_Init+0x354>)
 800149e:	69bb      	ldr	r3, [r7, #24]
 80014a0:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 80014a2:	69fb      	ldr	r3, [r7, #28]
 80014a4:	3301      	adds	r3, #1
 80014a6:	61fb      	str	r3, [r7, #28]
 80014a8:	69fb      	ldr	r3, [r7, #28]
 80014aa:	2b0f      	cmp	r3, #15
 80014ac:	f67f ae86 	bls.w	80011bc <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 80014b0:	bf00      	nop
 80014b2:	bf00      	nop
 80014b4:	3724      	adds	r7, #36	; 0x24
 80014b6:	46bd      	mov	sp, r7
 80014b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014bc:	4770      	bx	lr
 80014be:	bf00      	nop
 80014c0:	40023800 	.word	0x40023800
 80014c4:	40013800 	.word	0x40013800
 80014c8:	40020000 	.word	0x40020000
 80014cc:	40020400 	.word	0x40020400
 80014d0:	40020800 	.word	0x40020800
 80014d4:	40020c00 	.word	0x40020c00
 80014d8:	40021000 	.word	0x40021000
 80014dc:	40021400 	.word	0x40021400
 80014e0:	40021800 	.word	0x40021800
 80014e4:	40021c00 	.word	0x40021c00
 80014e8:	40022000 	.word	0x40022000
 80014ec:	40022400 	.word	0x40022400
 80014f0:	40013c00 	.word	0x40013c00

080014f4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80014f4:	b480      	push	{r7}
 80014f6:	b083      	sub	sp, #12
 80014f8:	af00      	add	r7, sp, #0
 80014fa:	6078      	str	r0, [r7, #4]
 80014fc:	460b      	mov	r3, r1
 80014fe:	807b      	strh	r3, [r7, #2]
 8001500:	4613      	mov	r3, r2
 8001502:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001504:	787b      	ldrb	r3, [r7, #1]
 8001506:	2b00      	cmp	r3, #0
 8001508:	d003      	beq.n	8001512 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800150a:	887a      	ldrh	r2, [r7, #2]
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8001510:	e003      	b.n	800151a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8001512:	887b      	ldrh	r3, [r7, #2]
 8001514:	041a      	lsls	r2, r3, #16
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	619a      	str	r2, [r3, #24]
}
 800151a:	bf00      	nop
 800151c:	370c      	adds	r7, #12
 800151e:	46bd      	mov	sp, r7
 8001520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001524:	4770      	bx	lr
	...

08001528 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8001528:	b580      	push	{r7, lr}
 800152a:	b082      	sub	sp, #8
 800152c:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 800152e:	2300      	movs	r3, #0
 8001530:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8001532:	4b23      	ldr	r3, [pc, #140]	; (80015c0 <HAL_PWREx_EnableOverDrive+0x98>)
 8001534:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001536:	4a22      	ldr	r2, [pc, #136]	; (80015c0 <HAL_PWREx_EnableOverDrive+0x98>)
 8001538:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800153c:	6413      	str	r3, [r2, #64]	; 0x40
 800153e:	4b20      	ldr	r3, [pc, #128]	; (80015c0 <HAL_PWREx_EnableOverDrive+0x98>)
 8001540:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001542:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001546:	603b      	str	r3, [r7, #0]
 8001548:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 800154a:	4b1e      	ldr	r3, [pc, #120]	; (80015c4 <HAL_PWREx_EnableOverDrive+0x9c>)
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	4a1d      	ldr	r2, [pc, #116]	; (80015c4 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001550:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001554:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001556:	f7ff fca1 	bl	8000e9c <HAL_GetTick>
 800155a:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800155c:	e009      	b.n	8001572 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800155e:	f7ff fc9d 	bl	8000e9c <HAL_GetTick>
 8001562:	4602      	mov	r2, r0
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	1ad3      	subs	r3, r2, r3
 8001568:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800156c:	d901      	bls.n	8001572 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 800156e:	2303      	movs	r3, #3
 8001570:	e022      	b.n	80015b8 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8001572:	4b14      	ldr	r3, [pc, #80]	; (80015c4 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001574:	685b      	ldr	r3, [r3, #4]
 8001576:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800157a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800157e:	d1ee      	bne.n	800155e <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8001580:	4b10      	ldr	r3, [pc, #64]	; (80015c4 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	4a0f      	ldr	r2, [pc, #60]	; (80015c4 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001586:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800158a:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800158c:	f7ff fc86 	bl	8000e9c <HAL_GetTick>
 8001590:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8001592:	e009      	b.n	80015a8 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8001594:	f7ff fc82 	bl	8000e9c <HAL_GetTick>
 8001598:	4602      	mov	r2, r0
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	1ad3      	subs	r3, r2, r3
 800159e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80015a2:	d901      	bls.n	80015a8 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 80015a4:	2303      	movs	r3, #3
 80015a6:	e007      	b.n	80015b8 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80015a8:	4b06      	ldr	r3, [pc, #24]	; (80015c4 <HAL_PWREx_EnableOverDrive+0x9c>)
 80015aa:	685b      	ldr	r3, [r3, #4]
 80015ac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015b0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80015b4:	d1ee      	bne.n	8001594 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 80015b6:	2300      	movs	r3, #0
}
 80015b8:	4618      	mov	r0, r3
 80015ba:	3708      	adds	r7, #8
 80015bc:	46bd      	mov	sp, r7
 80015be:	bd80      	pop	{r7, pc}
 80015c0:	40023800 	.word	0x40023800
 80015c4:	40007000 	.word	0x40007000

080015c8 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80015c8:	b580      	push	{r7, lr}
 80015ca:	b086      	sub	sp, #24
 80015cc:	af00      	add	r7, sp, #0
 80015ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 80015d0:	2300      	movs	r3, #0
 80015d2:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	2b00      	cmp	r3, #0
 80015d8:	d101      	bne.n	80015de <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 80015da:	2301      	movs	r3, #1
 80015dc:	e29b      	b.n	8001b16 <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	f003 0301 	and.w	r3, r3, #1
 80015e6:	2b00      	cmp	r3, #0
 80015e8:	f000 8087 	beq.w	80016fa <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80015ec:	4b96      	ldr	r3, [pc, #600]	; (8001848 <HAL_RCC_OscConfig+0x280>)
 80015ee:	689b      	ldr	r3, [r3, #8]
 80015f0:	f003 030c 	and.w	r3, r3, #12
 80015f4:	2b04      	cmp	r3, #4
 80015f6:	d00c      	beq.n	8001612 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80015f8:	4b93      	ldr	r3, [pc, #588]	; (8001848 <HAL_RCC_OscConfig+0x280>)
 80015fa:	689b      	ldr	r3, [r3, #8]
 80015fc:	f003 030c 	and.w	r3, r3, #12
 8001600:	2b08      	cmp	r3, #8
 8001602:	d112      	bne.n	800162a <HAL_RCC_OscConfig+0x62>
 8001604:	4b90      	ldr	r3, [pc, #576]	; (8001848 <HAL_RCC_OscConfig+0x280>)
 8001606:	685b      	ldr	r3, [r3, #4]
 8001608:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800160c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001610:	d10b      	bne.n	800162a <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001612:	4b8d      	ldr	r3, [pc, #564]	; (8001848 <HAL_RCC_OscConfig+0x280>)
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800161a:	2b00      	cmp	r3, #0
 800161c:	d06c      	beq.n	80016f8 <HAL_RCC_OscConfig+0x130>
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	685b      	ldr	r3, [r3, #4]
 8001622:	2b00      	cmp	r3, #0
 8001624:	d168      	bne.n	80016f8 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8001626:	2301      	movs	r3, #1
 8001628:	e275      	b.n	8001b16 <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	685b      	ldr	r3, [r3, #4]
 800162e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001632:	d106      	bne.n	8001642 <HAL_RCC_OscConfig+0x7a>
 8001634:	4b84      	ldr	r3, [pc, #528]	; (8001848 <HAL_RCC_OscConfig+0x280>)
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	4a83      	ldr	r2, [pc, #524]	; (8001848 <HAL_RCC_OscConfig+0x280>)
 800163a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800163e:	6013      	str	r3, [r2, #0]
 8001640:	e02e      	b.n	80016a0 <HAL_RCC_OscConfig+0xd8>
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	685b      	ldr	r3, [r3, #4]
 8001646:	2b00      	cmp	r3, #0
 8001648:	d10c      	bne.n	8001664 <HAL_RCC_OscConfig+0x9c>
 800164a:	4b7f      	ldr	r3, [pc, #508]	; (8001848 <HAL_RCC_OscConfig+0x280>)
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	4a7e      	ldr	r2, [pc, #504]	; (8001848 <HAL_RCC_OscConfig+0x280>)
 8001650:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001654:	6013      	str	r3, [r2, #0]
 8001656:	4b7c      	ldr	r3, [pc, #496]	; (8001848 <HAL_RCC_OscConfig+0x280>)
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	4a7b      	ldr	r2, [pc, #492]	; (8001848 <HAL_RCC_OscConfig+0x280>)
 800165c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001660:	6013      	str	r3, [r2, #0]
 8001662:	e01d      	b.n	80016a0 <HAL_RCC_OscConfig+0xd8>
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	685b      	ldr	r3, [r3, #4]
 8001668:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800166c:	d10c      	bne.n	8001688 <HAL_RCC_OscConfig+0xc0>
 800166e:	4b76      	ldr	r3, [pc, #472]	; (8001848 <HAL_RCC_OscConfig+0x280>)
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	4a75      	ldr	r2, [pc, #468]	; (8001848 <HAL_RCC_OscConfig+0x280>)
 8001674:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001678:	6013      	str	r3, [r2, #0]
 800167a:	4b73      	ldr	r3, [pc, #460]	; (8001848 <HAL_RCC_OscConfig+0x280>)
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	4a72      	ldr	r2, [pc, #456]	; (8001848 <HAL_RCC_OscConfig+0x280>)
 8001680:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001684:	6013      	str	r3, [r2, #0]
 8001686:	e00b      	b.n	80016a0 <HAL_RCC_OscConfig+0xd8>
 8001688:	4b6f      	ldr	r3, [pc, #444]	; (8001848 <HAL_RCC_OscConfig+0x280>)
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	4a6e      	ldr	r2, [pc, #440]	; (8001848 <HAL_RCC_OscConfig+0x280>)
 800168e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001692:	6013      	str	r3, [r2, #0]
 8001694:	4b6c      	ldr	r3, [pc, #432]	; (8001848 <HAL_RCC_OscConfig+0x280>)
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	4a6b      	ldr	r2, [pc, #428]	; (8001848 <HAL_RCC_OscConfig+0x280>)
 800169a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800169e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	685b      	ldr	r3, [r3, #4]
 80016a4:	2b00      	cmp	r3, #0
 80016a6:	d013      	beq.n	80016d0 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80016a8:	f7ff fbf8 	bl	8000e9c <HAL_GetTick>
 80016ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80016ae:	e008      	b.n	80016c2 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80016b0:	f7ff fbf4 	bl	8000e9c <HAL_GetTick>
 80016b4:	4602      	mov	r2, r0
 80016b6:	693b      	ldr	r3, [r7, #16]
 80016b8:	1ad3      	subs	r3, r2, r3
 80016ba:	2b64      	cmp	r3, #100	; 0x64
 80016bc:	d901      	bls.n	80016c2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80016be:	2303      	movs	r3, #3
 80016c0:	e229      	b.n	8001b16 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80016c2:	4b61      	ldr	r3, [pc, #388]	; (8001848 <HAL_RCC_OscConfig+0x280>)
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016ca:	2b00      	cmp	r3, #0
 80016cc:	d0f0      	beq.n	80016b0 <HAL_RCC_OscConfig+0xe8>
 80016ce:	e014      	b.n	80016fa <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80016d0:	f7ff fbe4 	bl	8000e9c <HAL_GetTick>
 80016d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80016d6:	e008      	b.n	80016ea <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80016d8:	f7ff fbe0 	bl	8000e9c <HAL_GetTick>
 80016dc:	4602      	mov	r2, r0
 80016de:	693b      	ldr	r3, [r7, #16]
 80016e0:	1ad3      	subs	r3, r2, r3
 80016e2:	2b64      	cmp	r3, #100	; 0x64
 80016e4:	d901      	bls.n	80016ea <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80016e6:	2303      	movs	r3, #3
 80016e8:	e215      	b.n	8001b16 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80016ea:	4b57      	ldr	r3, [pc, #348]	; (8001848 <HAL_RCC_OscConfig+0x280>)
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016f2:	2b00      	cmp	r3, #0
 80016f4:	d1f0      	bne.n	80016d8 <HAL_RCC_OscConfig+0x110>
 80016f6:	e000      	b.n	80016fa <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80016f8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	f003 0302 	and.w	r3, r3, #2
 8001702:	2b00      	cmp	r3, #0
 8001704:	d069      	beq.n	80017da <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001706:	4b50      	ldr	r3, [pc, #320]	; (8001848 <HAL_RCC_OscConfig+0x280>)
 8001708:	689b      	ldr	r3, [r3, #8]
 800170a:	f003 030c 	and.w	r3, r3, #12
 800170e:	2b00      	cmp	r3, #0
 8001710:	d00b      	beq.n	800172a <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001712:	4b4d      	ldr	r3, [pc, #308]	; (8001848 <HAL_RCC_OscConfig+0x280>)
 8001714:	689b      	ldr	r3, [r3, #8]
 8001716:	f003 030c 	and.w	r3, r3, #12
 800171a:	2b08      	cmp	r3, #8
 800171c:	d11c      	bne.n	8001758 <HAL_RCC_OscConfig+0x190>
 800171e:	4b4a      	ldr	r3, [pc, #296]	; (8001848 <HAL_RCC_OscConfig+0x280>)
 8001720:	685b      	ldr	r3, [r3, #4]
 8001722:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001726:	2b00      	cmp	r3, #0
 8001728:	d116      	bne.n	8001758 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800172a:	4b47      	ldr	r3, [pc, #284]	; (8001848 <HAL_RCC_OscConfig+0x280>)
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	f003 0302 	and.w	r3, r3, #2
 8001732:	2b00      	cmp	r3, #0
 8001734:	d005      	beq.n	8001742 <HAL_RCC_OscConfig+0x17a>
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	68db      	ldr	r3, [r3, #12]
 800173a:	2b01      	cmp	r3, #1
 800173c:	d001      	beq.n	8001742 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800173e:	2301      	movs	r3, #1
 8001740:	e1e9      	b.n	8001b16 <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001742:	4b41      	ldr	r3, [pc, #260]	; (8001848 <HAL_RCC_OscConfig+0x280>)
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	691b      	ldr	r3, [r3, #16]
 800174e:	00db      	lsls	r3, r3, #3
 8001750:	493d      	ldr	r1, [pc, #244]	; (8001848 <HAL_RCC_OscConfig+0x280>)
 8001752:	4313      	orrs	r3, r2
 8001754:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001756:	e040      	b.n	80017da <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	68db      	ldr	r3, [r3, #12]
 800175c:	2b00      	cmp	r3, #0
 800175e:	d023      	beq.n	80017a8 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001760:	4b39      	ldr	r3, [pc, #228]	; (8001848 <HAL_RCC_OscConfig+0x280>)
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	4a38      	ldr	r2, [pc, #224]	; (8001848 <HAL_RCC_OscConfig+0x280>)
 8001766:	f043 0301 	orr.w	r3, r3, #1
 800176a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800176c:	f7ff fb96 	bl	8000e9c <HAL_GetTick>
 8001770:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001772:	e008      	b.n	8001786 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001774:	f7ff fb92 	bl	8000e9c <HAL_GetTick>
 8001778:	4602      	mov	r2, r0
 800177a:	693b      	ldr	r3, [r7, #16]
 800177c:	1ad3      	subs	r3, r2, r3
 800177e:	2b02      	cmp	r3, #2
 8001780:	d901      	bls.n	8001786 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8001782:	2303      	movs	r3, #3
 8001784:	e1c7      	b.n	8001b16 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001786:	4b30      	ldr	r3, [pc, #192]	; (8001848 <HAL_RCC_OscConfig+0x280>)
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	f003 0302 	and.w	r3, r3, #2
 800178e:	2b00      	cmp	r3, #0
 8001790:	d0f0      	beq.n	8001774 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001792:	4b2d      	ldr	r3, [pc, #180]	; (8001848 <HAL_RCC_OscConfig+0x280>)
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	691b      	ldr	r3, [r3, #16]
 800179e:	00db      	lsls	r3, r3, #3
 80017a0:	4929      	ldr	r1, [pc, #164]	; (8001848 <HAL_RCC_OscConfig+0x280>)
 80017a2:	4313      	orrs	r3, r2
 80017a4:	600b      	str	r3, [r1, #0]
 80017a6:	e018      	b.n	80017da <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80017a8:	4b27      	ldr	r3, [pc, #156]	; (8001848 <HAL_RCC_OscConfig+0x280>)
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	4a26      	ldr	r2, [pc, #152]	; (8001848 <HAL_RCC_OscConfig+0x280>)
 80017ae:	f023 0301 	bic.w	r3, r3, #1
 80017b2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80017b4:	f7ff fb72 	bl	8000e9c <HAL_GetTick>
 80017b8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80017ba:	e008      	b.n	80017ce <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80017bc:	f7ff fb6e 	bl	8000e9c <HAL_GetTick>
 80017c0:	4602      	mov	r2, r0
 80017c2:	693b      	ldr	r3, [r7, #16]
 80017c4:	1ad3      	subs	r3, r2, r3
 80017c6:	2b02      	cmp	r3, #2
 80017c8:	d901      	bls.n	80017ce <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80017ca:	2303      	movs	r3, #3
 80017cc:	e1a3      	b.n	8001b16 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80017ce:	4b1e      	ldr	r3, [pc, #120]	; (8001848 <HAL_RCC_OscConfig+0x280>)
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	f003 0302 	and.w	r3, r3, #2
 80017d6:	2b00      	cmp	r3, #0
 80017d8:	d1f0      	bne.n	80017bc <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	f003 0308 	and.w	r3, r3, #8
 80017e2:	2b00      	cmp	r3, #0
 80017e4:	d038      	beq.n	8001858 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	695b      	ldr	r3, [r3, #20]
 80017ea:	2b00      	cmp	r3, #0
 80017ec:	d019      	beq.n	8001822 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80017ee:	4b16      	ldr	r3, [pc, #88]	; (8001848 <HAL_RCC_OscConfig+0x280>)
 80017f0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80017f2:	4a15      	ldr	r2, [pc, #84]	; (8001848 <HAL_RCC_OscConfig+0x280>)
 80017f4:	f043 0301 	orr.w	r3, r3, #1
 80017f8:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80017fa:	f7ff fb4f 	bl	8000e9c <HAL_GetTick>
 80017fe:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001800:	e008      	b.n	8001814 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001802:	f7ff fb4b 	bl	8000e9c <HAL_GetTick>
 8001806:	4602      	mov	r2, r0
 8001808:	693b      	ldr	r3, [r7, #16]
 800180a:	1ad3      	subs	r3, r2, r3
 800180c:	2b02      	cmp	r3, #2
 800180e:	d901      	bls.n	8001814 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001810:	2303      	movs	r3, #3
 8001812:	e180      	b.n	8001b16 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001814:	4b0c      	ldr	r3, [pc, #48]	; (8001848 <HAL_RCC_OscConfig+0x280>)
 8001816:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001818:	f003 0302 	and.w	r3, r3, #2
 800181c:	2b00      	cmp	r3, #0
 800181e:	d0f0      	beq.n	8001802 <HAL_RCC_OscConfig+0x23a>
 8001820:	e01a      	b.n	8001858 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001822:	4b09      	ldr	r3, [pc, #36]	; (8001848 <HAL_RCC_OscConfig+0x280>)
 8001824:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001826:	4a08      	ldr	r2, [pc, #32]	; (8001848 <HAL_RCC_OscConfig+0x280>)
 8001828:	f023 0301 	bic.w	r3, r3, #1
 800182c:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800182e:	f7ff fb35 	bl	8000e9c <HAL_GetTick>
 8001832:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001834:	e00a      	b.n	800184c <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001836:	f7ff fb31 	bl	8000e9c <HAL_GetTick>
 800183a:	4602      	mov	r2, r0
 800183c:	693b      	ldr	r3, [r7, #16]
 800183e:	1ad3      	subs	r3, r2, r3
 8001840:	2b02      	cmp	r3, #2
 8001842:	d903      	bls.n	800184c <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8001844:	2303      	movs	r3, #3
 8001846:	e166      	b.n	8001b16 <HAL_RCC_OscConfig+0x54e>
 8001848:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800184c:	4b92      	ldr	r3, [pc, #584]	; (8001a98 <HAL_RCC_OscConfig+0x4d0>)
 800184e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001850:	f003 0302 	and.w	r3, r3, #2
 8001854:	2b00      	cmp	r3, #0
 8001856:	d1ee      	bne.n	8001836 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	f003 0304 	and.w	r3, r3, #4
 8001860:	2b00      	cmp	r3, #0
 8001862:	f000 80a4 	beq.w	80019ae <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001866:	4b8c      	ldr	r3, [pc, #560]	; (8001a98 <HAL_RCC_OscConfig+0x4d0>)
 8001868:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800186a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800186e:	2b00      	cmp	r3, #0
 8001870:	d10d      	bne.n	800188e <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8001872:	4b89      	ldr	r3, [pc, #548]	; (8001a98 <HAL_RCC_OscConfig+0x4d0>)
 8001874:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001876:	4a88      	ldr	r2, [pc, #544]	; (8001a98 <HAL_RCC_OscConfig+0x4d0>)
 8001878:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800187c:	6413      	str	r3, [r2, #64]	; 0x40
 800187e:	4b86      	ldr	r3, [pc, #536]	; (8001a98 <HAL_RCC_OscConfig+0x4d0>)
 8001880:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001882:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001886:	60bb      	str	r3, [r7, #8]
 8001888:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800188a:	2301      	movs	r3, #1
 800188c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800188e:	4b83      	ldr	r3, [pc, #524]	; (8001a9c <HAL_RCC_OscConfig+0x4d4>)
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001896:	2b00      	cmp	r3, #0
 8001898:	d118      	bne.n	80018cc <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 800189a:	4b80      	ldr	r3, [pc, #512]	; (8001a9c <HAL_RCC_OscConfig+0x4d4>)
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	4a7f      	ldr	r2, [pc, #508]	; (8001a9c <HAL_RCC_OscConfig+0x4d4>)
 80018a0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80018a4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80018a6:	f7ff faf9 	bl	8000e9c <HAL_GetTick>
 80018aa:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80018ac:	e008      	b.n	80018c0 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80018ae:	f7ff faf5 	bl	8000e9c <HAL_GetTick>
 80018b2:	4602      	mov	r2, r0
 80018b4:	693b      	ldr	r3, [r7, #16]
 80018b6:	1ad3      	subs	r3, r2, r3
 80018b8:	2b64      	cmp	r3, #100	; 0x64
 80018ba:	d901      	bls.n	80018c0 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 80018bc:	2303      	movs	r3, #3
 80018be:	e12a      	b.n	8001b16 <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80018c0:	4b76      	ldr	r3, [pc, #472]	; (8001a9c <HAL_RCC_OscConfig+0x4d4>)
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80018c8:	2b00      	cmp	r3, #0
 80018ca:	d0f0      	beq.n	80018ae <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	689b      	ldr	r3, [r3, #8]
 80018d0:	2b01      	cmp	r3, #1
 80018d2:	d106      	bne.n	80018e2 <HAL_RCC_OscConfig+0x31a>
 80018d4:	4b70      	ldr	r3, [pc, #448]	; (8001a98 <HAL_RCC_OscConfig+0x4d0>)
 80018d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80018d8:	4a6f      	ldr	r2, [pc, #444]	; (8001a98 <HAL_RCC_OscConfig+0x4d0>)
 80018da:	f043 0301 	orr.w	r3, r3, #1
 80018de:	6713      	str	r3, [r2, #112]	; 0x70
 80018e0:	e02d      	b.n	800193e <HAL_RCC_OscConfig+0x376>
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	689b      	ldr	r3, [r3, #8]
 80018e6:	2b00      	cmp	r3, #0
 80018e8:	d10c      	bne.n	8001904 <HAL_RCC_OscConfig+0x33c>
 80018ea:	4b6b      	ldr	r3, [pc, #428]	; (8001a98 <HAL_RCC_OscConfig+0x4d0>)
 80018ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80018ee:	4a6a      	ldr	r2, [pc, #424]	; (8001a98 <HAL_RCC_OscConfig+0x4d0>)
 80018f0:	f023 0301 	bic.w	r3, r3, #1
 80018f4:	6713      	str	r3, [r2, #112]	; 0x70
 80018f6:	4b68      	ldr	r3, [pc, #416]	; (8001a98 <HAL_RCC_OscConfig+0x4d0>)
 80018f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80018fa:	4a67      	ldr	r2, [pc, #412]	; (8001a98 <HAL_RCC_OscConfig+0x4d0>)
 80018fc:	f023 0304 	bic.w	r3, r3, #4
 8001900:	6713      	str	r3, [r2, #112]	; 0x70
 8001902:	e01c      	b.n	800193e <HAL_RCC_OscConfig+0x376>
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	689b      	ldr	r3, [r3, #8]
 8001908:	2b05      	cmp	r3, #5
 800190a:	d10c      	bne.n	8001926 <HAL_RCC_OscConfig+0x35e>
 800190c:	4b62      	ldr	r3, [pc, #392]	; (8001a98 <HAL_RCC_OscConfig+0x4d0>)
 800190e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001910:	4a61      	ldr	r2, [pc, #388]	; (8001a98 <HAL_RCC_OscConfig+0x4d0>)
 8001912:	f043 0304 	orr.w	r3, r3, #4
 8001916:	6713      	str	r3, [r2, #112]	; 0x70
 8001918:	4b5f      	ldr	r3, [pc, #380]	; (8001a98 <HAL_RCC_OscConfig+0x4d0>)
 800191a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800191c:	4a5e      	ldr	r2, [pc, #376]	; (8001a98 <HAL_RCC_OscConfig+0x4d0>)
 800191e:	f043 0301 	orr.w	r3, r3, #1
 8001922:	6713      	str	r3, [r2, #112]	; 0x70
 8001924:	e00b      	b.n	800193e <HAL_RCC_OscConfig+0x376>
 8001926:	4b5c      	ldr	r3, [pc, #368]	; (8001a98 <HAL_RCC_OscConfig+0x4d0>)
 8001928:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800192a:	4a5b      	ldr	r2, [pc, #364]	; (8001a98 <HAL_RCC_OscConfig+0x4d0>)
 800192c:	f023 0301 	bic.w	r3, r3, #1
 8001930:	6713      	str	r3, [r2, #112]	; 0x70
 8001932:	4b59      	ldr	r3, [pc, #356]	; (8001a98 <HAL_RCC_OscConfig+0x4d0>)
 8001934:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001936:	4a58      	ldr	r2, [pc, #352]	; (8001a98 <HAL_RCC_OscConfig+0x4d0>)
 8001938:	f023 0304 	bic.w	r3, r3, #4
 800193c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	689b      	ldr	r3, [r3, #8]
 8001942:	2b00      	cmp	r3, #0
 8001944:	d015      	beq.n	8001972 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001946:	f7ff faa9 	bl	8000e9c <HAL_GetTick>
 800194a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800194c:	e00a      	b.n	8001964 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800194e:	f7ff faa5 	bl	8000e9c <HAL_GetTick>
 8001952:	4602      	mov	r2, r0
 8001954:	693b      	ldr	r3, [r7, #16]
 8001956:	1ad3      	subs	r3, r2, r3
 8001958:	f241 3288 	movw	r2, #5000	; 0x1388
 800195c:	4293      	cmp	r3, r2
 800195e:	d901      	bls.n	8001964 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8001960:	2303      	movs	r3, #3
 8001962:	e0d8      	b.n	8001b16 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001964:	4b4c      	ldr	r3, [pc, #304]	; (8001a98 <HAL_RCC_OscConfig+0x4d0>)
 8001966:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001968:	f003 0302 	and.w	r3, r3, #2
 800196c:	2b00      	cmp	r3, #0
 800196e:	d0ee      	beq.n	800194e <HAL_RCC_OscConfig+0x386>
 8001970:	e014      	b.n	800199c <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001972:	f7ff fa93 	bl	8000e9c <HAL_GetTick>
 8001976:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001978:	e00a      	b.n	8001990 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800197a:	f7ff fa8f 	bl	8000e9c <HAL_GetTick>
 800197e:	4602      	mov	r2, r0
 8001980:	693b      	ldr	r3, [r7, #16]
 8001982:	1ad3      	subs	r3, r2, r3
 8001984:	f241 3288 	movw	r2, #5000	; 0x1388
 8001988:	4293      	cmp	r3, r2
 800198a:	d901      	bls.n	8001990 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 800198c:	2303      	movs	r3, #3
 800198e:	e0c2      	b.n	8001b16 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001990:	4b41      	ldr	r3, [pc, #260]	; (8001a98 <HAL_RCC_OscConfig+0x4d0>)
 8001992:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001994:	f003 0302 	and.w	r3, r3, #2
 8001998:	2b00      	cmp	r3, #0
 800199a:	d1ee      	bne.n	800197a <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800199c:	7dfb      	ldrb	r3, [r7, #23]
 800199e:	2b01      	cmp	r3, #1
 80019a0:	d105      	bne.n	80019ae <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80019a2:	4b3d      	ldr	r3, [pc, #244]	; (8001a98 <HAL_RCC_OscConfig+0x4d0>)
 80019a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019a6:	4a3c      	ldr	r2, [pc, #240]	; (8001a98 <HAL_RCC_OscConfig+0x4d0>)
 80019a8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80019ac:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	699b      	ldr	r3, [r3, #24]
 80019b2:	2b00      	cmp	r3, #0
 80019b4:	f000 80ae 	beq.w	8001b14 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80019b8:	4b37      	ldr	r3, [pc, #220]	; (8001a98 <HAL_RCC_OscConfig+0x4d0>)
 80019ba:	689b      	ldr	r3, [r3, #8]
 80019bc:	f003 030c 	and.w	r3, r3, #12
 80019c0:	2b08      	cmp	r3, #8
 80019c2:	d06d      	beq.n	8001aa0 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	699b      	ldr	r3, [r3, #24]
 80019c8:	2b02      	cmp	r3, #2
 80019ca:	d14b      	bne.n	8001a64 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80019cc:	4b32      	ldr	r3, [pc, #200]	; (8001a98 <HAL_RCC_OscConfig+0x4d0>)
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	4a31      	ldr	r2, [pc, #196]	; (8001a98 <HAL_RCC_OscConfig+0x4d0>)
 80019d2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80019d6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80019d8:	f7ff fa60 	bl	8000e9c <HAL_GetTick>
 80019dc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80019de:	e008      	b.n	80019f2 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80019e0:	f7ff fa5c 	bl	8000e9c <HAL_GetTick>
 80019e4:	4602      	mov	r2, r0
 80019e6:	693b      	ldr	r3, [r7, #16]
 80019e8:	1ad3      	subs	r3, r2, r3
 80019ea:	2b02      	cmp	r3, #2
 80019ec:	d901      	bls.n	80019f2 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 80019ee:	2303      	movs	r3, #3
 80019f0:	e091      	b.n	8001b16 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80019f2:	4b29      	ldr	r3, [pc, #164]	; (8001a98 <HAL_RCC_OscConfig+0x4d0>)
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80019fa:	2b00      	cmp	r3, #0
 80019fc:	d1f0      	bne.n	80019e0 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	69da      	ldr	r2, [r3, #28]
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	6a1b      	ldr	r3, [r3, #32]
 8001a06:	431a      	orrs	r2, r3
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a0c:	019b      	lsls	r3, r3, #6
 8001a0e:	431a      	orrs	r2, r3
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a14:	085b      	lsrs	r3, r3, #1
 8001a16:	3b01      	subs	r3, #1
 8001a18:	041b      	lsls	r3, r3, #16
 8001a1a:	431a      	orrs	r2, r3
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a20:	061b      	lsls	r3, r3, #24
 8001a22:	431a      	orrs	r2, r3
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a28:	071b      	lsls	r3, r3, #28
 8001a2a:	491b      	ldr	r1, [pc, #108]	; (8001a98 <HAL_RCC_OscConfig+0x4d0>)
 8001a2c:	4313      	orrs	r3, r2
 8001a2e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001a30:	4b19      	ldr	r3, [pc, #100]	; (8001a98 <HAL_RCC_OscConfig+0x4d0>)
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	4a18      	ldr	r2, [pc, #96]	; (8001a98 <HAL_RCC_OscConfig+0x4d0>)
 8001a36:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001a3a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a3c:	f7ff fa2e 	bl	8000e9c <HAL_GetTick>
 8001a40:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001a42:	e008      	b.n	8001a56 <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001a44:	f7ff fa2a 	bl	8000e9c <HAL_GetTick>
 8001a48:	4602      	mov	r2, r0
 8001a4a:	693b      	ldr	r3, [r7, #16]
 8001a4c:	1ad3      	subs	r3, r2, r3
 8001a4e:	2b02      	cmp	r3, #2
 8001a50:	d901      	bls.n	8001a56 <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8001a52:	2303      	movs	r3, #3
 8001a54:	e05f      	b.n	8001b16 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001a56:	4b10      	ldr	r3, [pc, #64]	; (8001a98 <HAL_RCC_OscConfig+0x4d0>)
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a5e:	2b00      	cmp	r3, #0
 8001a60:	d0f0      	beq.n	8001a44 <HAL_RCC_OscConfig+0x47c>
 8001a62:	e057      	b.n	8001b14 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001a64:	4b0c      	ldr	r3, [pc, #48]	; (8001a98 <HAL_RCC_OscConfig+0x4d0>)
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	4a0b      	ldr	r2, [pc, #44]	; (8001a98 <HAL_RCC_OscConfig+0x4d0>)
 8001a6a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001a6e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a70:	f7ff fa14 	bl	8000e9c <HAL_GetTick>
 8001a74:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001a76:	e008      	b.n	8001a8a <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001a78:	f7ff fa10 	bl	8000e9c <HAL_GetTick>
 8001a7c:	4602      	mov	r2, r0
 8001a7e:	693b      	ldr	r3, [r7, #16]
 8001a80:	1ad3      	subs	r3, r2, r3
 8001a82:	2b02      	cmp	r3, #2
 8001a84:	d901      	bls.n	8001a8a <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 8001a86:	2303      	movs	r3, #3
 8001a88:	e045      	b.n	8001b16 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001a8a:	4b03      	ldr	r3, [pc, #12]	; (8001a98 <HAL_RCC_OscConfig+0x4d0>)
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a92:	2b00      	cmp	r3, #0
 8001a94:	d1f0      	bne.n	8001a78 <HAL_RCC_OscConfig+0x4b0>
 8001a96:	e03d      	b.n	8001b14 <HAL_RCC_OscConfig+0x54c>
 8001a98:	40023800 	.word	0x40023800
 8001a9c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8001aa0:	4b1f      	ldr	r3, [pc, #124]	; (8001b20 <HAL_RCC_OscConfig+0x558>)
 8001aa2:	685b      	ldr	r3, [r3, #4]
 8001aa4:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	699b      	ldr	r3, [r3, #24]
 8001aaa:	2b01      	cmp	r3, #1
 8001aac:	d030      	beq.n	8001b10 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001aae:	68fb      	ldr	r3, [r7, #12]
 8001ab0:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001ab8:	429a      	cmp	r2, r3
 8001aba:	d129      	bne.n	8001b10 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001abc:	68fb      	ldr	r3, [r7, #12]
 8001abe:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001ac6:	429a      	cmp	r2, r3
 8001ac8:	d122      	bne.n	8001b10 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001aca:	68fa      	ldr	r2, [r7, #12]
 8001acc:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001ad0:	4013      	ands	r3, r2
 8001ad2:	687a      	ldr	r2, [r7, #4]
 8001ad4:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001ad6:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001ad8:	4293      	cmp	r3, r2
 8001ada:	d119      	bne.n	8001b10 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8001adc:	68fb      	ldr	r3, [r7, #12]
 8001ade:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ae6:	085b      	lsrs	r3, r3, #1
 8001ae8:	3b01      	subs	r3, #1
 8001aea:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001aec:	429a      	cmp	r2, r3
 8001aee:	d10f      	bne.n	8001b10 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001af0:	68fb      	ldr	r3, [r7, #12]
 8001af2:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001afa:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8001afc:	429a      	cmp	r2, r3
 8001afe:	d107      	bne.n	8001b10 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8001b00:	68fb      	ldr	r3, [r7, #12]
 8001b02:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b0a:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001b0c:	429a      	cmp	r2, r3
 8001b0e:	d001      	beq.n	8001b14 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 8001b10:	2301      	movs	r3, #1
 8001b12:	e000      	b.n	8001b16 <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 8001b14:	2300      	movs	r3, #0
}
 8001b16:	4618      	mov	r0, r3
 8001b18:	3718      	adds	r7, #24
 8001b1a:	46bd      	mov	sp, r7
 8001b1c:	bd80      	pop	{r7, pc}
 8001b1e:	bf00      	nop
 8001b20:	40023800 	.word	0x40023800

08001b24 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001b24:	b580      	push	{r7, lr}
 8001b26:	b084      	sub	sp, #16
 8001b28:	af00      	add	r7, sp, #0
 8001b2a:	6078      	str	r0, [r7, #4]
 8001b2c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8001b2e:	2300      	movs	r3, #0
 8001b30:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	2b00      	cmp	r3, #0
 8001b36:	d101      	bne.n	8001b3c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8001b38:	2301      	movs	r3, #1
 8001b3a:	e0d0      	b.n	8001cde <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001b3c:	4b6a      	ldr	r3, [pc, #424]	; (8001ce8 <HAL_RCC_ClockConfig+0x1c4>)
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	f003 030f 	and.w	r3, r3, #15
 8001b44:	683a      	ldr	r2, [r7, #0]
 8001b46:	429a      	cmp	r2, r3
 8001b48:	d910      	bls.n	8001b6c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001b4a:	4b67      	ldr	r3, [pc, #412]	; (8001ce8 <HAL_RCC_ClockConfig+0x1c4>)
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	f023 020f 	bic.w	r2, r3, #15
 8001b52:	4965      	ldr	r1, [pc, #404]	; (8001ce8 <HAL_RCC_ClockConfig+0x1c4>)
 8001b54:	683b      	ldr	r3, [r7, #0]
 8001b56:	4313      	orrs	r3, r2
 8001b58:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001b5a:	4b63      	ldr	r3, [pc, #396]	; (8001ce8 <HAL_RCC_ClockConfig+0x1c4>)
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	f003 030f 	and.w	r3, r3, #15
 8001b62:	683a      	ldr	r2, [r7, #0]
 8001b64:	429a      	cmp	r2, r3
 8001b66:	d001      	beq.n	8001b6c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8001b68:	2301      	movs	r3, #1
 8001b6a:	e0b8      	b.n	8001cde <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	f003 0302 	and.w	r3, r3, #2
 8001b74:	2b00      	cmp	r3, #0
 8001b76:	d020      	beq.n	8001bba <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	f003 0304 	and.w	r3, r3, #4
 8001b80:	2b00      	cmp	r3, #0
 8001b82:	d005      	beq.n	8001b90 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001b84:	4b59      	ldr	r3, [pc, #356]	; (8001cec <HAL_RCC_ClockConfig+0x1c8>)
 8001b86:	689b      	ldr	r3, [r3, #8]
 8001b88:	4a58      	ldr	r2, [pc, #352]	; (8001cec <HAL_RCC_ClockConfig+0x1c8>)
 8001b8a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001b8e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	f003 0308 	and.w	r3, r3, #8
 8001b98:	2b00      	cmp	r3, #0
 8001b9a:	d005      	beq.n	8001ba8 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001b9c:	4b53      	ldr	r3, [pc, #332]	; (8001cec <HAL_RCC_ClockConfig+0x1c8>)
 8001b9e:	689b      	ldr	r3, [r3, #8]
 8001ba0:	4a52      	ldr	r2, [pc, #328]	; (8001cec <HAL_RCC_ClockConfig+0x1c8>)
 8001ba2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001ba6:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001ba8:	4b50      	ldr	r3, [pc, #320]	; (8001cec <HAL_RCC_ClockConfig+0x1c8>)
 8001baa:	689b      	ldr	r3, [r3, #8]
 8001bac:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	689b      	ldr	r3, [r3, #8]
 8001bb4:	494d      	ldr	r1, [pc, #308]	; (8001cec <HAL_RCC_ClockConfig+0x1c8>)
 8001bb6:	4313      	orrs	r3, r2
 8001bb8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	f003 0301 	and.w	r3, r3, #1
 8001bc2:	2b00      	cmp	r3, #0
 8001bc4:	d040      	beq.n	8001c48 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	685b      	ldr	r3, [r3, #4]
 8001bca:	2b01      	cmp	r3, #1
 8001bcc:	d107      	bne.n	8001bde <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001bce:	4b47      	ldr	r3, [pc, #284]	; (8001cec <HAL_RCC_ClockConfig+0x1c8>)
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001bd6:	2b00      	cmp	r3, #0
 8001bd8:	d115      	bne.n	8001c06 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8001bda:	2301      	movs	r3, #1
 8001bdc:	e07f      	b.n	8001cde <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	685b      	ldr	r3, [r3, #4]
 8001be2:	2b02      	cmp	r3, #2
 8001be4:	d107      	bne.n	8001bf6 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001be6:	4b41      	ldr	r3, [pc, #260]	; (8001cec <HAL_RCC_ClockConfig+0x1c8>)
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001bee:	2b00      	cmp	r3, #0
 8001bf0:	d109      	bne.n	8001c06 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8001bf2:	2301      	movs	r3, #1
 8001bf4:	e073      	b.n	8001cde <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001bf6:	4b3d      	ldr	r3, [pc, #244]	; (8001cec <HAL_RCC_ClockConfig+0x1c8>)
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	f003 0302 	and.w	r3, r3, #2
 8001bfe:	2b00      	cmp	r3, #0
 8001c00:	d101      	bne.n	8001c06 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8001c02:	2301      	movs	r3, #1
 8001c04:	e06b      	b.n	8001cde <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001c06:	4b39      	ldr	r3, [pc, #228]	; (8001cec <HAL_RCC_ClockConfig+0x1c8>)
 8001c08:	689b      	ldr	r3, [r3, #8]
 8001c0a:	f023 0203 	bic.w	r2, r3, #3
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	685b      	ldr	r3, [r3, #4]
 8001c12:	4936      	ldr	r1, [pc, #216]	; (8001cec <HAL_RCC_ClockConfig+0x1c8>)
 8001c14:	4313      	orrs	r3, r2
 8001c16:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001c18:	f7ff f940 	bl	8000e9c <HAL_GetTick>
 8001c1c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001c1e:	e00a      	b.n	8001c36 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001c20:	f7ff f93c 	bl	8000e9c <HAL_GetTick>
 8001c24:	4602      	mov	r2, r0
 8001c26:	68fb      	ldr	r3, [r7, #12]
 8001c28:	1ad3      	subs	r3, r2, r3
 8001c2a:	f241 3288 	movw	r2, #5000	; 0x1388
 8001c2e:	4293      	cmp	r3, r2
 8001c30:	d901      	bls.n	8001c36 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8001c32:	2303      	movs	r3, #3
 8001c34:	e053      	b.n	8001cde <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001c36:	4b2d      	ldr	r3, [pc, #180]	; (8001cec <HAL_RCC_ClockConfig+0x1c8>)
 8001c38:	689b      	ldr	r3, [r3, #8]
 8001c3a:	f003 020c 	and.w	r2, r3, #12
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	685b      	ldr	r3, [r3, #4]
 8001c42:	009b      	lsls	r3, r3, #2
 8001c44:	429a      	cmp	r2, r3
 8001c46:	d1eb      	bne.n	8001c20 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001c48:	4b27      	ldr	r3, [pc, #156]	; (8001ce8 <HAL_RCC_ClockConfig+0x1c4>)
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	f003 030f 	and.w	r3, r3, #15
 8001c50:	683a      	ldr	r2, [r7, #0]
 8001c52:	429a      	cmp	r2, r3
 8001c54:	d210      	bcs.n	8001c78 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001c56:	4b24      	ldr	r3, [pc, #144]	; (8001ce8 <HAL_RCC_ClockConfig+0x1c4>)
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	f023 020f 	bic.w	r2, r3, #15
 8001c5e:	4922      	ldr	r1, [pc, #136]	; (8001ce8 <HAL_RCC_ClockConfig+0x1c4>)
 8001c60:	683b      	ldr	r3, [r7, #0]
 8001c62:	4313      	orrs	r3, r2
 8001c64:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001c66:	4b20      	ldr	r3, [pc, #128]	; (8001ce8 <HAL_RCC_ClockConfig+0x1c4>)
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	f003 030f 	and.w	r3, r3, #15
 8001c6e:	683a      	ldr	r2, [r7, #0]
 8001c70:	429a      	cmp	r2, r3
 8001c72:	d001      	beq.n	8001c78 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8001c74:	2301      	movs	r3, #1
 8001c76:	e032      	b.n	8001cde <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	f003 0304 	and.w	r3, r3, #4
 8001c80:	2b00      	cmp	r3, #0
 8001c82:	d008      	beq.n	8001c96 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001c84:	4b19      	ldr	r3, [pc, #100]	; (8001cec <HAL_RCC_ClockConfig+0x1c8>)
 8001c86:	689b      	ldr	r3, [r3, #8]
 8001c88:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	68db      	ldr	r3, [r3, #12]
 8001c90:	4916      	ldr	r1, [pc, #88]	; (8001cec <HAL_RCC_ClockConfig+0x1c8>)
 8001c92:	4313      	orrs	r3, r2
 8001c94:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	f003 0308 	and.w	r3, r3, #8
 8001c9e:	2b00      	cmp	r3, #0
 8001ca0:	d009      	beq.n	8001cb6 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001ca2:	4b12      	ldr	r3, [pc, #72]	; (8001cec <HAL_RCC_ClockConfig+0x1c8>)
 8001ca4:	689b      	ldr	r3, [r3, #8]
 8001ca6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	691b      	ldr	r3, [r3, #16]
 8001cae:	00db      	lsls	r3, r3, #3
 8001cb0:	490e      	ldr	r1, [pc, #56]	; (8001cec <HAL_RCC_ClockConfig+0x1c8>)
 8001cb2:	4313      	orrs	r3, r2
 8001cb4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001cb6:	f000 f821 	bl	8001cfc <HAL_RCC_GetSysClockFreq>
 8001cba:	4602      	mov	r2, r0
 8001cbc:	4b0b      	ldr	r3, [pc, #44]	; (8001cec <HAL_RCC_ClockConfig+0x1c8>)
 8001cbe:	689b      	ldr	r3, [r3, #8]
 8001cc0:	091b      	lsrs	r3, r3, #4
 8001cc2:	f003 030f 	and.w	r3, r3, #15
 8001cc6:	490a      	ldr	r1, [pc, #40]	; (8001cf0 <HAL_RCC_ClockConfig+0x1cc>)
 8001cc8:	5ccb      	ldrb	r3, [r1, r3]
 8001cca:	fa22 f303 	lsr.w	r3, r2, r3
 8001cce:	4a09      	ldr	r2, [pc, #36]	; (8001cf4 <HAL_RCC_ClockConfig+0x1d0>)
 8001cd0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001cd2:	4b09      	ldr	r3, [pc, #36]	; (8001cf8 <HAL_RCC_ClockConfig+0x1d4>)
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	4618      	mov	r0, r3
 8001cd8:	f7ff f802 	bl	8000ce0 <HAL_InitTick>

  return HAL_OK;
 8001cdc:	2300      	movs	r3, #0
}
 8001cde:	4618      	mov	r0, r3
 8001ce0:	3710      	adds	r7, #16
 8001ce2:	46bd      	mov	sp, r7
 8001ce4:	bd80      	pop	{r7, pc}
 8001ce6:	bf00      	nop
 8001ce8:	40023c00 	.word	0x40023c00
 8001cec:	40023800 	.word	0x40023800
 8001cf0:	080076f4 	.word	0x080076f4
 8001cf4:	20000000 	.word	0x20000000
 8001cf8:	20000004 	.word	0x20000004

08001cfc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001cfc:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001d00:	b084      	sub	sp, #16
 8001d02:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8001d04:	2300      	movs	r3, #0
 8001d06:	607b      	str	r3, [r7, #4]
 8001d08:	2300      	movs	r3, #0
 8001d0a:	60fb      	str	r3, [r7, #12]
 8001d0c:	2300      	movs	r3, #0
 8001d0e:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0;
 8001d10:	2300      	movs	r3, #0
 8001d12:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001d14:	4b67      	ldr	r3, [pc, #412]	; (8001eb4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001d16:	689b      	ldr	r3, [r3, #8]
 8001d18:	f003 030c 	and.w	r3, r3, #12
 8001d1c:	2b08      	cmp	r3, #8
 8001d1e:	d00d      	beq.n	8001d3c <HAL_RCC_GetSysClockFreq+0x40>
 8001d20:	2b08      	cmp	r3, #8
 8001d22:	f200 80bd 	bhi.w	8001ea0 <HAL_RCC_GetSysClockFreq+0x1a4>
 8001d26:	2b00      	cmp	r3, #0
 8001d28:	d002      	beq.n	8001d30 <HAL_RCC_GetSysClockFreq+0x34>
 8001d2a:	2b04      	cmp	r3, #4
 8001d2c:	d003      	beq.n	8001d36 <HAL_RCC_GetSysClockFreq+0x3a>
 8001d2e:	e0b7      	b.n	8001ea0 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001d30:	4b61      	ldr	r3, [pc, #388]	; (8001eb8 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8001d32:	60bb      	str	r3, [r7, #8]
      break;
 8001d34:	e0b7      	b.n	8001ea6 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001d36:	4b60      	ldr	r3, [pc, #384]	; (8001eb8 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8001d38:	60bb      	str	r3, [r7, #8]
      break;
 8001d3a:	e0b4      	b.n	8001ea6 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001d3c:	4b5d      	ldr	r3, [pc, #372]	; (8001eb4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001d3e:	685b      	ldr	r3, [r3, #4]
 8001d40:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001d44:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8001d46:	4b5b      	ldr	r3, [pc, #364]	; (8001eb4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001d48:	685b      	ldr	r3, [r3, #4]
 8001d4a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001d4e:	2b00      	cmp	r3, #0
 8001d50:	d04d      	beq.n	8001dee <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001d52:	4b58      	ldr	r3, [pc, #352]	; (8001eb4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001d54:	685b      	ldr	r3, [r3, #4]
 8001d56:	099b      	lsrs	r3, r3, #6
 8001d58:	461a      	mov	r2, r3
 8001d5a:	f04f 0300 	mov.w	r3, #0
 8001d5e:	f240 10ff 	movw	r0, #511	; 0x1ff
 8001d62:	f04f 0100 	mov.w	r1, #0
 8001d66:	ea02 0800 	and.w	r8, r2, r0
 8001d6a:	ea03 0901 	and.w	r9, r3, r1
 8001d6e:	4640      	mov	r0, r8
 8001d70:	4649      	mov	r1, r9
 8001d72:	f04f 0200 	mov.w	r2, #0
 8001d76:	f04f 0300 	mov.w	r3, #0
 8001d7a:	014b      	lsls	r3, r1, #5
 8001d7c:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8001d80:	0142      	lsls	r2, r0, #5
 8001d82:	4610      	mov	r0, r2
 8001d84:	4619      	mov	r1, r3
 8001d86:	ebb0 0008 	subs.w	r0, r0, r8
 8001d8a:	eb61 0109 	sbc.w	r1, r1, r9
 8001d8e:	f04f 0200 	mov.w	r2, #0
 8001d92:	f04f 0300 	mov.w	r3, #0
 8001d96:	018b      	lsls	r3, r1, #6
 8001d98:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8001d9c:	0182      	lsls	r2, r0, #6
 8001d9e:	1a12      	subs	r2, r2, r0
 8001da0:	eb63 0301 	sbc.w	r3, r3, r1
 8001da4:	f04f 0000 	mov.w	r0, #0
 8001da8:	f04f 0100 	mov.w	r1, #0
 8001dac:	00d9      	lsls	r1, r3, #3
 8001dae:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8001db2:	00d0      	lsls	r0, r2, #3
 8001db4:	4602      	mov	r2, r0
 8001db6:	460b      	mov	r3, r1
 8001db8:	eb12 0208 	adds.w	r2, r2, r8
 8001dbc:	eb43 0309 	adc.w	r3, r3, r9
 8001dc0:	f04f 0000 	mov.w	r0, #0
 8001dc4:	f04f 0100 	mov.w	r1, #0
 8001dc8:	0299      	lsls	r1, r3, #10
 8001dca:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8001dce:	0290      	lsls	r0, r2, #10
 8001dd0:	4602      	mov	r2, r0
 8001dd2:	460b      	mov	r3, r1
 8001dd4:	4610      	mov	r0, r2
 8001dd6:	4619      	mov	r1, r3
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	461a      	mov	r2, r3
 8001ddc:	f04f 0300 	mov.w	r3, #0
 8001de0:	f7fe fa2e 	bl	8000240 <__aeabi_uldivmod>
 8001de4:	4602      	mov	r2, r0
 8001de6:	460b      	mov	r3, r1
 8001de8:	4613      	mov	r3, r2
 8001dea:	60fb      	str	r3, [r7, #12]
 8001dec:	e04a      	b.n	8001e84 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001dee:	4b31      	ldr	r3, [pc, #196]	; (8001eb4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001df0:	685b      	ldr	r3, [r3, #4]
 8001df2:	099b      	lsrs	r3, r3, #6
 8001df4:	461a      	mov	r2, r3
 8001df6:	f04f 0300 	mov.w	r3, #0
 8001dfa:	f240 10ff 	movw	r0, #511	; 0x1ff
 8001dfe:	f04f 0100 	mov.w	r1, #0
 8001e02:	ea02 0400 	and.w	r4, r2, r0
 8001e06:	ea03 0501 	and.w	r5, r3, r1
 8001e0a:	4620      	mov	r0, r4
 8001e0c:	4629      	mov	r1, r5
 8001e0e:	f04f 0200 	mov.w	r2, #0
 8001e12:	f04f 0300 	mov.w	r3, #0
 8001e16:	014b      	lsls	r3, r1, #5
 8001e18:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8001e1c:	0142      	lsls	r2, r0, #5
 8001e1e:	4610      	mov	r0, r2
 8001e20:	4619      	mov	r1, r3
 8001e22:	1b00      	subs	r0, r0, r4
 8001e24:	eb61 0105 	sbc.w	r1, r1, r5
 8001e28:	f04f 0200 	mov.w	r2, #0
 8001e2c:	f04f 0300 	mov.w	r3, #0
 8001e30:	018b      	lsls	r3, r1, #6
 8001e32:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8001e36:	0182      	lsls	r2, r0, #6
 8001e38:	1a12      	subs	r2, r2, r0
 8001e3a:	eb63 0301 	sbc.w	r3, r3, r1
 8001e3e:	f04f 0000 	mov.w	r0, #0
 8001e42:	f04f 0100 	mov.w	r1, #0
 8001e46:	00d9      	lsls	r1, r3, #3
 8001e48:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8001e4c:	00d0      	lsls	r0, r2, #3
 8001e4e:	4602      	mov	r2, r0
 8001e50:	460b      	mov	r3, r1
 8001e52:	1912      	adds	r2, r2, r4
 8001e54:	eb45 0303 	adc.w	r3, r5, r3
 8001e58:	f04f 0000 	mov.w	r0, #0
 8001e5c:	f04f 0100 	mov.w	r1, #0
 8001e60:	0299      	lsls	r1, r3, #10
 8001e62:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8001e66:	0290      	lsls	r0, r2, #10
 8001e68:	4602      	mov	r2, r0
 8001e6a:	460b      	mov	r3, r1
 8001e6c:	4610      	mov	r0, r2
 8001e6e:	4619      	mov	r1, r3
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	461a      	mov	r2, r3
 8001e74:	f04f 0300 	mov.w	r3, #0
 8001e78:	f7fe f9e2 	bl	8000240 <__aeabi_uldivmod>
 8001e7c:	4602      	mov	r2, r0
 8001e7e:	460b      	mov	r3, r1
 8001e80:	4613      	mov	r3, r2
 8001e82:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8001e84:	4b0b      	ldr	r3, [pc, #44]	; (8001eb4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001e86:	685b      	ldr	r3, [r3, #4]
 8001e88:	0c1b      	lsrs	r3, r3, #16
 8001e8a:	f003 0303 	and.w	r3, r3, #3
 8001e8e:	3301      	adds	r3, #1
 8001e90:	005b      	lsls	r3, r3, #1
 8001e92:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco / pllp;
 8001e94:	68fa      	ldr	r2, [r7, #12]
 8001e96:	683b      	ldr	r3, [r7, #0]
 8001e98:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e9c:	60bb      	str	r3, [r7, #8]
      break;
 8001e9e:	e002      	b.n	8001ea6 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001ea0:	4b05      	ldr	r3, [pc, #20]	; (8001eb8 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8001ea2:	60bb      	str	r3, [r7, #8]
      break;
 8001ea4:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001ea6:	68bb      	ldr	r3, [r7, #8]
}
 8001ea8:	4618      	mov	r0, r3
 8001eaa:	3710      	adds	r7, #16
 8001eac:	46bd      	mov	sp, r7
 8001eae:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8001eb2:	bf00      	nop
 8001eb4:	40023800 	.word	0x40023800
 8001eb8:	00f42400 	.word	0x00f42400

08001ebc <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001ebc:	b480      	push	{r7}
 8001ebe:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001ec0:	4b03      	ldr	r3, [pc, #12]	; (8001ed0 <HAL_RCC_GetHCLKFreq+0x14>)
 8001ec2:	681b      	ldr	r3, [r3, #0]
}
 8001ec4:	4618      	mov	r0, r3
 8001ec6:	46bd      	mov	sp, r7
 8001ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ecc:	4770      	bx	lr
 8001ece:	bf00      	nop
 8001ed0:	20000000 	.word	0x20000000

08001ed4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001ed4:	b580      	push	{r7, lr}
 8001ed6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001ed8:	f7ff fff0 	bl	8001ebc <HAL_RCC_GetHCLKFreq>
 8001edc:	4602      	mov	r2, r0
 8001ede:	4b05      	ldr	r3, [pc, #20]	; (8001ef4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001ee0:	689b      	ldr	r3, [r3, #8]
 8001ee2:	0a9b      	lsrs	r3, r3, #10
 8001ee4:	f003 0307 	and.w	r3, r3, #7
 8001ee8:	4903      	ldr	r1, [pc, #12]	; (8001ef8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001eea:	5ccb      	ldrb	r3, [r1, r3]
 8001eec:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001ef0:	4618      	mov	r0, r3
 8001ef2:	bd80      	pop	{r7, pc}
 8001ef4:	40023800 	.word	0x40023800
 8001ef8:	08007704 	.word	0x08007704

08001efc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001efc:	b580      	push	{r7, lr}
 8001efe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001f00:	f7ff ffdc 	bl	8001ebc <HAL_RCC_GetHCLKFreq>
 8001f04:	4602      	mov	r2, r0
 8001f06:	4b05      	ldr	r3, [pc, #20]	; (8001f1c <HAL_RCC_GetPCLK2Freq+0x20>)
 8001f08:	689b      	ldr	r3, [r3, #8]
 8001f0a:	0b5b      	lsrs	r3, r3, #13
 8001f0c:	f003 0307 	and.w	r3, r3, #7
 8001f10:	4903      	ldr	r1, [pc, #12]	; (8001f20 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001f12:	5ccb      	ldrb	r3, [r1, r3]
 8001f14:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001f18:	4618      	mov	r0, r3
 8001f1a:	bd80      	pop	{r7, pc}
 8001f1c:	40023800 	.word	0x40023800
 8001f20:	08007704 	.word	0x08007704

08001f24 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001f24:	b480      	push	{r7}
 8001f26:	b083      	sub	sp, #12
 8001f28:	af00      	add	r7, sp, #0
 8001f2a:	6078      	str	r0, [r7, #4]
 8001f2c:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	220f      	movs	r2, #15
 8001f32:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001f34:	4b12      	ldr	r3, [pc, #72]	; (8001f80 <HAL_RCC_GetClockConfig+0x5c>)
 8001f36:	689b      	ldr	r3, [r3, #8]
 8001f38:	f003 0203 	and.w	r2, r3, #3
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001f40:	4b0f      	ldr	r3, [pc, #60]	; (8001f80 <HAL_RCC_GetClockConfig+0x5c>)
 8001f42:	689b      	ldr	r3, [r3, #8]
 8001f44:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001f4c:	4b0c      	ldr	r3, [pc, #48]	; (8001f80 <HAL_RCC_GetClockConfig+0x5c>)
 8001f4e:	689b      	ldr	r3, [r3, #8]
 8001f50:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8001f58:	4b09      	ldr	r3, [pc, #36]	; (8001f80 <HAL_RCC_GetClockConfig+0x5c>)
 8001f5a:	689b      	ldr	r3, [r3, #8]
 8001f5c:	08db      	lsrs	r3, r3, #3
 8001f5e:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8001f66:	4b07      	ldr	r3, [pc, #28]	; (8001f84 <HAL_RCC_GetClockConfig+0x60>)
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	f003 020f 	and.w	r2, r3, #15
 8001f6e:	683b      	ldr	r3, [r7, #0]
 8001f70:	601a      	str	r2, [r3, #0]
}
 8001f72:	bf00      	nop
 8001f74:	370c      	adds	r7, #12
 8001f76:	46bd      	mov	sp, r7
 8001f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f7c:	4770      	bx	lr
 8001f7e:	bf00      	nop
 8001f80:	40023800 	.word	0x40023800
 8001f84:	40023c00 	.word	0x40023c00

08001f88 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001f88:	b580      	push	{r7, lr}
 8001f8a:	b088      	sub	sp, #32
 8001f8c:	af00      	add	r7, sp, #0
 8001f8e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8001f90:	2300      	movs	r3, #0
 8001f92:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8001f94:	2300      	movs	r3, #0
 8001f96:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8001f98:	2300      	movs	r3, #0
 8001f9a:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8001f9c:	2300      	movs	r3, #0
 8001f9e:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8001fa0:	2300      	movs	r3, #0
 8001fa2:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	f003 0301 	and.w	r3, r3, #1
 8001fac:	2b00      	cmp	r3, #0
 8001fae:	d012      	beq.n	8001fd6 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8001fb0:	4b69      	ldr	r3, [pc, #420]	; (8002158 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001fb2:	689b      	ldr	r3, [r3, #8]
 8001fb4:	4a68      	ldr	r2, [pc, #416]	; (8002158 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001fb6:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8001fba:	6093      	str	r3, [r2, #8]
 8001fbc:	4b66      	ldr	r3, [pc, #408]	; (8002158 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001fbe:	689a      	ldr	r2, [r3, #8]
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001fc4:	4964      	ldr	r1, [pc, #400]	; (8002158 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001fc6:	4313      	orrs	r3, r2
 8001fc8:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001fce:	2b00      	cmp	r3, #0
 8001fd0:	d101      	bne.n	8001fd6 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8001fd2:	2301      	movs	r3, #1
 8001fd4:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	d017      	beq.n	8002012 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8001fe2:	4b5d      	ldr	r3, [pc, #372]	; (8002158 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001fe4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001fe8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001ff0:	4959      	ldr	r1, [pc, #356]	; (8002158 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001ff2:	4313      	orrs	r3, r2
 8001ff4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001ffc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002000:	d101      	bne.n	8002006 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8002002:	2301      	movs	r3, #1
 8002004:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800200a:	2b00      	cmp	r3, #0
 800200c:	d101      	bne.n	8002012 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 800200e:	2301      	movs	r3, #1
 8002010:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800201a:	2b00      	cmp	r3, #0
 800201c:	d017      	beq.n	800204e <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800201e:	4b4e      	ldr	r3, [pc, #312]	; (8002158 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002020:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002024:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800202c:	494a      	ldr	r1, [pc, #296]	; (8002158 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800202e:	4313      	orrs	r3, r2
 8002030:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002038:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800203c:	d101      	bne.n	8002042 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 800203e:	2301      	movs	r3, #1
 8002040:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002046:	2b00      	cmp	r3, #0
 8002048:	d101      	bne.n	800204e <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 800204a:	2301      	movs	r3, #1
 800204c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002056:	2b00      	cmp	r3, #0
 8002058:	d001      	beq.n	800205e <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 800205a:	2301      	movs	r3, #1
 800205c:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	f003 0320 	and.w	r3, r3, #32
 8002066:	2b00      	cmp	r3, #0
 8002068:	f000 808b 	beq.w	8002182 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800206c:	4b3a      	ldr	r3, [pc, #232]	; (8002158 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800206e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002070:	4a39      	ldr	r2, [pc, #228]	; (8002158 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002072:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002076:	6413      	str	r3, [r2, #64]	; 0x40
 8002078:	4b37      	ldr	r3, [pc, #220]	; (8002158 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800207a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800207c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002080:	60bb      	str	r3, [r7, #8]
 8002082:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8002084:	4b35      	ldr	r3, [pc, #212]	; (800215c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	4a34      	ldr	r2, [pc, #208]	; (800215c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800208a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800208e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002090:	f7fe ff04 	bl	8000e9c <HAL_GetTick>
 8002094:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8002096:	e008      	b.n	80020aa <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002098:	f7fe ff00 	bl	8000e9c <HAL_GetTick>
 800209c:	4602      	mov	r2, r0
 800209e:	697b      	ldr	r3, [r7, #20]
 80020a0:	1ad3      	subs	r3, r2, r3
 80020a2:	2b64      	cmp	r3, #100	; 0x64
 80020a4:	d901      	bls.n	80020aa <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 80020a6:	2303      	movs	r3, #3
 80020a8:	e38f      	b.n	80027ca <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80020aa:	4b2c      	ldr	r3, [pc, #176]	; (800215c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	d0f0      	beq.n	8002098 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80020b6:	4b28      	ldr	r3, [pc, #160]	; (8002158 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80020b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80020ba:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80020be:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80020c0:	693b      	ldr	r3, [r7, #16]
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	d035      	beq.n	8002132 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020ca:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80020ce:	693a      	ldr	r2, [r7, #16]
 80020d0:	429a      	cmp	r2, r3
 80020d2:	d02e      	beq.n	8002132 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80020d4:	4b20      	ldr	r3, [pc, #128]	; (8002158 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80020d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80020d8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80020dc:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80020de:	4b1e      	ldr	r3, [pc, #120]	; (8002158 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80020e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80020e2:	4a1d      	ldr	r2, [pc, #116]	; (8002158 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80020e4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80020e8:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 80020ea:	4b1b      	ldr	r3, [pc, #108]	; (8002158 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80020ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80020ee:	4a1a      	ldr	r2, [pc, #104]	; (8002158 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80020f0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80020f4:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 80020f6:	4a18      	ldr	r2, [pc, #96]	; (8002158 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80020f8:	693b      	ldr	r3, [r7, #16]
 80020fa:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80020fc:	4b16      	ldr	r3, [pc, #88]	; (8002158 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80020fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002100:	f003 0301 	and.w	r3, r3, #1
 8002104:	2b01      	cmp	r3, #1
 8002106:	d114      	bne.n	8002132 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002108:	f7fe fec8 	bl	8000e9c <HAL_GetTick>
 800210c:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800210e:	e00a      	b.n	8002126 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002110:	f7fe fec4 	bl	8000e9c <HAL_GetTick>
 8002114:	4602      	mov	r2, r0
 8002116:	697b      	ldr	r3, [r7, #20]
 8002118:	1ad3      	subs	r3, r2, r3
 800211a:	f241 3288 	movw	r2, #5000	; 0x1388
 800211e:	4293      	cmp	r3, r2
 8002120:	d901      	bls.n	8002126 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8002122:	2303      	movs	r3, #3
 8002124:	e351      	b.n	80027ca <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002126:	4b0c      	ldr	r3, [pc, #48]	; (8002158 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002128:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800212a:	f003 0302 	and.w	r3, r3, #2
 800212e:	2b00      	cmp	r3, #0
 8002130:	d0ee      	beq.n	8002110 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002136:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800213a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800213e:	d111      	bne.n	8002164 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8002140:	4b05      	ldr	r3, [pc, #20]	; (8002158 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002142:	689b      	ldr	r3, [r3, #8]
 8002144:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800214c:	4b04      	ldr	r3, [pc, #16]	; (8002160 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 800214e:	400b      	ands	r3, r1
 8002150:	4901      	ldr	r1, [pc, #4]	; (8002158 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002152:	4313      	orrs	r3, r2
 8002154:	608b      	str	r3, [r1, #8]
 8002156:	e00b      	b.n	8002170 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8002158:	40023800 	.word	0x40023800
 800215c:	40007000 	.word	0x40007000
 8002160:	0ffffcff 	.word	0x0ffffcff
 8002164:	4bb3      	ldr	r3, [pc, #716]	; (8002434 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002166:	689b      	ldr	r3, [r3, #8]
 8002168:	4ab2      	ldr	r2, [pc, #712]	; (8002434 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800216a:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800216e:	6093      	str	r3, [r2, #8]
 8002170:	4bb0      	ldr	r3, [pc, #704]	; (8002434 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002172:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002178:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800217c:	49ad      	ldr	r1, [pc, #692]	; (8002434 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800217e:	4313      	orrs	r3, r2
 8002180:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	f003 0310 	and.w	r3, r3, #16
 800218a:	2b00      	cmp	r3, #0
 800218c:	d010      	beq.n	80021b0 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800218e:	4ba9      	ldr	r3, [pc, #676]	; (8002434 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002190:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002194:	4aa7      	ldr	r2, [pc, #668]	; (8002434 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002196:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800219a:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 800219e:	4ba5      	ldr	r3, [pc, #660]	; (8002434 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80021a0:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80021a8:	49a2      	ldr	r1, [pc, #648]	; (8002434 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80021aa:	4313      	orrs	r3, r2
 80021ac:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80021b8:	2b00      	cmp	r3, #0
 80021ba:	d00a      	beq.n	80021d2 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80021bc:	4b9d      	ldr	r3, [pc, #628]	; (8002434 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80021be:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80021c2:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80021ca:	499a      	ldr	r1, [pc, #616]	; (8002434 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80021cc:	4313      	orrs	r3, r2
 80021ce:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80021da:	2b00      	cmp	r3, #0
 80021dc:	d00a      	beq.n	80021f4 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80021de:	4b95      	ldr	r3, [pc, #596]	; (8002434 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80021e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80021e4:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80021ec:	4991      	ldr	r1, [pc, #580]	; (8002434 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80021ee:	4313      	orrs	r3, r2
 80021f0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80021fc:	2b00      	cmp	r3, #0
 80021fe:	d00a      	beq.n	8002216 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002200:	4b8c      	ldr	r3, [pc, #560]	; (8002434 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002202:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002206:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800220e:	4989      	ldr	r1, [pc, #548]	; (8002434 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002210:	4313      	orrs	r3, r2
 8002212:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800221e:	2b00      	cmp	r3, #0
 8002220:	d00a      	beq.n	8002238 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8002222:	4b84      	ldr	r3, [pc, #528]	; (8002434 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002224:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002228:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002230:	4980      	ldr	r1, [pc, #512]	; (8002434 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002232:	4313      	orrs	r3, r2
 8002234:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002240:	2b00      	cmp	r3, #0
 8002242:	d00a      	beq.n	800225a <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002244:	4b7b      	ldr	r3, [pc, #492]	; (8002434 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002246:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800224a:	f023 0203 	bic.w	r2, r3, #3
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002252:	4978      	ldr	r1, [pc, #480]	; (8002434 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002254:	4313      	orrs	r3, r2
 8002256:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002262:	2b00      	cmp	r3, #0
 8002264:	d00a      	beq.n	800227c <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002266:	4b73      	ldr	r3, [pc, #460]	; (8002434 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002268:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800226c:	f023 020c 	bic.w	r2, r3, #12
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002274:	496f      	ldr	r1, [pc, #444]	; (8002434 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002276:	4313      	orrs	r3, r2
 8002278:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002284:	2b00      	cmp	r3, #0
 8002286:	d00a      	beq.n	800229e <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002288:	4b6a      	ldr	r3, [pc, #424]	; (8002434 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800228a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800228e:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002296:	4967      	ldr	r1, [pc, #412]	; (8002434 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002298:	4313      	orrs	r3, r2
 800229a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	d00a      	beq.n	80022c0 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80022aa:	4b62      	ldr	r3, [pc, #392]	; (8002434 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80022ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80022b0:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80022b8:	495e      	ldr	r1, [pc, #376]	; (8002434 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80022ba:	4313      	orrs	r3, r2
 80022bc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80022c8:	2b00      	cmp	r3, #0
 80022ca:	d00a      	beq.n	80022e2 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80022cc:	4b59      	ldr	r3, [pc, #356]	; (8002434 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80022ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80022d2:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80022da:	4956      	ldr	r1, [pc, #344]	; (8002434 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80022dc:	4313      	orrs	r3, r2
 80022de:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	d00a      	beq.n	8002304 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 80022ee:	4b51      	ldr	r3, [pc, #324]	; (8002434 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80022f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80022f4:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80022fc:	494d      	ldr	r1, [pc, #308]	; (8002434 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80022fe:	4313      	orrs	r3, r2
 8002300:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800230c:	2b00      	cmp	r3, #0
 800230e:	d00a      	beq.n	8002326 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8002310:	4b48      	ldr	r3, [pc, #288]	; (8002434 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002312:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002316:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800231e:	4945      	ldr	r1, [pc, #276]	; (8002434 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002320:	4313      	orrs	r3, r2
 8002322:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800232e:	2b00      	cmp	r3, #0
 8002330:	d00a      	beq.n	8002348 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8002332:	4b40      	ldr	r3, [pc, #256]	; (8002434 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002334:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002338:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002340:	493c      	ldr	r1, [pc, #240]	; (8002434 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002342:	4313      	orrs	r3, r2
 8002344:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002350:	2b00      	cmp	r3, #0
 8002352:	d00a      	beq.n	800236a <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8002354:	4b37      	ldr	r3, [pc, #220]	; (8002434 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002356:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800235a:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002362:	4934      	ldr	r1, [pc, #208]	; (8002434 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002364:	4313      	orrs	r3, r2
 8002366:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002372:	2b00      	cmp	r3, #0
 8002374:	d011      	beq.n	800239a <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8002376:	4b2f      	ldr	r3, [pc, #188]	; (8002434 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002378:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800237c:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002384:	492b      	ldr	r1, [pc, #172]	; (8002434 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002386:	4313      	orrs	r3, r2
 8002388:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002390:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002394:	d101      	bne.n	800239a <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8002396:	2301      	movs	r3, #1
 8002398:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	f003 0308 	and.w	r3, r3, #8
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	d001      	beq.n	80023aa <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 80023a6:	2301      	movs	r3, #1
 80023a8:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	d00a      	beq.n	80023cc <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80023b6:	4b1f      	ldr	r3, [pc, #124]	; (8002434 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80023b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80023bc:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80023c4:	491b      	ldr	r1, [pc, #108]	; (8002434 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80023c6:	4313      	orrs	r3, r2
 80023c8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80023d4:	2b00      	cmp	r3, #0
 80023d6:	d00b      	beq.n	80023f0 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80023d8:	4b16      	ldr	r3, [pc, #88]	; (8002434 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80023da:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80023de:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80023e8:	4912      	ldr	r1, [pc, #72]	; (8002434 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80023ea:	4313      	orrs	r3, r2
 80023ec:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80023f8:	2b00      	cmp	r3, #0
 80023fa:	d00b      	beq.n	8002414 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 80023fc:	4b0d      	ldr	r3, [pc, #52]	; (8002434 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80023fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002402:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800240c:	4909      	ldr	r1, [pc, #36]	; (8002434 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800240e:	4313      	orrs	r3, r2
 8002410:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800241c:	2b00      	cmp	r3, #0
 800241e:	d00f      	beq.n	8002440 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8002420:	4b04      	ldr	r3, [pc, #16]	; (8002434 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002422:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002426:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002430:	e002      	b.n	8002438 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
 8002432:	bf00      	nop
 8002434:	40023800 	.word	0x40023800
 8002438:	4986      	ldr	r1, [pc, #536]	; (8002654 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800243a:	4313      	orrs	r3, r2
 800243c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002448:	2b00      	cmp	r3, #0
 800244a:	d00b      	beq.n	8002464 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 800244c:	4b81      	ldr	r3, [pc, #516]	; (8002654 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800244e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002452:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800245c:	497d      	ldr	r1, [pc, #500]	; (8002654 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800245e:	4313      	orrs	r3, r2
 8002460:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8002464:	69fb      	ldr	r3, [r7, #28]
 8002466:	2b01      	cmp	r3, #1
 8002468:	d006      	beq.n	8002478 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002472:	2b00      	cmp	r3, #0
 8002474:	f000 80d6 	beq.w	8002624 <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8002478:	4b76      	ldr	r3, [pc, #472]	; (8002654 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	4a75      	ldr	r2, [pc, #468]	; (8002654 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800247e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8002482:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002484:	f7fe fd0a 	bl	8000e9c <HAL_GetTick>
 8002488:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800248a:	e008      	b.n	800249e <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800248c:	f7fe fd06 	bl	8000e9c <HAL_GetTick>
 8002490:	4602      	mov	r2, r0
 8002492:	697b      	ldr	r3, [r7, #20]
 8002494:	1ad3      	subs	r3, r2, r3
 8002496:	2b64      	cmp	r3, #100	; 0x64
 8002498:	d901      	bls.n	800249e <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800249a:	2303      	movs	r3, #3
 800249c:	e195      	b.n	80027ca <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800249e:	4b6d      	ldr	r3, [pc, #436]	; (8002654 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	d1f0      	bne.n	800248c <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	f003 0301 	and.w	r3, r3, #1
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	d021      	beq.n	80024fa <HAL_RCCEx_PeriphCLKConfig+0x572>
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80024ba:	2b00      	cmp	r3, #0
 80024bc:	d11d      	bne.n	80024fa <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80024be:	4b65      	ldr	r3, [pc, #404]	; (8002654 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80024c0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80024c4:	0c1b      	lsrs	r3, r3, #16
 80024c6:	f003 0303 	and.w	r3, r3, #3
 80024ca:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80024cc:	4b61      	ldr	r3, [pc, #388]	; (8002654 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80024ce:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80024d2:	0e1b      	lsrs	r3, r3, #24
 80024d4:	f003 030f 	and.w	r3, r3, #15
 80024d8:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	685b      	ldr	r3, [r3, #4]
 80024de:	019a      	lsls	r2, r3, #6
 80024e0:	693b      	ldr	r3, [r7, #16]
 80024e2:	041b      	lsls	r3, r3, #16
 80024e4:	431a      	orrs	r2, r3
 80024e6:	68fb      	ldr	r3, [r7, #12]
 80024e8:	061b      	lsls	r3, r3, #24
 80024ea:	431a      	orrs	r2, r3
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	689b      	ldr	r3, [r3, #8]
 80024f0:	071b      	lsls	r3, r3, #28
 80024f2:	4958      	ldr	r1, [pc, #352]	; (8002654 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80024f4:	4313      	orrs	r3, r2
 80024f6:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002502:	2b00      	cmp	r3, #0
 8002504:	d004      	beq.n	8002510 <HAL_RCCEx_PeriphCLKConfig+0x588>
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800250a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800250e:	d00a      	beq.n	8002526 <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8002518:	2b00      	cmp	r3, #0
 800251a:	d02e      	beq.n	800257a <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002520:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002524:	d129      	bne.n	800257a <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8002526:	4b4b      	ldr	r3, [pc, #300]	; (8002654 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002528:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800252c:	0c1b      	lsrs	r3, r3, #16
 800252e:	f003 0303 	and.w	r3, r3, #3
 8002532:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8002534:	4b47      	ldr	r3, [pc, #284]	; (8002654 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002536:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800253a:	0f1b      	lsrs	r3, r3, #28
 800253c:	f003 0307 	and.w	r3, r3, #7
 8002540:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	685b      	ldr	r3, [r3, #4]
 8002546:	019a      	lsls	r2, r3, #6
 8002548:	693b      	ldr	r3, [r7, #16]
 800254a:	041b      	lsls	r3, r3, #16
 800254c:	431a      	orrs	r2, r3
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	68db      	ldr	r3, [r3, #12]
 8002552:	061b      	lsls	r3, r3, #24
 8002554:	431a      	orrs	r2, r3
 8002556:	68fb      	ldr	r3, [r7, #12]
 8002558:	071b      	lsls	r3, r3, #28
 800255a:	493e      	ldr	r1, [pc, #248]	; (8002654 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800255c:	4313      	orrs	r3, r2
 800255e:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8002562:	4b3c      	ldr	r3, [pc, #240]	; (8002654 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002564:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002568:	f023 021f 	bic.w	r2, r3, #31
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002570:	3b01      	subs	r3, #1
 8002572:	4938      	ldr	r1, [pc, #224]	; (8002654 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002574:	4313      	orrs	r3, r2
 8002576:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002582:	2b00      	cmp	r3, #0
 8002584:	d01d      	beq.n	80025c2 <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8002586:	4b33      	ldr	r3, [pc, #204]	; (8002654 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002588:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800258c:	0e1b      	lsrs	r3, r3, #24
 800258e:	f003 030f 	and.w	r3, r3, #15
 8002592:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8002594:	4b2f      	ldr	r3, [pc, #188]	; (8002654 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002596:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800259a:	0f1b      	lsrs	r3, r3, #28
 800259c:	f003 0307 	and.w	r3, r3, #7
 80025a0:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	685b      	ldr	r3, [r3, #4]
 80025a6:	019a      	lsls	r2, r3, #6
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	691b      	ldr	r3, [r3, #16]
 80025ac:	041b      	lsls	r3, r3, #16
 80025ae:	431a      	orrs	r2, r3
 80025b0:	693b      	ldr	r3, [r7, #16]
 80025b2:	061b      	lsls	r3, r3, #24
 80025b4:	431a      	orrs	r2, r3
 80025b6:	68fb      	ldr	r3, [r7, #12]
 80025b8:	071b      	lsls	r3, r3, #28
 80025ba:	4926      	ldr	r1, [pc, #152]	; (8002654 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80025bc:	4313      	orrs	r3, r2
 80025be:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	d011      	beq.n	80025f2 <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	685b      	ldr	r3, [r3, #4]
 80025d2:	019a      	lsls	r2, r3, #6
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	691b      	ldr	r3, [r3, #16]
 80025d8:	041b      	lsls	r3, r3, #16
 80025da:	431a      	orrs	r2, r3
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	68db      	ldr	r3, [r3, #12]
 80025e0:	061b      	lsls	r3, r3, #24
 80025e2:	431a      	orrs	r2, r3
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	689b      	ldr	r3, [r3, #8]
 80025e8:	071b      	lsls	r3, r3, #28
 80025ea:	491a      	ldr	r1, [pc, #104]	; (8002654 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80025ec:	4313      	orrs	r3, r2
 80025ee:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80025f2:	4b18      	ldr	r3, [pc, #96]	; (8002654 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	4a17      	ldr	r2, [pc, #92]	; (8002654 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80025f8:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80025fc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80025fe:	f7fe fc4d 	bl	8000e9c <HAL_GetTick>
 8002602:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002604:	e008      	b.n	8002618 <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8002606:	f7fe fc49 	bl	8000e9c <HAL_GetTick>
 800260a:	4602      	mov	r2, r0
 800260c:	697b      	ldr	r3, [r7, #20]
 800260e:	1ad3      	subs	r3, r2, r3
 8002610:	2b64      	cmp	r3, #100	; 0x64
 8002612:	d901      	bls.n	8002618 <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002614:	2303      	movs	r3, #3
 8002616:	e0d8      	b.n	80027ca <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002618:	4b0e      	ldr	r3, [pc, #56]	; (8002654 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002620:	2b00      	cmp	r3, #0
 8002622:	d0f0      	beq.n	8002606 <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8002624:	69bb      	ldr	r3, [r7, #24]
 8002626:	2b01      	cmp	r3, #1
 8002628:	f040 80ce 	bne.w	80027c8 <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 800262c:	4b09      	ldr	r3, [pc, #36]	; (8002654 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	4a08      	ldr	r2, [pc, #32]	; (8002654 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002632:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002636:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002638:	f7fe fc30 	bl	8000e9c <HAL_GetTick>
 800263c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800263e:	e00b      	b.n	8002658 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8002640:	f7fe fc2c 	bl	8000e9c <HAL_GetTick>
 8002644:	4602      	mov	r2, r0
 8002646:	697b      	ldr	r3, [r7, #20]
 8002648:	1ad3      	subs	r3, r2, r3
 800264a:	2b64      	cmp	r3, #100	; 0x64
 800264c:	d904      	bls.n	8002658 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800264e:	2303      	movs	r3, #3
 8002650:	e0bb      	b.n	80027ca <HAL_RCCEx_PeriphCLKConfig+0x842>
 8002652:	bf00      	nop
 8002654:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8002658:	4b5e      	ldr	r3, [pc, #376]	; (80027d4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002660:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002664:	d0ec      	beq.n	8002640 <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800266e:	2b00      	cmp	r3, #0
 8002670:	d003      	beq.n	800267a <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002676:	2b00      	cmp	r3, #0
 8002678:	d009      	beq.n	800268e <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8002682:	2b00      	cmp	r3, #0
 8002684:	d02e      	beq.n	80026e4 <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800268a:	2b00      	cmp	r3, #0
 800268c:	d12a      	bne.n	80026e4 <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800268e:	4b51      	ldr	r3, [pc, #324]	; (80027d4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002690:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002694:	0c1b      	lsrs	r3, r3, #16
 8002696:	f003 0303 	and.w	r3, r3, #3
 800269a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800269c:	4b4d      	ldr	r3, [pc, #308]	; (80027d4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800269e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80026a2:	0f1b      	lsrs	r3, r3, #28
 80026a4:	f003 0307 	and.w	r3, r3, #7
 80026a8:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	695b      	ldr	r3, [r3, #20]
 80026ae:	019a      	lsls	r2, r3, #6
 80026b0:	693b      	ldr	r3, [r7, #16]
 80026b2:	041b      	lsls	r3, r3, #16
 80026b4:	431a      	orrs	r2, r3
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	699b      	ldr	r3, [r3, #24]
 80026ba:	061b      	lsls	r3, r3, #24
 80026bc:	431a      	orrs	r2, r3
 80026be:	68fb      	ldr	r3, [r7, #12]
 80026c0:	071b      	lsls	r3, r3, #28
 80026c2:	4944      	ldr	r1, [pc, #272]	; (80027d4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80026c4:	4313      	orrs	r3, r2
 80026c6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 80026ca:	4b42      	ldr	r3, [pc, #264]	; (80027d4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80026cc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80026d0:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80026d8:	3b01      	subs	r3, #1
 80026da:	021b      	lsls	r3, r3, #8
 80026dc:	493d      	ldr	r1, [pc, #244]	; (80027d4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80026de:	4313      	orrs	r3, r2
 80026e0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80026ec:	2b00      	cmp	r3, #0
 80026ee:	d022      	beq.n	8002736 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80026f4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80026f8:	d11d      	bne.n	8002736 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80026fa:	4b36      	ldr	r3, [pc, #216]	; (80027d4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80026fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002700:	0e1b      	lsrs	r3, r3, #24
 8002702:	f003 030f 	and.w	r3, r3, #15
 8002706:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8002708:	4b32      	ldr	r3, [pc, #200]	; (80027d4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800270a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800270e:	0f1b      	lsrs	r3, r3, #28
 8002710:	f003 0307 	and.w	r3, r3, #7
 8002714:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	695b      	ldr	r3, [r3, #20]
 800271a:	019a      	lsls	r2, r3, #6
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	6a1b      	ldr	r3, [r3, #32]
 8002720:	041b      	lsls	r3, r3, #16
 8002722:	431a      	orrs	r2, r3
 8002724:	693b      	ldr	r3, [r7, #16]
 8002726:	061b      	lsls	r3, r3, #24
 8002728:	431a      	orrs	r2, r3
 800272a:	68fb      	ldr	r3, [r7, #12]
 800272c:	071b      	lsls	r3, r3, #28
 800272e:	4929      	ldr	r1, [pc, #164]	; (80027d4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002730:	4313      	orrs	r3, r2
 8002732:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	f003 0308 	and.w	r3, r3, #8
 800273e:	2b00      	cmp	r3, #0
 8002740:	d028      	beq.n	8002794 <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8002742:	4b24      	ldr	r3, [pc, #144]	; (80027d4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002744:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002748:	0e1b      	lsrs	r3, r3, #24
 800274a:	f003 030f 	and.w	r3, r3, #15
 800274e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8002750:	4b20      	ldr	r3, [pc, #128]	; (80027d4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002752:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002756:	0c1b      	lsrs	r3, r3, #16
 8002758:	f003 0303 	and.w	r3, r3, #3
 800275c:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	695b      	ldr	r3, [r3, #20]
 8002762:	019a      	lsls	r2, r3, #6
 8002764:	68fb      	ldr	r3, [r7, #12]
 8002766:	041b      	lsls	r3, r3, #16
 8002768:	431a      	orrs	r2, r3
 800276a:	693b      	ldr	r3, [r7, #16]
 800276c:	061b      	lsls	r3, r3, #24
 800276e:	431a      	orrs	r2, r3
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	69db      	ldr	r3, [r3, #28]
 8002774:	071b      	lsls	r3, r3, #28
 8002776:	4917      	ldr	r1, [pc, #92]	; (80027d4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002778:	4313      	orrs	r3, r2
 800277a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 800277e:	4b15      	ldr	r3, [pc, #84]	; (80027d4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002780:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002784:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800278c:	4911      	ldr	r1, [pc, #68]	; (80027d4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800278e:	4313      	orrs	r3, r2
 8002790:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8002794:	4b0f      	ldr	r3, [pc, #60]	; (80027d4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	4a0e      	ldr	r2, [pc, #56]	; (80027d4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800279a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800279e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80027a0:	f7fe fb7c 	bl	8000e9c <HAL_GetTick>
 80027a4:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80027a6:	e008      	b.n	80027ba <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80027a8:	f7fe fb78 	bl	8000e9c <HAL_GetTick>
 80027ac:	4602      	mov	r2, r0
 80027ae:	697b      	ldr	r3, [r7, #20]
 80027b0:	1ad3      	subs	r3, r2, r3
 80027b2:	2b64      	cmp	r3, #100	; 0x64
 80027b4:	d901      	bls.n	80027ba <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80027b6:	2303      	movs	r3, #3
 80027b8:	e007      	b.n	80027ca <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80027ba:	4b06      	ldr	r3, [pc, #24]	; (80027d4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80027c2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80027c6:	d1ef      	bne.n	80027a8 <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 80027c8:	2300      	movs	r3, #0
}
 80027ca:	4618      	mov	r0, r3
 80027cc:	3720      	adds	r7, #32
 80027ce:	46bd      	mov	sp, r7
 80027d0:	bd80      	pop	{r7, pc}
 80027d2:	bf00      	nop
 80027d4:	40023800 	.word	0x40023800

080027d8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80027d8:	b580      	push	{r7, lr}
 80027da:	b082      	sub	sp, #8
 80027dc:	af00      	add	r7, sp, #0
 80027de:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	d101      	bne.n	80027ea <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80027e6:	2301      	movs	r3, #1
 80027e8:	e049      	b.n	800287e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80027f0:	b2db      	uxtb	r3, r3
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	d106      	bne.n	8002804 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	2200      	movs	r2, #0
 80027fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80027fe:	6878      	ldr	r0, [r7, #4]
 8002800:	f000 f841 	bl	8002886 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	2202      	movs	r2, #2
 8002808:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	681a      	ldr	r2, [r3, #0]
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	3304      	adds	r3, #4
 8002814:	4619      	mov	r1, r3
 8002816:	4610      	mov	r0, r2
 8002818:	f000 fa00 	bl	8002c1c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	2201      	movs	r2, #1
 8002820:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	2201      	movs	r2, #1
 8002828:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	2201      	movs	r2, #1
 8002830:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	2201      	movs	r2, #1
 8002838:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	2201      	movs	r2, #1
 8002840:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	2201      	movs	r2, #1
 8002848:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	2201      	movs	r2, #1
 8002850:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	2201      	movs	r2, #1
 8002858:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	2201      	movs	r2, #1
 8002860:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	2201      	movs	r2, #1
 8002868:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	2201      	movs	r2, #1
 8002870:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	2201      	movs	r2, #1
 8002878:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800287c:	2300      	movs	r3, #0
}
 800287e:	4618      	mov	r0, r3
 8002880:	3708      	adds	r7, #8
 8002882:	46bd      	mov	sp, r7
 8002884:	bd80      	pop	{r7, pc}

08002886 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8002886:	b480      	push	{r7}
 8002888:	b083      	sub	sp, #12
 800288a:	af00      	add	r7, sp, #0
 800288c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800288e:	bf00      	nop
 8002890:	370c      	adds	r7, #12
 8002892:	46bd      	mov	sp, r7
 8002894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002898:	4770      	bx	lr
	...

0800289c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800289c:	b480      	push	{r7}
 800289e:	b085      	sub	sp, #20
 80028a0:	af00      	add	r7, sp, #0
 80028a2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80028aa:	b2db      	uxtb	r3, r3
 80028ac:	2b01      	cmp	r3, #1
 80028ae:	d001      	beq.n	80028b4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80028b0:	2301      	movs	r3, #1
 80028b2:	e054      	b.n	800295e <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	2202      	movs	r2, #2
 80028b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	68da      	ldr	r2, [r3, #12]
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	f042 0201 	orr.w	r2, r2, #1
 80028ca:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	4a26      	ldr	r2, [pc, #152]	; (800296c <HAL_TIM_Base_Start_IT+0xd0>)
 80028d2:	4293      	cmp	r3, r2
 80028d4:	d022      	beq.n	800291c <HAL_TIM_Base_Start_IT+0x80>
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80028de:	d01d      	beq.n	800291c <HAL_TIM_Base_Start_IT+0x80>
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	4a22      	ldr	r2, [pc, #136]	; (8002970 <HAL_TIM_Base_Start_IT+0xd4>)
 80028e6:	4293      	cmp	r3, r2
 80028e8:	d018      	beq.n	800291c <HAL_TIM_Base_Start_IT+0x80>
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	4a21      	ldr	r2, [pc, #132]	; (8002974 <HAL_TIM_Base_Start_IT+0xd8>)
 80028f0:	4293      	cmp	r3, r2
 80028f2:	d013      	beq.n	800291c <HAL_TIM_Base_Start_IT+0x80>
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	4a1f      	ldr	r2, [pc, #124]	; (8002978 <HAL_TIM_Base_Start_IT+0xdc>)
 80028fa:	4293      	cmp	r3, r2
 80028fc:	d00e      	beq.n	800291c <HAL_TIM_Base_Start_IT+0x80>
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	4a1e      	ldr	r2, [pc, #120]	; (800297c <HAL_TIM_Base_Start_IT+0xe0>)
 8002904:	4293      	cmp	r3, r2
 8002906:	d009      	beq.n	800291c <HAL_TIM_Base_Start_IT+0x80>
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	4a1c      	ldr	r2, [pc, #112]	; (8002980 <HAL_TIM_Base_Start_IT+0xe4>)
 800290e:	4293      	cmp	r3, r2
 8002910:	d004      	beq.n	800291c <HAL_TIM_Base_Start_IT+0x80>
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	4a1b      	ldr	r2, [pc, #108]	; (8002984 <HAL_TIM_Base_Start_IT+0xe8>)
 8002918:	4293      	cmp	r3, r2
 800291a:	d115      	bne.n	8002948 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	689a      	ldr	r2, [r3, #8]
 8002922:	4b19      	ldr	r3, [pc, #100]	; (8002988 <HAL_TIM_Base_Start_IT+0xec>)
 8002924:	4013      	ands	r3, r2
 8002926:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002928:	68fb      	ldr	r3, [r7, #12]
 800292a:	2b06      	cmp	r3, #6
 800292c:	d015      	beq.n	800295a <HAL_TIM_Base_Start_IT+0xbe>
 800292e:	68fb      	ldr	r3, [r7, #12]
 8002930:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002934:	d011      	beq.n	800295a <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	681a      	ldr	r2, [r3, #0]
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	f042 0201 	orr.w	r2, r2, #1
 8002944:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002946:	e008      	b.n	800295a <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	681a      	ldr	r2, [r3, #0]
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	f042 0201 	orr.w	r2, r2, #1
 8002956:	601a      	str	r2, [r3, #0]
 8002958:	e000      	b.n	800295c <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800295a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800295c:	2300      	movs	r3, #0
}
 800295e:	4618      	mov	r0, r3
 8002960:	3714      	adds	r7, #20
 8002962:	46bd      	mov	sp, r7
 8002964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002968:	4770      	bx	lr
 800296a:	bf00      	nop
 800296c:	40010000 	.word	0x40010000
 8002970:	40000400 	.word	0x40000400
 8002974:	40000800 	.word	0x40000800
 8002978:	40000c00 	.word	0x40000c00
 800297c:	40010400 	.word	0x40010400
 8002980:	40014000 	.word	0x40014000
 8002984:	40001800 	.word	0x40001800
 8002988:	00010007 	.word	0x00010007

0800298c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800298c:	b580      	push	{r7, lr}
 800298e:	b082      	sub	sp, #8
 8002990:	af00      	add	r7, sp, #0
 8002992:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	691b      	ldr	r3, [r3, #16]
 800299a:	f003 0302 	and.w	r3, r3, #2
 800299e:	2b02      	cmp	r3, #2
 80029a0:	d122      	bne.n	80029e8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	68db      	ldr	r3, [r3, #12]
 80029a8:	f003 0302 	and.w	r3, r3, #2
 80029ac:	2b02      	cmp	r3, #2
 80029ae:	d11b      	bne.n	80029e8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	f06f 0202 	mvn.w	r2, #2
 80029b8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	2201      	movs	r2, #1
 80029be:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	699b      	ldr	r3, [r3, #24]
 80029c6:	f003 0303 	and.w	r3, r3, #3
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	d003      	beq.n	80029d6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80029ce:	6878      	ldr	r0, [r7, #4]
 80029d0:	f000 f905 	bl	8002bde <HAL_TIM_IC_CaptureCallback>
 80029d4:	e005      	b.n	80029e2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80029d6:	6878      	ldr	r0, [r7, #4]
 80029d8:	f000 f8f7 	bl	8002bca <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80029dc:	6878      	ldr	r0, [r7, #4]
 80029de:	f000 f908 	bl	8002bf2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	2200      	movs	r2, #0
 80029e6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	691b      	ldr	r3, [r3, #16]
 80029ee:	f003 0304 	and.w	r3, r3, #4
 80029f2:	2b04      	cmp	r3, #4
 80029f4:	d122      	bne.n	8002a3c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	68db      	ldr	r3, [r3, #12]
 80029fc:	f003 0304 	and.w	r3, r3, #4
 8002a00:	2b04      	cmp	r3, #4
 8002a02:	d11b      	bne.n	8002a3c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	f06f 0204 	mvn.w	r2, #4
 8002a0c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	2202      	movs	r2, #2
 8002a12:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	699b      	ldr	r3, [r3, #24]
 8002a1a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	d003      	beq.n	8002a2a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002a22:	6878      	ldr	r0, [r7, #4]
 8002a24:	f000 f8db 	bl	8002bde <HAL_TIM_IC_CaptureCallback>
 8002a28:	e005      	b.n	8002a36 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002a2a:	6878      	ldr	r0, [r7, #4]
 8002a2c:	f000 f8cd 	bl	8002bca <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002a30:	6878      	ldr	r0, [r7, #4]
 8002a32:	f000 f8de 	bl	8002bf2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	2200      	movs	r2, #0
 8002a3a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	691b      	ldr	r3, [r3, #16]
 8002a42:	f003 0308 	and.w	r3, r3, #8
 8002a46:	2b08      	cmp	r3, #8
 8002a48:	d122      	bne.n	8002a90 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	68db      	ldr	r3, [r3, #12]
 8002a50:	f003 0308 	and.w	r3, r3, #8
 8002a54:	2b08      	cmp	r3, #8
 8002a56:	d11b      	bne.n	8002a90 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	f06f 0208 	mvn.w	r2, #8
 8002a60:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	2204      	movs	r2, #4
 8002a66:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	69db      	ldr	r3, [r3, #28]
 8002a6e:	f003 0303 	and.w	r3, r3, #3
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	d003      	beq.n	8002a7e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002a76:	6878      	ldr	r0, [r7, #4]
 8002a78:	f000 f8b1 	bl	8002bde <HAL_TIM_IC_CaptureCallback>
 8002a7c:	e005      	b.n	8002a8a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002a7e:	6878      	ldr	r0, [r7, #4]
 8002a80:	f000 f8a3 	bl	8002bca <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002a84:	6878      	ldr	r0, [r7, #4]
 8002a86:	f000 f8b4 	bl	8002bf2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	2200      	movs	r2, #0
 8002a8e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	691b      	ldr	r3, [r3, #16]
 8002a96:	f003 0310 	and.w	r3, r3, #16
 8002a9a:	2b10      	cmp	r3, #16
 8002a9c:	d122      	bne.n	8002ae4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	68db      	ldr	r3, [r3, #12]
 8002aa4:	f003 0310 	and.w	r3, r3, #16
 8002aa8:	2b10      	cmp	r3, #16
 8002aaa:	d11b      	bne.n	8002ae4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	f06f 0210 	mvn.w	r2, #16
 8002ab4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	2208      	movs	r2, #8
 8002aba:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	69db      	ldr	r3, [r3, #28]
 8002ac2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	d003      	beq.n	8002ad2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002aca:	6878      	ldr	r0, [r7, #4]
 8002acc:	f000 f887 	bl	8002bde <HAL_TIM_IC_CaptureCallback>
 8002ad0:	e005      	b.n	8002ade <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002ad2:	6878      	ldr	r0, [r7, #4]
 8002ad4:	f000 f879 	bl	8002bca <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002ad8:	6878      	ldr	r0, [r7, #4]
 8002ada:	f000 f88a 	bl	8002bf2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	2200      	movs	r2, #0
 8002ae2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	691b      	ldr	r3, [r3, #16]
 8002aea:	f003 0301 	and.w	r3, r3, #1
 8002aee:	2b01      	cmp	r3, #1
 8002af0:	d10e      	bne.n	8002b10 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	68db      	ldr	r3, [r3, #12]
 8002af8:	f003 0301 	and.w	r3, r3, #1
 8002afc:	2b01      	cmp	r3, #1
 8002afe:	d107      	bne.n	8002b10 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	f06f 0201 	mvn.w	r2, #1
 8002b08:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002b0a:	6878      	ldr	r0, [r7, #4]
 8002b0c:	f7fe f840 	bl	8000b90 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	691b      	ldr	r3, [r3, #16]
 8002b16:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002b1a:	2b80      	cmp	r3, #128	; 0x80
 8002b1c:	d10e      	bne.n	8002b3c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	68db      	ldr	r3, [r3, #12]
 8002b24:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002b28:	2b80      	cmp	r3, #128	; 0x80
 8002b2a:	d107      	bne.n	8002b3c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002b34:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002b36:	6878      	ldr	r0, [r7, #4]
 8002b38:	f000 f91a 	bl	8002d70 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	691b      	ldr	r3, [r3, #16]
 8002b42:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b46:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002b4a:	d10e      	bne.n	8002b6a <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	68db      	ldr	r3, [r3, #12]
 8002b52:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002b56:	2b80      	cmp	r3, #128	; 0x80
 8002b58:	d107      	bne.n	8002b6a <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8002b62:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8002b64:	6878      	ldr	r0, [r7, #4]
 8002b66:	f000 f90d 	bl	8002d84 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	691b      	ldr	r3, [r3, #16]
 8002b70:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b74:	2b40      	cmp	r3, #64	; 0x40
 8002b76:	d10e      	bne.n	8002b96 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	68db      	ldr	r3, [r3, #12]
 8002b7e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b82:	2b40      	cmp	r3, #64	; 0x40
 8002b84:	d107      	bne.n	8002b96 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002b8e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002b90:	6878      	ldr	r0, [r7, #4]
 8002b92:	f000 f838 	bl	8002c06 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	691b      	ldr	r3, [r3, #16]
 8002b9c:	f003 0320 	and.w	r3, r3, #32
 8002ba0:	2b20      	cmp	r3, #32
 8002ba2:	d10e      	bne.n	8002bc2 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	68db      	ldr	r3, [r3, #12]
 8002baa:	f003 0320 	and.w	r3, r3, #32
 8002bae:	2b20      	cmp	r3, #32
 8002bb0:	d107      	bne.n	8002bc2 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	f06f 0220 	mvn.w	r2, #32
 8002bba:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002bbc:	6878      	ldr	r0, [r7, #4]
 8002bbe:	f000 f8cd 	bl	8002d5c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002bc2:	bf00      	nop
 8002bc4:	3708      	adds	r7, #8
 8002bc6:	46bd      	mov	sp, r7
 8002bc8:	bd80      	pop	{r7, pc}

08002bca <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002bca:	b480      	push	{r7}
 8002bcc:	b083      	sub	sp, #12
 8002bce:	af00      	add	r7, sp, #0
 8002bd0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002bd2:	bf00      	nop
 8002bd4:	370c      	adds	r7, #12
 8002bd6:	46bd      	mov	sp, r7
 8002bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bdc:	4770      	bx	lr

08002bde <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002bde:	b480      	push	{r7}
 8002be0:	b083      	sub	sp, #12
 8002be2:	af00      	add	r7, sp, #0
 8002be4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002be6:	bf00      	nop
 8002be8:	370c      	adds	r7, #12
 8002bea:	46bd      	mov	sp, r7
 8002bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bf0:	4770      	bx	lr

08002bf2 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002bf2:	b480      	push	{r7}
 8002bf4:	b083      	sub	sp, #12
 8002bf6:	af00      	add	r7, sp, #0
 8002bf8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002bfa:	bf00      	nop
 8002bfc:	370c      	adds	r7, #12
 8002bfe:	46bd      	mov	sp, r7
 8002c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c04:	4770      	bx	lr

08002c06 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002c06:	b480      	push	{r7}
 8002c08:	b083      	sub	sp, #12
 8002c0a:	af00      	add	r7, sp, #0
 8002c0c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002c0e:	bf00      	nop
 8002c10:	370c      	adds	r7, #12
 8002c12:	46bd      	mov	sp, r7
 8002c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c18:	4770      	bx	lr
	...

08002c1c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002c1c:	b480      	push	{r7}
 8002c1e:	b085      	sub	sp, #20
 8002c20:	af00      	add	r7, sp, #0
 8002c22:	6078      	str	r0, [r7, #4]
 8002c24:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	4a40      	ldr	r2, [pc, #256]	; (8002d30 <TIM_Base_SetConfig+0x114>)
 8002c30:	4293      	cmp	r3, r2
 8002c32:	d013      	beq.n	8002c5c <TIM_Base_SetConfig+0x40>
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002c3a:	d00f      	beq.n	8002c5c <TIM_Base_SetConfig+0x40>
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	4a3d      	ldr	r2, [pc, #244]	; (8002d34 <TIM_Base_SetConfig+0x118>)
 8002c40:	4293      	cmp	r3, r2
 8002c42:	d00b      	beq.n	8002c5c <TIM_Base_SetConfig+0x40>
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	4a3c      	ldr	r2, [pc, #240]	; (8002d38 <TIM_Base_SetConfig+0x11c>)
 8002c48:	4293      	cmp	r3, r2
 8002c4a:	d007      	beq.n	8002c5c <TIM_Base_SetConfig+0x40>
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	4a3b      	ldr	r2, [pc, #236]	; (8002d3c <TIM_Base_SetConfig+0x120>)
 8002c50:	4293      	cmp	r3, r2
 8002c52:	d003      	beq.n	8002c5c <TIM_Base_SetConfig+0x40>
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	4a3a      	ldr	r2, [pc, #232]	; (8002d40 <TIM_Base_SetConfig+0x124>)
 8002c58:	4293      	cmp	r3, r2
 8002c5a:	d108      	bne.n	8002c6e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002c5c:	68fb      	ldr	r3, [r7, #12]
 8002c5e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002c62:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002c64:	683b      	ldr	r3, [r7, #0]
 8002c66:	685b      	ldr	r3, [r3, #4]
 8002c68:	68fa      	ldr	r2, [r7, #12]
 8002c6a:	4313      	orrs	r3, r2
 8002c6c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	4a2f      	ldr	r2, [pc, #188]	; (8002d30 <TIM_Base_SetConfig+0x114>)
 8002c72:	4293      	cmp	r3, r2
 8002c74:	d02b      	beq.n	8002cce <TIM_Base_SetConfig+0xb2>
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002c7c:	d027      	beq.n	8002cce <TIM_Base_SetConfig+0xb2>
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	4a2c      	ldr	r2, [pc, #176]	; (8002d34 <TIM_Base_SetConfig+0x118>)
 8002c82:	4293      	cmp	r3, r2
 8002c84:	d023      	beq.n	8002cce <TIM_Base_SetConfig+0xb2>
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	4a2b      	ldr	r2, [pc, #172]	; (8002d38 <TIM_Base_SetConfig+0x11c>)
 8002c8a:	4293      	cmp	r3, r2
 8002c8c:	d01f      	beq.n	8002cce <TIM_Base_SetConfig+0xb2>
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	4a2a      	ldr	r2, [pc, #168]	; (8002d3c <TIM_Base_SetConfig+0x120>)
 8002c92:	4293      	cmp	r3, r2
 8002c94:	d01b      	beq.n	8002cce <TIM_Base_SetConfig+0xb2>
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	4a29      	ldr	r2, [pc, #164]	; (8002d40 <TIM_Base_SetConfig+0x124>)
 8002c9a:	4293      	cmp	r3, r2
 8002c9c:	d017      	beq.n	8002cce <TIM_Base_SetConfig+0xb2>
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	4a28      	ldr	r2, [pc, #160]	; (8002d44 <TIM_Base_SetConfig+0x128>)
 8002ca2:	4293      	cmp	r3, r2
 8002ca4:	d013      	beq.n	8002cce <TIM_Base_SetConfig+0xb2>
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	4a27      	ldr	r2, [pc, #156]	; (8002d48 <TIM_Base_SetConfig+0x12c>)
 8002caa:	4293      	cmp	r3, r2
 8002cac:	d00f      	beq.n	8002cce <TIM_Base_SetConfig+0xb2>
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	4a26      	ldr	r2, [pc, #152]	; (8002d4c <TIM_Base_SetConfig+0x130>)
 8002cb2:	4293      	cmp	r3, r2
 8002cb4:	d00b      	beq.n	8002cce <TIM_Base_SetConfig+0xb2>
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	4a25      	ldr	r2, [pc, #148]	; (8002d50 <TIM_Base_SetConfig+0x134>)
 8002cba:	4293      	cmp	r3, r2
 8002cbc:	d007      	beq.n	8002cce <TIM_Base_SetConfig+0xb2>
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	4a24      	ldr	r2, [pc, #144]	; (8002d54 <TIM_Base_SetConfig+0x138>)
 8002cc2:	4293      	cmp	r3, r2
 8002cc4:	d003      	beq.n	8002cce <TIM_Base_SetConfig+0xb2>
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	4a23      	ldr	r2, [pc, #140]	; (8002d58 <TIM_Base_SetConfig+0x13c>)
 8002cca:	4293      	cmp	r3, r2
 8002ccc:	d108      	bne.n	8002ce0 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002cce:	68fb      	ldr	r3, [r7, #12]
 8002cd0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002cd4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002cd6:	683b      	ldr	r3, [r7, #0]
 8002cd8:	68db      	ldr	r3, [r3, #12]
 8002cda:	68fa      	ldr	r2, [r7, #12]
 8002cdc:	4313      	orrs	r3, r2
 8002cde:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002ce0:	68fb      	ldr	r3, [r7, #12]
 8002ce2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002ce6:	683b      	ldr	r3, [r7, #0]
 8002ce8:	695b      	ldr	r3, [r3, #20]
 8002cea:	4313      	orrs	r3, r2
 8002cec:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	68fa      	ldr	r2, [r7, #12]
 8002cf2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002cf4:	683b      	ldr	r3, [r7, #0]
 8002cf6:	689a      	ldr	r2, [r3, #8]
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002cfc:	683b      	ldr	r3, [r7, #0]
 8002cfe:	681a      	ldr	r2, [r3, #0]
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	4a0a      	ldr	r2, [pc, #40]	; (8002d30 <TIM_Base_SetConfig+0x114>)
 8002d08:	4293      	cmp	r3, r2
 8002d0a:	d003      	beq.n	8002d14 <TIM_Base_SetConfig+0xf8>
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	4a0c      	ldr	r2, [pc, #48]	; (8002d40 <TIM_Base_SetConfig+0x124>)
 8002d10:	4293      	cmp	r3, r2
 8002d12:	d103      	bne.n	8002d1c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002d14:	683b      	ldr	r3, [r7, #0]
 8002d16:	691a      	ldr	r2, [r3, #16]
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	2201      	movs	r2, #1
 8002d20:	615a      	str	r2, [r3, #20]
}
 8002d22:	bf00      	nop
 8002d24:	3714      	adds	r7, #20
 8002d26:	46bd      	mov	sp, r7
 8002d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d2c:	4770      	bx	lr
 8002d2e:	bf00      	nop
 8002d30:	40010000 	.word	0x40010000
 8002d34:	40000400 	.word	0x40000400
 8002d38:	40000800 	.word	0x40000800
 8002d3c:	40000c00 	.word	0x40000c00
 8002d40:	40010400 	.word	0x40010400
 8002d44:	40014000 	.word	0x40014000
 8002d48:	40014400 	.word	0x40014400
 8002d4c:	40014800 	.word	0x40014800
 8002d50:	40001800 	.word	0x40001800
 8002d54:	40001c00 	.word	0x40001c00
 8002d58:	40002000 	.word	0x40002000

08002d5c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002d5c:	b480      	push	{r7}
 8002d5e:	b083      	sub	sp, #12
 8002d60:	af00      	add	r7, sp, #0
 8002d62:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002d64:	bf00      	nop
 8002d66:	370c      	adds	r7, #12
 8002d68:	46bd      	mov	sp, r7
 8002d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d6e:	4770      	bx	lr

08002d70 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002d70:	b480      	push	{r7}
 8002d72:	b083      	sub	sp, #12
 8002d74:	af00      	add	r7, sp, #0
 8002d76:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002d78:	bf00      	nop
 8002d7a:	370c      	adds	r7, #12
 8002d7c:	46bd      	mov	sp, r7
 8002d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d82:	4770      	bx	lr

08002d84 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8002d84:	b480      	push	{r7}
 8002d86:	b083      	sub	sp, #12
 8002d88:	af00      	add	r7, sp, #0
 8002d8a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8002d8c:	bf00      	nop
 8002d8e:	370c      	adds	r7, #12
 8002d90:	46bd      	mov	sp, r7
 8002d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d96:	4770      	bx	lr

08002d98 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002d98:	b580      	push	{r7, lr}
 8002d9a:	b082      	sub	sp, #8
 8002d9c:	af00      	add	r7, sp, #0
 8002d9e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	d101      	bne.n	8002daa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002da6:	2301      	movs	r3, #1
 8002da8:	e040      	b.n	8002e2c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	d106      	bne.n	8002dc0 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	2200      	movs	r2, #0
 8002db6:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002dba:	6878      	ldr	r0, [r7, #4]
 8002dbc:	f7fd ff28 	bl	8000c10 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	2224      	movs	r2, #36	; 0x24
 8002dc4:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	681a      	ldr	r2, [r3, #0]
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	f022 0201 	bic.w	r2, r2, #1
 8002dd4:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002dd6:	6878      	ldr	r0, [r7, #4]
 8002dd8:	f000 fbf2 	bl	80035c0 <UART_SetConfig>
 8002ddc:	4603      	mov	r3, r0
 8002dde:	2b01      	cmp	r3, #1
 8002de0:	d101      	bne.n	8002de6 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8002de2:	2301      	movs	r3, #1
 8002de4:	e022      	b.n	8002e2c <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	d002      	beq.n	8002df4 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8002dee:	6878      	ldr	r0, [r7, #4]
 8002df0:	f000 fe48 	bl	8003a84 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	685a      	ldr	r2, [r3, #4]
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002e02:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	689a      	ldr	r2, [r3, #8]
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002e12:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	681a      	ldr	r2, [r3, #0]
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	f042 0201 	orr.w	r2, r2, #1
 8002e22:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002e24:	6878      	ldr	r0, [r7, #4]
 8002e26:	f000 fecf 	bl	8003bc8 <UART_CheckIdleState>
 8002e2a:	4603      	mov	r3, r0
}
 8002e2c:	4618      	mov	r0, r3
 8002e2e:	3708      	adds	r7, #8
 8002e30:	46bd      	mov	sp, r7
 8002e32:	bd80      	pop	{r7, pc}

08002e34 <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8002e34:	b480      	push	{r7}
 8002e36:	b08b      	sub	sp, #44	; 0x2c
 8002e38:	af00      	add	r7, sp, #0
 8002e3a:	60f8      	str	r0, [r7, #12]
 8002e3c:	60b9      	str	r1, [r7, #8]
 8002e3e:	4613      	mov	r3, r2
 8002e40:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002e42:	68fb      	ldr	r3, [r7, #12]
 8002e44:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002e46:	2b20      	cmp	r3, #32
 8002e48:	d156      	bne.n	8002ef8 <HAL_UART_Transmit_IT+0xc4>
  {
    if ((pData == NULL) || (Size == 0U))
 8002e4a:	68bb      	ldr	r3, [r7, #8]
 8002e4c:	2b00      	cmp	r3, #0
 8002e4e:	d002      	beq.n	8002e56 <HAL_UART_Transmit_IT+0x22>
 8002e50:	88fb      	ldrh	r3, [r7, #6]
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	d101      	bne.n	8002e5a <HAL_UART_Transmit_IT+0x26>
    {
      return HAL_ERROR;
 8002e56:	2301      	movs	r3, #1
 8002e58:	e04f      	b.n	8002efa <HAL_UART_Transmit_IT+0xc6>
    }

    __HAL_LOCK(huart);
 8002e5a:	68fb      	ldr	r3, [r7, #12]
 8002e5c:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8002e60:	2b01      	cmp	r3, #1
 8002e62:	d101      	bne.n	8002e68 <HAL_UART_Transmit_IT+0x34>
 8002e64:	2302      	movs	r3, #2
 8002e66:	e048      	b.n	8002efa <HAL_UART_Transmit_IT+0xc6>
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	2201      	movs	r2, #1
 8002e6c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->pTxBuffPtr  = pData;
 8002e70:	68fb      	ldr	r3, [r7, #12]
 8002e72:	68ba      	ldr	r2, [r7, #8]
 8002e74:	64da      	str	r2, [r3, #76]	; 0x4c
    huart->TxXferSize  = Size;
 8002e76:	68fb      	ldr	r3, [r7, #12]
 8002e78:	88fa      	ldrh	r2, [r7, #6]
 8002e7a:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8002e7e:	68fb      	ldr	r3, [r7, #12]
 8002e80:	88fa      	ldrh	r2, [r7, #6]
 8002e82:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    huart->TxISR       = NULL;
 8002e86:	68fb      	ldr	r3, [r7, #12]
 8002e88:	2200      	movs	r2, #0
 8002e8a:	669a      	str	r2, [r3, #104]	; 0x68

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002e8c:	68fb      	ldr	r3, [r7, #12]
 8002e8e:	2200      	movs	r2, #0
 8002e90:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002e94:	68fb      	ldr	r3, [r7, #12]
 8002e96:	2221      	movs	r2, #33	; 0x21
 8002e98:	679a      	str	r2, [r3, #120]	; 0x78

    /* Set the Tx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002e9a:	68fb      	ldr	r3, [r7, #12]
 8002e9c:	689b      	ldr	r3, [r3, #8]
 8002e9e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002ea2:	d107      	bne.n	8002eb4 <HAL_UART_Transmit_IT+0x80>
 8002ea4:	68fb      	ldr	r3, [r7, #12]
 8002ea6:	691b      	ldr	r3, [r3, #16]
 8002ea8:	2b00      	cmp	r3, #0
 8002eaa:	d103      	bne.n	8002eb4 <HAL_UART_Transmit_IT+0x80>
    {
      huart->TxISR = UART_TxISR_16BIT;
 8002eac:	68fb      	ldr	r3, [r7, #12]
 8002eae:	4a16      	ldr	r2, [pc, #88]	; (8002f08 <HAL_UART_Transmit_IT+0xd4>)
 8002eb0:	669a      	str	r2, [r3, #104]	; 0x68
 8002eb2:	e002      	b.n	8002eba <HAL_UART_Transmit_IT+0x86>
    }
    else
    {
      huart->TxISR = UART_TxISR_8BIT;
 8002eb4:	68fb      	ldr	r3, [r7, #12]
 8002eb6:	4a15      	ldr	r2, [pc, #84]	; (8002f0c <HAL_UART_Transmit_IT+0xd8>)
 8002eb8:	669a      	str	r2, [r3, #104]	; 0x68
    }

    __HAL_UNLOCK(huart);
 8002eba:	68fb      	ldr	r3, [r7, #12]
 8002ebc:	2200      	movs	r2, #0
 8002ebe:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Enable the Transmit Data Register Empty interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8002ec2:	68fb      	ldr	r3, [r7, #12]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002ec8:	697b      	ldr	r3, [r7, #20]
 8002eca:	e853 3f00 	ldrex	r3, [r3]
 8002ece:	613b      	str	r3, [r7, #16]
   return(result);
 8002ed0:	693b      	ldr	r3, [r7, #16]
 8002ed2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002ed6:	627b      	str	r3, [r7, #36]	; 0x24
 8002ed8:	68fb      	ldr	r3, [r7, #12]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	461a      	mov	r2, r3
 8002ede:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ee0:	623b      	str	r3, [r7, #32]
 8002ee2:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002ee4:	69f9      	ldr	r1, [r7, #28]
 8002ee6:	6a3a      	ldr	r2, [r7, #32]
 8002ee8:	e841 2300 	strex	r3, r2, [r1]
 8002eec:	61bb      	str	r3, [r7, #24]
   return(result);
 8002eee:	69bb      	ldr	r3, [r7, #24]
 8002ef0:	2b00      	cmp	r3, #0
 8002ef2:	d1e6      	bne.n	8002ec2 <HAL_UART_Transmit_IT+0x8e>

    return HAL_OK;
 8002ef4:	2300      	movs	r3, #0
 8002ef6:	e000      	b.n	8002efa <HAL_UART_Transmit_IT+0xc6>
  }
  else
  {
    return HAL_BUSY;
 8002ef8:	2302      	movs	r3, #2
  }
}
 8002efa:	4618      	mov	r0, r3
 8002efc:	372c      	adds	r7, #44	; 0x2c
 8002efe:	46bd      	mov	sp, r7
 8002f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f04:	4770      	bx	lr
 8002f06:	bf00      	nop
 8002f08:	08004121 	.word	0x08004121
 8002f0c:	0800406b 	.word	0x0800406b

08002f10 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002f10:	b580      	push	{r7, lr}
 8002f12:	b08a      	sub	sp, #40	; 0x28
 8002f14:	af00      	add	r7, sp, #0
 8002f16:	60f8      	str	r0, [r7, #12]
 8002f18:	60b9      	str	r1, [r7, #8]
 8002f1a:	4613      	mov	r3, r2
 8002f1c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002f1e:	68fb      	ldr	r3, [r7, #12]
 8002f20:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002f22:	2b20      	cmp	r3, #32
 8002f24:	d13d      	bne.n	8002fa2 <HAL_UART_Receive_IT+0x92>
  {
    if ((pData == NULL) || (Size == 0U))
 8002f26:	68bb      	ldr	r3, [r7, #8]
 8002f28:	2b00      	cmp	r3, #0
 8002f2a:	d002      	beq.n	8002f32 <HAL_UART_Receive_IT+0x22>
 8002f2c:	88fb      	ldrh	r3, [r7, #6]
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	d101      	bne.n	8002f36 <HAL_UART_Receive_IT+0x26>
    {
      return HAL_ERROR;
 8002f32:	2301      	movs	r3, #1
 8002f34:	e036      	b.n	8002fa4 <HAL_UART_Receive_IT+0x94>
    }

    __HAL_LOCK(huart);
 8002f36:	68fb      	ldr	r3, [r7, #12]
 8002f38:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8002f3c:	2b01      	cmp	r3, #1
 8002f3e:	d101      	bne.n	8002f44 <HAL_UART_Receive_IT+0x34>
 8002f40:	2302      	movs	r3, #2
 8002f42:	e02f      	b.n	8002fa4 <HAL_UART_Receive_IT+0x94>
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	2201      	movs	r2, #1
 8002f48:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002f4c:	68fb      	ldr	r3, [r7, #12]
 8002f4e:	2200      	movs	r2, #0
 8002f50:	661a      	str	r2, [r3, #96]	; 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8002f52:	68fb      	ldr	r3, [r7, #12]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	685b      	ldr	r3, [r3, #4]
 8002f58:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002f5c:	2b00      	cmp	r3, #0
 8002f5e:	d018      	beq.n	8002f92 <HAL_UART_Receive_IT+0x82>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002f66:	697b      	ldr	r3, [r7, #20]
 8002f68:	e853 3f00 	ldrex	r3, [r3]
 8002f6c:	613b      	str	r3, [r7, #16]
   return(result);
 8002f6e:	693b      	ldr	r3, [r7, #16]
 8002f70:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002f74:	627b      	str	r3, [r7, #36]	; 0x24
 8002f76:	68fb      	ldr	r3, [r7, #12]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	461a      	mov	r2, r3
 8002f7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f7e:	623b      	str	r3, [r7, #32]
 8002f80:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002f82:	69f9      	ldr	r1, [r7, #28]
 8002f84:	6a3a      	ldr	r2, [r7, #32]
 8002f86:	e841 2300 	strex	r3, r2, [r1]
 8002f8a:	61bb      	str	r3, [r7, #24]
   return(result);
 8002f8c:	69bb      	ldr	r3, [r7, #24]
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	d1e6      	bne.n	8002f60 <HAL_UART_Receive_IT+0x50>
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8002f92:	88fb      	ldrh	r3, [r7, #6]
 8002f94:	461a      	mov	r2, r3
 8002f96:	68b9      	ldr	r1, [r7, #8]
 8002f98:	68f8      	ldr	r0, [r7, #12]
 8002f9a:	f000 ff23 	bl	8003de4 <UART_Start_Receive_IT>
 8002f9e:	4603      	mov	r3, r0
 8002fa0:	e000      	b.n	8002fa4 <HAL_UART_Receive_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8002fa2:	2302      	movs	r3, #2
  }
}
 8002fa4:	4618      	mov	r0, r3
 8002fa6:	3728      	adds	r7, #40	; 0x28
 8002fa8:	46bd      	mov	sp, r7
 8002faa:	bd80      	pop	{r7, pc}

08002fac <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002fac:	b580      	push	{r7, lr}
 8002fae:	b0ba      	sub	sp, #232	; 0xe8
 8002fb0:	af00      	add	r7, sp, #0
 8002fb2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	69db      	ldr	r3, [r3, #28]
 8002fba:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	689b      	ldr	r3, [r3, #8]
 8002fce:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8002fd2:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8002fd6:	f640 030f 	movw	r3, #2063	; 0x80f
 8002fda:	4013      	ands	r3, r2
 8002fdc:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8002fe0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002fe4:	2b00      	cmp	r3, #0
 8002fe6:	d115      	bne.n	8003014 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8002fe8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002fec:	f003 0320 	and.w	r3, r3, #32
 8002ff0:	2b00      	cmp	r3, #0
 8002ff2:	d00f      	beq.n	8003014 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8002ff4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002ff8:	f003 0320 	and.w	r3, r3, #32
 8002ffc:	2b00      	cmp	r3, #0
 8002ffe:	d009      	beq.n	8003014 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003004:	2b00      	cmp	r3, #0
 8003006:	f000 82a4 	beq.w	8003552 <HAL_UART_IRQHandler+0x5a6>
      {
        huart->RxISR(huart);
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800300e:	6878      	ldr	r0, [r7, #4]
 8003010:	4798      	blx	r3
      }
      return;
 8003012:	e29e      	b.n	8003552 <HAL_UART_IRQHandler+0x5a6>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8003014:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003018:	2b00      	cmp	r3, #0
 800301a:	f000 8117 	beq.w	800324c <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 800301e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003022:	f003 0301 	and.w	r3, r3, #1
 8003026:	2b00      	cmp	r3, #0
 8003028:	d106      	bne.n	8003038 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 800302a:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800302e:	4b85      	ldr	r3, [pc, #532]	; (8003244 <HAL_UART_IRQHandler+0x298>)
 8003030:	4013      	ands	r3, r2
 8003032:	2b00      	cmp	r3, #0
 8003034:	f000 810a 	beq.w	800324c <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8003038:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800303c:	f003 0301 	and.w	r3, r3, #1
 8003040:	2b00      	cmp	r3, #0
 8003042:	d011      	beq.n	8003068 <HAL_UART_IRQHandler+0xbc>
 8003044:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003048:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800304c:	2b00      	cmp	r3, #0
 800304e:	d00b      	beq.n	8003068 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	2201      	movs	r2, #1
 8003056:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800305e:	f043 0201 	orr.w	r2, r3, #1
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003068:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800306c:	f003 0302 	and.w	r3, r3, #2
 8003070:	2b00      	cmp	r3, #0
 8003072:	d011      	beq.n	8003098 <HAL_UART_IRQHandler+0xec>
 8003074:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003078:	f003 0301 	and.w	r3, r3, #1
 800307c:	2b00      	cmp	r3, #0
 800307e:	d00b      	beq.n	8003098 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	2202      	movs	r2, #2
 8003086:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800308e:	f043 0204 	orr.w	r2, r3, #4
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003098:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800309c:	f003 0304 	and.w	r3, r3, #4
 80030a0:	2b00      	cmp	r3, #0
 80030a2:	d011      	beq.n	80030c8 <HAL_UART_IRQHandler+0x11c>
 80030a4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80030a8:	f003 0301 	and.w	r3, r3, #1
 80030ac:	2b00      	cmp	r3, #0
 80030ae:	d00b      	beq.n	80030c8 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	2204      	movs	r2, #4
 80030b6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80030be:	f043 0202 	orr.w	r2, r3, #2
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80030c8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80030cc:	f003 0308 	and.w	r3, r3, #8
 80030d0:	2b00      	cmp	r3, #0
 80030d2:	d017      	beq.n	8003104 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80030d4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80030d8:	f003 0320 	and.w	r3, r3, #32
 80030dc:	2b00      	cmp	r3, #0
 80030de:	d105      	bne.n	80030ec <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 80030e0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80030e4:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80030e8:	2b00      	cmp	r3, #0
 80030ea:	d00b      	beq.n	8003104 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	2208      	movs	r2, #8
 80030f2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80030fa:	f043 0208 	orr.w	r2, r3, #8
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8003104:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003108:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800310c:	2b00      	cmp	r3, #0
 800310e:	d012      	beq.n	8003136 <HAL_UART_IRQHandler+0x18a>
 8003110:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003114:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003118:	2b00      	cmp	r3, #0
 800311a:	d00c      	beq.n	8003136 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003124:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800312c:	f043 0220 	orr.w	r2, r3, #32
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800313c:	2b00      	cmp	r3, #0
 800313e:	f000 820a 	beq.w	8003556 <HAL_UART_IRQHandler+0x5aa>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8003142:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003146:	f003 0320 	and.w	r3, r3, #32
 800314a:	2b00      	cmp	r3, #0
 800314c:	d00d      	beq.n	800316a <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800314e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003152:	f003 0320 	and.w	r3, r3, #32
 8003156:	2b00      	cmp	r3, #0
 8003158:	d007      	beq.n	800316a <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800315e:	2b00      	cmp	r3, #0
 8003160:	d003      	beq.n	800316a <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003166:	6878      	ldr	r0, [r7, #4]
 8003168:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003170:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	689b      	ldr	r3, [r3, #8]
 800317a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800317e:	2b40      	cmp	r3, #64	; 0x40
 8003180:	d005      	beq.n	800318e <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8003182:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8003186:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800318a:	2b00      	cmp	r3, #0
 800318c:	d04f      	beq.n	800322e <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800318e:	6878      	ldr	r0, [r7, #4]
 8003190:	f000 fef2 	bl	8003f78 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	689b      	ldr	r3, [r3, #8]
 800319a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800319e:	2b40      	cmp	r3, #64	; 0x40
 80031a0:	d141      	bne.n	8003226 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	3308      	adds	r3, #8
 80031a8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80031ac:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80031b0:	e853 3f00 	ldrex	r3, [r3]
 80031b4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80031b8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80031bc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80031c0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	3308      	adds	r3, #8
 80031ca:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80031ce:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80031d2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80031d6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80031da:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80031de:	e841 2300 	strex	r3, r2, [r1]
 80031e2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80031e6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80031ea:	2b00      	cmp	r3, #0
 80031ec:	d1d9      	bne.n	80031a2 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	d013      	beq.n	800321e <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80031fa:	4a13      	ldr	r2, [pc, #76]	; (8003248 <HAL_UART_IRQHandler+0x29c>)
 80031fc:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003202:	4618      	mov	r0, r3
 8003204:	f7fd ffa8 	bl	8001158 <HAL_DMA_Abort_IT>
 8003208:	4603      	mov	r3, r0
 800320a:	2b00      	cmp	r3, #0
 800320c:	d017      	beq.n	800323e <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003212:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003214:	687a      	ldr	r2, [r7, #4]
 8003216:	6f12      	ldr	r2, [r2, #112]	; 0x70
 8003218:	4610      	mov	r0, r2
 800321a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800321c:	e00f      	b.n	800323e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800321e:	6878      	ldr	r0, [r7, #4]
 8003220:	f000 f9ae 	bl	8003580 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003224:	e00b      	b.n	800323e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003226:	6878      	ldr	r0, [r7, #4]
 8003228:	f000 f9aa 	bl	8003580 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800322c:	e007      	b.n	800323e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800322e:	6878      	ldr	r0, [r7, #4]
 8003230:	f000 f9a6 	bl	8003580 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	2200      	movs	r2, #0
 8003238:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 800323c:	e18b      	b.n	8003556 <HAL_UART_IRQHandler+0x5aa>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800323e:	bf00      	nop
    return;
 8003240:	e189      	b.n	8003556 <HAL_UART_IRQHandler+0x5aa>
 8003242:	bf00      	nop
 8003244:	04000120 	.word	0x04000120
 8003248:	0800403f 	.word	0x0800403f

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003250:	2b01      	cmp	r3, #1
 8003252:	f040 8144 	bne.w	80034de <HAL_UART_IRQHandler+0x532>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8003256:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800325a:	f003 0310 	and.w	r3, r3, #16
 800325e:	2b00      	cmp	r3, #0
 8003260:	f000 813d 	beq.w	80034de <HAL_UART_IRQHandler+0x532>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8003264:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003268:	f003 0310 	and.w	r3, r3, #16
 800326c:	2b00      	cmp	r3, #0
 800326e:	f000 8136 	beq.w	80034de <HAL_UART_IRQHandler+0x532>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	2210      	movs	r2, #16
 8003278:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	689b      	ldr	r3, [r3, #8]
 8003280:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003284:	2b40      	cmp	r3, #64	; 0x40
 8003286:	f040 80b2 	bne.w	80033ee <HAL_UART_IRQHandler+0x442>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	685b      	ldr	r3, [r3, #4]
 8003292:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8003296:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800329a:	2b00      	cmp	r3, #0
 800329c:	f000 815d 	beq.w	800355a <HAL_UART_IRQHandler+0x5ae>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80032a6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80032aa:	429a      	cmp	r2, r3
 80032ac:	f080 8155 	bcs.w	800355a <HAL_UART_IRQHandler+0x5ae>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80032b6:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80032be:	69db      	ldr	r3, [r3, #28]
 80032c0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80032c4:	f000 8085 	beq.w	80033d2 <HAL_UART_IRQHandler+0x426>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80032d0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80032d4:	e853 3f00 	ldrex	r3, [r3]
 80032d8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80032dc:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80032e0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80032e4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	461a      	mov	r2, r3
 80032ee:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80032f2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80032f6:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80032fa:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80032fe:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8003302:	e841 2300 	strex	r3, r2, [r1]
 8003306:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800330a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800330e:	2b00      	cmp	r3, #0
 8003310:	d1da      	bne.n	80032c8 <HAL_UART_IRQHandler+0x31c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	3308      	adds	r3, #8
 8003318:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800331a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800331c:	e853 3f00 	ldrex	r3, [r3]
 8003320:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8003322:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003324:	f023 0301 	bic.w	r3, r3, #1
 8003328:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	3308      	adds	r3, #8
 8003332:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8003336:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800333a:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800333c:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800333e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8003342:	e841 2300 	strex	r3, r2, [r1]
 8003346:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8003348:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800334a:	2b00      	cmp	r3, #0
 800334c:	d1e1      	bne.n	8003312 <HAL_UART_IRQHandler+0x366>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	3308      	adds	r3, #8
 8003354:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003356:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003358:	e853 3f00 	ldrex	r3, [r3]
 800335c:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800335e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003360:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003364:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	3308      	adds	r3, #8
 800336e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8003372:	66fa      	str	r2, [r7, #108]	; 0x6c
 8003374:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003376:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8003378:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800337a:	e841 2300 	strex	r3, r2, [r1]
 800337e:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8003380:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003382:	2b00      	cmp	r3, #0
 8003384:	d1e3      	bne.n	800334e <HAL_UART_IRQHandler+0x3a2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	2220      	movs	r2, #32
 800338a:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	2200      	movs	r2, #0
 8003390:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003398:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800339a:	e853 3f00 	ldrex	r3, [r3]
 800339e:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80033a0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80033a2:	f023 0310 	bic.w	r3, r3, #16
 80033a6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	461a      	mov	r2, r3
 80033b0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80033b4:	65bb      	str	r3, [r7, #88]	; 0x58
 80033b6:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80033b8:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80033ba:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80033bc:	e841 2300 	strex	r3, r2, [r1]
 80033c0:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80033c2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80033c4:	2b00      	cmp	r3, #0
 80033c6:	d1e4      	bne.n	8003392 <HAL_UART_IRQHandler+0x3e6>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80033cc:	4618      	mov	r0, r3
 80033ce:	f7fd fe53 	bl	8001078 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80033de:	b29b      	uxth	r3, r3
 80033e0:	1ad3      	subs	r3, r2, r3
 80033e2:	b29b      	uxth	r3, r3
 80033e4:	4619      	mov	r1, r3
 80033e6:	6878      	ldr	r0, [r7, #4]
 80033e8:	f000 f8d4 	bl	8003594 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80033ec:	e0b5      	b.n	800355a <HAL_UART_IRQHandler+0x5ae>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80033fa:	b29b      	uxth	r3, r3
 80033fc:	1ad3      	subs	r3, r2, r3
 80033fe:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003408:	b29b      	uxth	r3, r3
 800340a:	2b00      	cmp	r3, #0
 800340c:	f000 80a7 	beq.w	800355e <HAL_UART_IRQHandler+0x5b2>
          && (nb_rx_data > 0U))
 8003410:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003414:	2b00      	cmp	r3, #0
 8003416:	f000 80a2 	beq.w	800355e <HAL_UART_IRQHandler+0x5b2>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003420:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003422:	e853 3f00 	ldrex	r3, [r3]
 8003426:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8003428:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800342a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800342e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	461a      	mov	r2, r3
 8003438:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800343c:	647b      	str	r3, [r7, #68]	; 0x44
 800343e:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003440:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8003442:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003444:	e841 2300 	strex	r3, r2, [r1]
 8003448:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800344a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800344c:	2b00      	cmp	r3, #0
 800344e:	d1e4      	bne.n	800341a <HAL_UART_IRQHandler+0x46e>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	3308      	adds	r3, #8
 8003456:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003458:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800345a:	e853 3f00 	ldrex	r3, [r3]
 800345e:	623b      	str	r3, [r7, #32]
   return(result);
 8003460:	6a3b      	ldr	r3, [r7, #32]
 8003462:	f023 0301 	bic.w	r3, r3, #1
 8003466:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	3308      	adds	r3, #8
 8003470:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8003474:	633a      	str	r2, [r7, #48]	; 0x30
 8003476:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003478:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800347a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800347c:	e841 2300 	strex	r3, r2, [r1]
 8003480:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003482:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003484:	2b00      	cmp	r3, #0
 8003486:	d1e3      	bne.n	8003450 <HAL_UART_IRQHandler+0x4a4>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	2220      	movs	r2, #32
 800348c:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	2200      	movs	r2, #0
 8003492:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	2200      	movs	r2, #0
 8003498:	665a      	str	r2, [r3, #100]	; 0x64

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80034a0:	693b      	ldr	r3, [r7, #16]
 80034a2:	e853 3f00 	ldrex	r3, [r3]
 80034a6:	60fb      	str	r3, [r7, #12]
   return(result);
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	f023 0310 	bic.w	r3, r3, #16
 80034ae:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	461a      	mov	r2, r3
 80034b8:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80034bc:	61fb      	str	r3, [r7, #28]
 80034be:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80034c0:	69b9      	ldr	r1, [r7, #24]
 80034c2:	69fa      	ldr	r2, [r7, #28]
 80034c4:	e841 2300 	strex	r3, r2, [r1]
 80034c8:	617b      	str	r3, [r7, #20]
   return(result);
 80034ca:	697b      	ldr	r3, [r7, #20]
 80034cc:	2b00      	cmp	r3, #0
 80034ce:	d1e4      	bne.n	800349a <HAL_UART_IRQHandler+0x4ee>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80034d0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80034d4:	4619      	mov	r1, r3
 80034d6:	6878      	ldr	r0, [r7, #4]
 80034d8:	f000 f85c 	bl	8003594 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80034dc:	e03f      	b.n	800355e <HAL_UART_IRQHandler+0x5b2>
  }
#if defined(USART_CR1_UESM)
#if defined(USART_CR3_WUFIE)

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80034de:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80034e2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80034e6:	2b00      	cmp	r3, #0
 80034e8:	d00e      	beq.n	8003508 <HAL_UART_IRQHandler+0x55c>
 80034ea:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80034ee:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80034f2:	2b00      	cmp	r3, #0
 80034f4:	d008      	beq.n	8003508 <HAL_UART_IRQHandler+0x55c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80034fe:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8003500:	6878      	ldr	r0, [r7, #4]
 8003502:	f000 f853 	bl	80035ac <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8003506:	e02d      	b.n	8003564 <HAL_UART_IRQHandler+0x5b8>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8003508:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800350c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003510:	2b00      	cmp	r3, #0
 8003512:	d00e      	beq.n	8003532 <HAL_UART_IRQHandler+0x586>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8003514:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003518:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800351c:	2b00      	cmp	r3, #0
 800351e:	d008      	beq.n	8003532 <HAL_UART_IRQHandler+0x586>
  {
    if (huart->TxISR != NULL)
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003524:	2b00      	cmp	r3, #0
 8003526:	d01c      	beq.n	8003562 <HAL_UART_IRQHandler+0x5b6>
    {
      huart->TxISR(huart);
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800352c:	6878      	ldr	r0, [r7, #4]
 800352e:	4798      	blx	r3
    }
    return;
 8003530:	e017      	b.n	8003562 <HAL_UART_IRQHandler+0x5b6>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8003532:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003536:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800353a:	2b00      	cmp	r3, #0
 800353c:	d012      	beq.n	8003564 <HAL_UART_IRQHandler+0x5b8>
 800353e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003542:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003546:	2b00      	cmp	r3, #0
 8003548:	d00c      	beq.n	8003564 <HAL_UART_IRQHandler+0x5b8>
  {
    UART_EndTransmit_IT(huart);
 800354a:	6878      	ldr	r0, [r7, #4]
 800354c:	f000 fe48 	bl	80041e0 <UART_EndTransmit_IT>
    return;
 8003550:	e008      	b.n	8003564 <HAL_UART_IRQHandler+0x5b8>
      return;
 8003552:	bf00      	nop
 8003554:	e006      	b.n	8003564 <HAL_UART_IRQHandler+0x5b8>
    return;
 8003556:	bf00      	nop
 8003558:	e004      	b.n	8003564 <HAL_UART_IRQHandler+0x5b8>
      return;
 800355a:	bf00      	nop
 800355c:	e002      	b.n	8003564 <HAL_UART_IRQHandler+0x5b8>
      return;
 800355e:	bf00      	nop
 8003560:	e000      	b.n	8003564 <HAL_UART_IRQHandler+0x5b8>
    return;
 8003562:	bf00      	nop
  }

}
 8003564:	37e8      	adds	r7, #232	; 0xe8
 8003566:	46bd      	mov	sp, r7
 8003568:	bd80      	pop	{r7, pc}
 800356a:	bf00      	nop

0800356c <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800356c:	b480      	push	{r7}
 800356e:	b083      	sub	sp, #12
 8003570:	af00      	add	r7, sp, #0
 8003572:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8003574:	bf00      	nop
 8003576:	370c      	adds	r7, #12
 8003578:	46bd      	mov	sp, r7
 800357a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800357e:	4770      	bx	lr

08003580 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003580:	b480      	push	{r7}
 8003582:	b083      	sub	sp, #12
 8003584:	af00      	add	r7, sp, #0
 8003586:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8003588:	bf00      	nop
 800358a:	370c      	adds	r7, #12
 800358c:	46bd      	mov	sp, r7
 800358e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003592:	4770      	bx	lr

08003594 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003594:	b480      	push	{r7}
 8003596:	b083      	sub	sp, #12
 8003598:	af00      	add	r7, sp, #0
 800359a:	6078      	str	r0, [r7, #4]
 800359c:	460b      	mov	r3, r1
 800359e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80035a0:	bf00      	nop
 80035a2:	370c      	adds	r7, #12
 80035a4:	46bd      	mov	sp, r7
 80035a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035aa:	4770      	bx	lr

080035ac <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80035ac:	b480      	push	{r7}
 80035ae:	b083      	sub	sp, #12
 80035b0:	af00      	add	r7, sp, #0
 80035b2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80035b4:	bf00      	nop
 80035b6:	370c      	adds	r7, #12
 80035b8:	46bd      	mov	sp, r7
 80035ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035be:	4770      	bx	lr

080035c0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80035c0:	b580      	push	{r7, lr}
 80035c2:	b088      	sub	sp, #32
 80035c4:	af00      	add	r7, sp, #0
 80035c6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80035c8:	2300      	movs	r3, #0
 80035ca:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	689a      	ldr	r2, [r3, #8]
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	691b      	ldr	r3, [r3, #16]
 80035d4:	431a      	orrs	r2, r3
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	695b      	ldr	r3, [r3, #20]
 80035da:	431a      	orrs	r2, r3
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	69db      	ldr	r3, [r3, #28]
 80035e0:	4313      	orrs	r3, r2
 80035e2:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	681a      	ldr	r2, [r3, #0]
 80035ea:	4ba7      	ldr	r3, [pc, #668]	; (8003888 <UART_SetConfig+0x2c8>)
 80035ec:	4013      	ands	r3, r2
 80035ee:	687a      	ldr	r2, [r7, #4]
 80035f0:	6812      	ldr	r2, [r2, #0]
 80035f2:	6979      	ldr	r1, [r7, #20]
 80035f4:	430b      	orrs	r3, r1
 80035f6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	685b      	ldr	r3, [r3, #4]
 80035fe:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	68da      	ldr	r2, [r3, #12]
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	430a      	orrs	r2, r1
 800360c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	699b      	ldr	r3, [r3, #24]
 8003612:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	6a1b      	ldr	r3, [r3, #32]
 8003618:	697a      	ldr	r2, [r7, #20]
 800361a:	4313      	orrs	r3, r2
 800361c:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	689b      	ldr	r3, [r3, #8]
 8003624:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	697a      	ldr	r2, [r7, #20]
 800362e:	430a      	orrs	r2, r1
 8003630:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	4a95      	ldr	r2, [pc, #596]	; (800388c <UART_SetConfig+0x2cc>)
 8003638:	4293      	cmp	r3, r2
 800363a:	d120      	bne.n	800367e <UART_SetConfig+0xbe>
 800363c:	4b94      	ldr	r3, [pc, #592]	; (8003890 <UART_SetConfig+0x2d0>)
 800363e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003642:	f003 0303 	and.w	r3, r3, #3
 8003646:	2b03      	cmp	r3, #3
 8003648:	d816      	bhi.n	8003678 <UART_SetConfig+0xb8>
 800364a:	a201      	add	r2, pc, #4	; (adr r2, 8003650 <UART_SetConfig+0x90>)
 800364c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003650:	08003661 	.word	0x08003661
 8003654:	0800366d 	.word	0x0800366d
 8003658:	08003667 	.word	0x08003667
 800365c:	08003673 	.word	0x08003673
 8003660:	2301      	movs	r3, #1
 8003662:	77fb      	strb	r3, [r7, #31]
 8003664:	e14f      	b.n	8003906 <UART_SetConfig+0x346>
 8003666:	2302      	movs	r3, #2
 8003668:	77fb      	strb	r3, [r7, #31]
 800366a:	e14c      	b.n	8003906 <UART_SetConfig+0x346>
 800366c:	2304      	movs	r3, #4
 800366e:	77fb      	strb	r3, [r7, #31]
 8003670:	e149      	b.n	8003906 <UART_SetConfig+0x346>
 8003672:	2308      	movs	r3, #8
 8003674:	77fb      	strb	r3, [r7, #31]
 8003676:	e146      	b.n	8003906 <UART_SetConfig+0x346>
 8003678:	2310      	movs	r3, #16
 800367a:	77fb      	strb	r3, [r7, #31]
 800367c:	e143      	b.n	8003906 <UART_SetConfig+0x346>
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	4a84      	ldr	r2, [pc, #528]	; (8003894 <UART_SetConfig+0x2d4>)
 8003684:	4293      	cmp	r3, r2
 8003686:	d132      	bne.n	80036ee <UART_SetConfig+0x12e>
 8003688:	4b81      	ldr	r3, [pc, #516]	; (8003890 <UART_SetConfig+0x2d0>)
 800368a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800368e:	f003 030c 	and.w	r3, r3, #12
 8003692:	2b0c      	cmp	r3, #12
 8003694:	d828      	bhi.n	80036e8 <UART_SetConfig+0x128>
 8003696:	a201      	add	r2, pc, #4	; (adr r2, 800369c <UART_SetConfig+0xdc>)
 8003698:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800369c:	080036d1 	.word	0x080036d1
 80036a0:	080036e9 	.word	0x080036e9
 80036a4:	080036e9 	.word	0x080036e9
 80036a8:	080036e9 	.word	0x080036e9
 80036ac:	080036dd 	.word	0x080036dd
 80036b0:	080036e9 	.word	0x080036e9
 80036b4:	080036e9 	.word	0x080036e9
 80036b8:	080036e9 	.word	0x080036e9
 80036bc:	080036d7 	.word	0x080036d7
 80036c0:	080036e9 	.word	0x080036e9
 80036c4:	080036e9 	.word	0x080036e9
 80036c8:	080036e9 	.word	0x080036e9
 80036cc:	080036e3 	.word	0x080036e3
 80036d0:	2300      	movs	r3, #0
 80036d2:	77fb      	strb	r3, [r7, #31]
 80036d4:	e117      	b.n	8003906 <UART_SetConfig+0x346>
 80036d6:	2302      	movs	r3, #2
 80036d8:	77fb      	strb	r3, [r7, #31]
 80036da:	e114      	b.n	8003906 <UART_SetConfig+0x346>
 80036dc:	2304      	movs	r3, #4
 80036de:	77fb      	strb	r3, [r7, #31]
 80036e0:	e111      	b.n	8003906 <UART_SetConfig+0x346>
 80036e2:	2308      	movs	r3, #8
 80036e4:	77fb      	strb	r3, [r7, #31]
 80036e6:	e10e      	b.n	8003906 <UART_SetConfig+0x346>
 80036e8:	2310      	movs	r3, #16
 80036ea:	77fb      	strb	r3, [r7, #31]
 80036ec:	e10b      	b.n	8003906 <UART_SetConfig+0x346>
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	4a69      	ldr	r2, [pc, #420]	; (8003898 <UART_SetConfig+0x2d8>)
 80036f4:	4293      	cmp	r3, r2
 80036f6:	d120      	bne.n	800373a <UART_SetConfig+0x17a>
 80036f8:	4b65      	ldr	r3, [pc, #404]	; (8003890 <UART_SetConfig+0x2d0>)
 80036fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80036fe:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8003702:	2b30      	cmp	r3, #48	; 0x30
 8003704:	d013      	beq.n	800372e <UART_SetConfig+0x16e>
 8003706:	2b30      	cmp	r3, #48	; 0x30
 8003708:	d814      	bhi.n	8003734 <UART_SetConfig+0x174>
 800370a:	2b20      	cmp	r3, #32
 800370c:	d009      	beq.n	8003722 <UART_SetConfig+0x162>
 800370e:	2b20      	cmp	r3, #32
 8003710:	d810      	bhi.n	8003734 <UART_SetConfig+0x174>
 8003712:	2b00      	cmp	r3, #0
 8003714:	d002      	beq.n	800371c <UART_SetConfig+0x15c>
 8003716:	2b10      	cmp	r3, #16
 8003718:	d006      	beq.n	8003728 <UART_SetConfig+0x168>
 800371a:	e00b      	b.n	8003734 <UART_SetConfig+0x174>
 800371c:	2300      	movs	r3, #0
 800371e:	77fb      	strb	r3, [r7, #31]
 8003720:	e0f1      	b.n	8003906 <UART_SetConfig+0x346>
 8003722:	2302      	movs	r3, #2
 8003724:	77fb      	strb	r3, [r7, #31]
 8003726:	e0ee      	b.n	8003906 <UART_SetConfig+0x346>
 8003728:	2304      	movs	r3, #4
 800372a:	77fb      	strb	r3, [r7, #31]
 800372c:	e0eb      	b.n	8003906 <UART_SetConfig+0x346>
 800372e:	2308      	movs	r3, #8
 8003730:	77fb      	strb	r3, [r7, #31]
 8003732:	e0e8      	b.n	8003906 <UART_SetConfig+0x346>
 8003734:	2310      	movs	r3, #16
 8003736:	77fb      	strb	r3, [r7, #31]
 8003738:	e0e5      	b.n	8003906 <UART_SetConfig+0x346>
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	4a57      	ldr	r2, [pc, #348]	; (800389c <UART_SetConfig+0x2dc>)
 8003740:	4293      	cmp	r3, r2
 8003742:	d120      	bne.n	8003786 <UART_SetConfig+0x1c6>
 8003744:	4b52      	ldr	r3, [pc, #328]	; (8003890 <UART_SetConfig+0x2d0>)
 8003746:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800374a:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800374e:	2bc0      	cmp	r3, #192	; 0xc0
 8003750:	d013      	beq.n	800377a <UART_SetConfig+0x1ba>
 8003752:	2bc0      	cmp	r3, #192	; 0xc0
 8003754:	d814      	bhi.n	8003780 <UART_SetConfig+0x1c0>
 8003756:	2b80      	cmp	r3, #128	; 0x80
 8003758:	d009      	beq.n	800376e <UART_SetConfig+0x1ae>
 800375a:	2b80      	cmp	r3, #128	; 0x80
 800375c:	d810      	bhi.n	8003780 <UART_SetConfig+0x1c0>
 800375e:	2b00      	cmp	r3, #0
 8003760:	d002      	beq.n	8003768 <UART_SetConfig+0x1a8>
 8003762:	2b40      	cmp	r3, #64	; 0x40
 8003764:	d006      	beq.n	8003774 <UART_SetConfig+0x1b4>
 8003766:	e00b      	b.n	8003780 <UART_SetConfig+0x1c0>
 8003768:	2300      	movs	r3, #0
 800376a:	77fb      	strb	r3, [r7, #31]
 800376c:	e0cb      	b.n	8003906 <UART_SetConfig+0x346>
 800376e:	2302      	movs	r3, #2
 8003770:	77fb      	strb	r3, [r7, #31]
 8003772:	e0c8      	b.n	8003906 <UART_SetConfig+0x346>
 8003774:	2304      	movs	r3, #4
 8003776:	77fb      	strb	r3, [r7, #31]
 8003778:	e0c5      	b.n	8003906 <UART_SetConfig+0x346>
 800377a:	2308      	movs	r3, #8
 800377c:	77fb      	strb	r3, [r7, #31]
 800377e:	e0c2      	b.n	8003906 <UART_SetConfig+0x346>
 8003780:	2310      	movs	r3, #16
 8003782:	77fb      	strb	r3, [r7, #31]
 8003784:	e0bf      	b.n	8003906 <UART_SetConfig+0x346>
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	4a45      	ldr	r2, [pc, #276]	; (80038a0 <UART_SetConfig+0x2e0>)
 800378c:	4293      	cmp	r3, r2
 800378e:	d125      	bne.n	80037dc <UART_SetConfig+0x21c>
 8003790:	4b3f      	ldr	r3, [pc, #252]	; (8003890 <UART_SetConfig+0x2d0>)
 8003792:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003796:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800379a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800379e:	d017      	beq.n	80037d0 <UART_SetConfig+0x210>
 80037a0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80037a4:	d817      	bhi.n	80037d6 <UART_SetConfig+0x216>
 80037a6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80037aa:	d00b      	beq.n	80037c4 <UART_SetConfig+0x204>
 80037ac:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80037b0:	d811      	bhi.n	80037d6 <UART_SetConfig+0x216>
 80037b2:	2b00      	cmp	r3, #0
 80037b4:	d003      	beq.n	80037be <UART_SetConfig+0x1fe>
 80037b6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80037ba:	d006      	beq.n	80037ca <UART_SetConfig+0x20a>
 80037bc:	e00b      	b.n	80037d6 <UART_SetConfig+0x216>
 80037be:	2300      	movs	r3, #0
 80037c0:	77fb      	strb	r3, [r7, #31]
 80037c2:	e0a0      	b.n	8003906 <UART_SetConfig+0x346>
 80037c4:	2302      	movs	r3, #2
 80037c6:	77fb      	strb	r3, [r7, #31]
 80037c8:	e09d      	b.n	8003906 <UART_SetConfig+0x346>
 80037ca:	2304      	movs	r3, #4
 80037cc:	77fb      	strb	r3, [r7, #31]
 80037ce:	e09a      	b.n	8003906 <UART_SetConfig+0x346>
 80037d0:	2308      	movs	r3, #8
 80037d2:	77fb      	strb	r3, [r7, #31]
 80037d4:	e097      	b.n	8003906 <UART_SetConfig+0x346>
 80037d6:	2310      	movs	r3, #16
 80037d8:	77fb      	strb	r3, [r7, #31]
 80037da:	e094      	b.n	8003906 <UART_SetConfig+0x346>
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	4a30      	ldr	r2, [pc, #192]	; (80038a4 <UART_SetConfig+0x2e4>)
 80037e2:	4293      	cmp	r3, r2
 80037e4:	d125      	bne.n	8003832 <UART_SetConfig+0x272>
 80037e6:	4b2a      	ldr	r3, [pc, #168]	; (8003890 <UART_SetConfig+0x2d0>)
 80037e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80037ec:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80037f0:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80037f4:	d017      	beq.n	8003826 <UART_SetConfig+0x266>
 80037f6:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80037fa:	d817      	bhi.n	800382c <UART_SetConfig+0x26c>
 80037fc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003800:	d00b      	beq.n	800381a <UART_SetConfig+0x25a>
 8003802:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003806:	d811      	bhi.n	800382c <UART_SetConfig+0x26c>
 8003808:	2b00      	cmp	r3, #0
 800380a:	d003      	beq.n	8003814 <UART_SetConfig+0x254>
 800380c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003810:	d006      	beq.n	8003820 <UART_SetConfig+0x260>
 8003812:	e00b      	b.n	800382c <UART_SetConfig+0x26c>
 8003814:	2301      	movs	r3, #1
 8003816:	77fb      	strb	r3, [r7, #31]
 8003818:	e075      	b.n	8003906 <UART_SetConfig+0x346>
 800381a:	2302      	movs	r3, #2
 800381c:	77fb      	strb	r3, [r7, #31]
 800381e:	e072      	b.n	8003906 <UART_SetConfig+0x346>
 8003820:	2304      	movs	r3, #4
 8003822:	77fb      	strb	r3, [r7, #31]
 8003824:	e06f      	b.n	8003906 <UART_SetConfig+0x346>
 8003826:	2308      	movs	r3, #8
 8003828:	77fb      	strb	r3, [r7, #31]
 800382a:	e06c      	b.n	8003906 <UART_SetConfig+0x346>
 800382c:	2310      	movs	r3, #16
 800382e:	77fb      	strb	r3, [r7, #31]
 8003830:	e069      	b.n	8003906 <UART_SetConfig+0x346>
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	4a1c      	ldr	r2, [pc, #112]	; (80038a8 <UART_SetConfig+0x2e8>)
 8003838:	4293      	cmp	r3, r2
 800383a:	d137      	bne.n	80038ac <UART_SetConfig+0x2ec>
 800383c:	4b14      	ldr	r3, [pc, #80]	; (8003890 <UART_SetConfig+0x2d0>)
 800383e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003842:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8003846:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800384a:	d017      	beq.n	800387c <UART_SetConfig+0x2bc>
 800384c:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8003850:	d817      	bhi.n	8003882 <UART_SetConfig+0x2c2>
 8003852:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003856:	d00b      	beq.n	8003870 <UART_SetConfig+0x2b0>
 8003858:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800385c:	d811      	bhi.n	8003882 <UART_SetConfig+0x2c2>
 800385e:	2b00      	cmp	r3, #0
 8003860:	d003      	beq.n	800386a <UART_SetConfig+0x2aa>
 8003862:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003866:	d006      	beq.n	8003876 <UART_SetConfig+0x2b6>
 8003868:	e00b      	b.n	8003882 <UART_SetConfig+0x2c2>
 800386a:	2300      	movs	r3, #0
 800386c:	77fb      	strb	r3, [r7, #31]
 800386e:	e04a      	b.n	8003906 <UART_SetConfig+0x346>
 8003870:	2302      	movs	r3, #2
 8003872:	77fb      	strb	r3, [r7, #31]
 8003874:	e047      	b.n	8003906 <UART_SetConfig+0x346>
 8003876:	2304      	movs	r3, #4
 8003878:	77fb      	strb	r3, [r7, #31]
 800387a:	e044      	b.n	8003906 <UART_SetConfig+0x346>
 800387c:	2308      	movs	r3, #8
 800387e:	77fb      	strb	r3, [r7, #31]
 8003880:	e041      	b.n	8003906 <UART_SetConfig+0x346>
 8003882:	2310      	movs	r3, #16
 8003884:	77fb      	strb	r3, [r7, #31]
 8003886:	e03e      	b.n	8003906 <UART_SetConfig+0x346>
 8003888:	efff69f3 	.word	0xefff69f3
 800388c:	40011000 	.word	0x40011000
 8003890:	40023800 	.word	0x40023800
 8003894:	40004400 	.word	0x40004400
 8003898:	40004800 	.word	0x40004800
 800389c:	40004c00 	.word	0x40004c00
 80038a0:	40005000 	.word	0x40005000
 80038a4:	40011400 	.word	0x40011400
 80038a8:	40007800 	.word	0x40007800
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	4a71      	ldr	r2, [pc, #452]	; (8003a78 <UART_SetConfig+0x4b8>)
 80038b2:	4293      	cmp	r3, r2
 80038b4:	d125      	bne.n	8003902 <UART_SetConfig+0x342>
 80038b6:	4b71      	ldr	r3, [pc, #452]	; (8003a7c <UART_SetConfig+0x4bc>)
 80038b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80038bc:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80038c0:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80038c4:	d017      	beq.n	80038f6 <UART_SetConfig+0x336>
 80038c6:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80038ca:	d817      	bhi.n	80038fc <UART_SetConfig+0x33c>
 80038cc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80038d0:	d00b      	beq.n	80038ea <UART_SetConfig+0x32a>
 80038d2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80038d6:	d811      	bhi.n	80038fc <UART_SetConfig+0x33c>
 80038d8:	2b00      	cmp	r3, #0
 80038da:	d003      	beq.n	80038e4 <UART_SetConfig+0x324>
 80038dc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80038e0:	d006      	beq.n	80038f0 <UART_SetConfig+0x330>
 80038e2:	e00b      	b.n	80038fc <UART_SetConfig+0x33c>
 80038e4:	2300      	movs	r3, #0
 80038e6:	77fb      	strb	r3, [r7, #31]
 80038e8:	e00d      	b.n	8003906 <UART_SetConfig+0x346>
 80038ea:	2302      	movs	r3, #2
 80038ec:	77fb      	strb	r3, [r7, #31]
 80038ee:	e00a      	b.n	8003906 <UART_SetConfig+0x346>
 80038f0:	2304      	movs	r3, #4
 80038f2:	77fb      	strb	r3, [r7, #31]
 80038f4:	e007      	b.n	8003906 <UART_SetConfig+0x346>
 80038f6:	2308      	movs	r3, #8
 80038f8:	77fb      	strb	r3, [r7, #31]
 80038fa:	e004      	b.n	8003906 <UART_SetConfig+0x346>
 80038fc:	2310      	movs	r3, #16
 80038fe:	77fb      	strb	r3, [r7, #31]
 8003900:	e001      	b.n	8003906 <UART_SetConfig+0x346>
 8003902:	2310      	movs	r3, #16
 8003904:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	69db      	ldr	r3, [r3, #28]
 800390a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800390e:	d15a      	bne.n	80039c6 <UART_SetConfig+0x406>
  {
    switch (clocksource)
 8003910:	7ffb      	ldrb	r3, [r7, #31]
 8003912:	2b08      	cmp	r3, #8
 8003914:	d827      	bhi.n	8003966 <UART_SetConfig+0x3a6>
 8003916:	a201      	add	r2, pc, #4	; (adr r2, 800391c <UART_SetConfig+0x35c>)
 8003918:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800391c:	08003941 	.word	0x08003941
 8003920:	08003949 	.word	0x08003949
 8003924:	08003951 	.word	0x08003951
 8003928:	08003967 	.word	0x08003967
 800392c:	08003957 	.word	0x08003957
 8003930:	08003967 	.word	0x08003967
 8003934:	08003967 	.word	0x08003967
 8003938:	08003967 	.word	0x08003967
 800393c:	0800395f 	.word	0x0800395f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003940:	f7fe fac8 	bl	8001ed4 <HAL_RCC_GetPCLK1Freq>
 8003944:	61b8      	str	r0, [r7, #24]
        break;
 8003946:	e013      	b.n	8003970 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003948:	f7fe fad8 	bl	8001efc <HAL_RCC_GetPCLK2Freq>
 800394c:	61b8      	str	r0, [r7, #24]
        break;
 800394e:	e00f      	b.n	8003970 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003950:	4b4b      	ldr	r3, [pc, #300]	; (8003a80 <UART_SetConfig+0x4c0>)
 8003952:	61bb      	str	r3, [r7, #24]
        break;
 8003954:	e00c      	b.n	8003970 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003956:	f7fe f9d1 	bl	8001cfc <HAL_RCC_GetSysClockFreq>
 800395a:	61b8      	str	r0, [r7, #24]
        break;
 800395c:	e008      	b.n	8003970 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800395e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003962:	61bb      	str	r3, [r7, #24]
        break;
 8003964:	e004      	b.n	8003970 <UART_SetConfig+0x3b0>
      default:
        pclk = 0U;
 8003966:	2300      	movs	r3, #0
 8003968:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800396a:	2301      	movs	r3, #1
 800396c:	77bb      	strb	r3, [r7, #30]
        break;
 800396e:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003970:	69bb      	ldr	r3, [r7, #24]
 8003972:	2b00      	cmp	r3, #0
 8003974:	d074      	beq.n	8003a60 <UART_SetConfig+0x4a0>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003976:	69bb      	ldr	r3, [r7, #24]
 8003978:	005a      	lsls	r2, r3, #1
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	685b      	ldr	r3, [r3, #4]
 800397e:	085b      	lsrs	r3, r3, #1
 8003980:	441a      	add	r2, r3
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	685b      	ldr	r3, [r3, #4]
 8003986:	fbb2 f3f3 	udiv	r3, r2, r3
 800398a:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800398c:	693b      	ldr	r3, [r7, #16]
 800398e:	2b0f      	cmp	r3, #15
 8003990:	d916      	bls.n	80039c0 <UART_SetConfig+0x400>
 8003992:	693b      	ldr	r3, [r7, #16]
 8003994:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003998:	d212      	bcs.n	80039c0 <UART_SetConfig+0x400>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800399a:	693b      	ldr	r3, [r7, #16]
 800399c:	b29b      	uxth	r3, r3
 800399e:	f023 030f 	bic.w	r3, r3, #15
 80039a2:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80039a4:	693b      	ldr	r3, [r7, #16]
 80039a6:	085b      	lsrs	r3, r3, #1
 80039a8:	b29b      	uxth	r3, r3
 80039aa:	f003 0307 	and.w	r3, r3, #7
 80039ae:	b29a      	uxth	r2, r3
 80039b0:	89fb      	ldrh	r3, [r7, #14]
 80039b2:	4313      	orrs	r3, r2
 80039b4:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	89fa      	ldrh	r2, [r7, #14]
 80039bc:	60da      	str	r2, [r3, #12]
 80039be:	e04f      	b.n	8003a60 <UART_SetConfig+0x4a0>
      }
      else
      {
        ret = HAL_ERROR;
 80039c0:	2301      	movs	r3, #1
 80039c2:	77bb      	strb	r3, [r7, #30]
 80039c4:	e04c      	b.n	8003a60 <UART_SetConfig+0x4a0>
      }
    }
  }
  else
  {
    switch (clocksource)
 80039c6:	7ffb      	ldrb	r3, [r7, #31]
 80039c8:	2b08      	cmp	r3, #8
 80039ca:	d828      	bhi.n	8003a1e <UART_SetConfig+0x45e>
 80039cc:	a201      	add	r2, pc, #4	; (adr r2, 80039d4 <UART_SetConfig+0x414>)
 80039ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80039d2:	bf00      	nop
 80039d4:	080039f9 	.word	0x080039f9
 80039d8:	08003a01 	.word	0x08003a01
 80039dc:	08003a09 	.word	0x08003a09
 80039e0:	08003a1f 	.word	0x08003a1f
 80039e4:	08003a0f 	.word	0x08003a0f
 80039e8:	08003a1f 	.word	0x08003a1f
 80039ec:	08003a1f 	.word	0x08003a1f
 80039f0:	08003a1f 	.word	0x08003a1f
 80039f4:	08003a17 	.word	0x08003a17
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80039f8:	f7fe fa6c 	bl	8001ed4 <HAL_RCC_GetPCLK1Freq>
 80039fc:	61b8      	str	r0, [r7, #24]
        break;
 80039fe:	e013      	b.n	8003a28 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003a00:	f7fe fa7c 	bl	8001efc <HAL_RCC_GetPCLK2Freq>
 8003a04:	61b8      	str	r0, [r7, #24]
        break;
 8003a06:	e00f      	b.n	8003a28 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003a08:	4b1d      	ldr	r3, [pc, #116]	; (8003a80 <UART_SetConfig+0x4c0>)
 8003a0a:	61bb      	str	r3, [r7, #24]
        break;
 8003a0c:	e00c      	b.n	8003a28 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003a0e:	f7fe f975 	bl	8001cfc <HAL_RCC_GetSysClockFreq>
 8003a12:	61b8      	str	r0, [r7, #24]
        break;
 8003a14:	e008      	b.n	8003a28 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003a16:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003a1a:	61bb      	str	r3, [r7, #24]
        break;
 8003a1c:	e004      	b.n	8003a28 <UART_SetConfig+0x468>
      default:
        pclk = 0U;
 8003a1e:	2300      	movs	r3, #0
 8003a20:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003a22:	2301      	movs	r3, #1
 8003a24:	77bb      	strb	r3, [r7, #30]
        break;
 8003a26:	bf00      	nop
    }

    if (pclk != 0U)
 8003a28:	69bb      	ldr	r3, [r7, #24]
 8003a2a:	2b00      	cmp	r3, #0
 8003a2c:	d018      	beq.n	8003a60 <UART_SetConfig+0x4a0>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	685b      	ldr	r3, [r3, #4]
 8003a32:	085a      	lsrs	r2, r3, #1
 8003a34:	69bb      	ldr	r3, [r7, #24]
 8003a36:	441a      	add	r2, r3
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	685b      	ldr	r3, [r3, #4]
 8003a3c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a40:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003a42:	693b      	ldr	r3, [r7, #16]
 8003a44:	2b0f      	cmp	r3, #15
 8003a46:	d909      	bls.n	8003a5c <UART_SetConfig+0x49c>
 8003a48:	693b      	ldr	r3, [r7, #16]
 8003a4a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003a4e:	d205      	bcs.n	8003a5c <UART_SetConfig+0x49c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003a50:	693b      	ldr	r3, [r7, #16]
 8003a52:	b29a      	uxth	r2, r3
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	60da      	str	r2, [r3, #12]
 8003a5a:	e001      	b.n	8003a60 <UART_SetConfig+0x4a0>
      }
      else
      {
        ret = HAL_ERROR;
 8003a5c:	2301      	movs	r3, #1
 8003a5e:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	2200      	movs	r2, #0
 8003a64:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	2200      	movs	r2, #0
 8003a6a:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8003a6c:	7fbb      	ldrb	r3, [r7, #30]
}
 8003a6e:	4618      	mov	r0, r3
 8003a70:	3720      	adds	r7, #32
 8003a72:	46bd      	mov	sp, r7
 8003a74:	bd80      	pop	{r7, pc}
 8003a76:	bf00      	nop
 8003a78:	40007c00 	.word	0x40007c00
 8003a7c:	40023800 	.word	0x40023800
 8003a80:	00f42400 	.word	0x00f42400

08003a84 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003a84:	b480      	push	{r7}
 8003a86:	b083      	sub	sp, #12
 8003a88:	af00      	add	r7, sp, #0
 8003a8a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a90:	f003 0301 	and.w	r3, r3, #1
 8003a94:	2b00      	cmp	r3, #0
 8003a96:	d00a      	beq.n	8003aae <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	685b      	ldr	r3, [r3, #4]
 8003a9e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	430a      	orrs	r2, r1
 8003aac:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ab2:	f003 0302 	and.w	r3, r3, #2
 8003ab6:	2b00      	cmp	r3, #0
 8003ab8:	d00a      	beq.n	8003ad0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	685b      	ldr	r3, [r3, #4]
 8003ac0:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	430a      	orrs	r2, r1
 8003ace:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ad4:	f003 0304 	and.w	r3, r3, #4
 8003ad8:	2b00      	cmp	r3, #0
 8003ada:	d00a      	beq.n	8003af2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	685b      	ldr	r3, [r3, #4]
 8003ae2:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	430a      	orrs	r2, r1
 8003af0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003af6:	f003 0308 	and.w	r3, r3, #8
 8003afa:	2b00      	cmp	r3, #0
 8003afc:	d00a      	beq.n	8003b14 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	685b      	ldr	r3, [r3, #4]
 8003b04:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	430a      	orrs	r2, r1
 8003b12:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b18:	f003 0310 	and.w	r3, r3, #16
 8003b1c:	2b00      	cmp	r3, #0
 8003b1e:	d00a      	beq.n	8003b36 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	689b      	ldr	r3, [r3, #8]
 8003b26:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	430a      	orrs	r2, r1
 8003b34:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b3a:	f003 0320 	and.w	r3, r3, #32
 8003b3e:	2b00      	cmp	r3, #0
 8003b40:	d00a      	beq.n	8003b58 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	689b      	ldr	r3, [r3, #8]
 8003b48:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	430a      	orrs	r2, r1
 8003b56:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b5c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b60:	2b00      	cmp	r3, #0
 8003b62:	d01a      	beq.n	8003b9a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	685b      	ldr	r3, [r3, #4]
 8003b6a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	430a      	orrs	r2, r1
 8003b78:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b7e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003b82:	d10a      	bne.n	8003b9a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	685b      	ldr	r3, [r3, #4]
 8003b8a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	430a      	orrs	r2, r1
 8003b98:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b9e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003ba2:	2b00      	cmp	r3, #0
 8003ba4:	d00a      	beq.n	8003bbc <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	685b      	ldr	r3, [r3, #4]
 8003bac:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	430a      	orrs	r2, r1
 8003bba:	605a      	str	r2, [r3, #4]
  }
}
 8003bbc:	bf00      	nop
 8003bbe:	370c      	adds	r7, #12
 8003bc0:	46bd      	mov	sp, r7
 8003bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bc6:	4770      	bx	lr

08003bc8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003bc8:	b580      	push	{r7, lr}
 8003bca:	b086      	sub	sp, #24
 8003bcc:	af02      	add	r7, sp, #8
 8003bce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	2200      	movs	r2, #0
 8003bd4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003bd8:	f7fd f960 	bl	8000e9c <HAL_GetTick>
 8003bdc:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	f003 0308 	and.w	r3, r3, #8
 8003be8:	2b08      	cmp	r3, #8
 8003bea:	d10e      	bne.n	8003c0a <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003bec:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003bf0:	9300      	str	r3, [sp, #0]
 8003bf2:	68fb      	ldr	r3, [r7, #12]
 8003bf4:	2200      	movs	r2, #0
 8003bf6:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8003bfa:	6878      	ldr	r0, [r7, #4]
 8003bfc:	f000 f82d 	bl	8003c5a <UART_WaitOnFlagUntilTimeout>
 8003c00:	4603      	mov	r3, r0
 8003c02:	2b00      	cmp	r3, #0
 8003c04:	d001      	beq.n	8003c0a <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003c06:	2303      	movs	r3, #3
 8003c08:	e023      	b.n	8003c52 <UART_CheckIdleState+0x8a>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	f003 0304 	and.w	r3, r3, #4
 8003c14:	2b04      	cmp	r3, #4
 8003c16:	d10e      	bne.n	8003c36 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003c18:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003c1c:	9300      	str	r3, [sp, #0]
 8003c1e:	68fb      	ldr	r3, [r7, #12]
 8003c20:	2200      	movs	r2, #0
 8003c22:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8003c26:	6878      	ldr	r0, [r7, #4]
 8003c28:	f000 f817 	bl	8003c5a <UART_WaitOnFlagUntilTimeout>
 8003c2c:	4603      	mov	r3, r0
 8003c2e:	2b00      	cmp	r3, #0
 8003c30:	d001      	beq.n	8003c36 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003c32:	2303      	movs	r3, #3
 8003c34:	e00d      	b.n	8003c52 <UART_CheckIdleState+0x8a>
    }
  }
#endif

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	2220      	movs	r2, #32
 8003c3a:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	2220      	movs	r2, #32
 8003c40:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	2200      	movs	r2, #0
 8003c46:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	2200      	movs	r2, #0
 8003c4c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8003c50:	2300      	movs	r3, #0
}
 8003c52:	4618      	mov	r0, r3
 8003c54:	3710      	adds	r7, #16
 8003c56:	46bd      	mov	sp, r7
 8003c58:	bd80      	pop	{r7, pc}

08003c5a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003c5a:	b580      	push	{r7, lr}
 8003c5c:	b09c      	sub	sp, #112	; 0x70
 8003c5e:	af00      	add	r7, sp, #0
 8003c60:	60f8      	str	r0, [r7, #12]
 8003c62:	60b9      	str	r1, [r7, #8]
 8003c64:	603b      	str	r3, [r7, #0]
 8003c66:	4613      	mov	r3, r2
 8003c68:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003c6a:	e0a5      	b.n	8003db8 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003c6c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003c6e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c72:	f000 80a1 	beq.w	8003db8 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003c76:	f7fd f911 	bl	8000e9c <HAL_GetTick>
 8003c7a:	4602      	mov	r2, r0
 8003c7c:	683b      	ldr	r3, [r7, #0]
 8003c7e:	1ad3      	subs	r3, r2, r3
 8003c80:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8003c82:	429a      	cmp	r2, r3
 8003c84:	d302      	bcc.n	8003c8c <UART_WaitOnFlagUntilTimeout+0x32>
 8003c86:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003c88:	2b00      	cmp	r3, #0
 8003c8a:	d13e      	bne.n	8003d0a <UART_WaitOnFlagUntilTimeout+0xb0>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003c8c:	68fb      	ldr	r3, [r7, #12]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c92:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003c94:	e853 3f00 	ldrex	r3, [r3]
 8003c98:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8003c9a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003c9c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003ca0:	667b      	str	r3, [r7, #100]	; 0x64
 8003ca2:	68fb      	ldr	r3, [r7, #12]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	461a      	mov	r2, r3
 8003ca8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003caa:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003cac:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003cae:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8003cb0:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8003cb2:	e841 2300 	strex	r3, r2, [r1]
 8003cb6:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8003cb8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003cba:	2b00      	cmp	r3, #0
 8003cbc:	d1e6      	bne.n	8003c8c <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003cbe:	68fb      	ldr	r3, [r7, #12]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	3308      	adds	r3, #8
 8003cc4:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003cc6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003cc8:	e853 3f00 	ldrex	r3, [r3]
 8003ccc:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003cce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003cd0:	f023 0301 	bic.w	r3, r3, #1
 8003cd4:	663b      	str	r3, [r7, #96]	; 0x60
 8003cd6:	68fb      	ldr	r3, [r7, #12]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	3308      	adds	r3, #8
 8003cdc:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8003cde:	64ba      	str	r2, [r7, #72]	; 0x48
 8003ce0:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ce2:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8003ce4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003ce6:	e841 2300 	strex	r3, r2, [r1]
 8003cea:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8003cec:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003cee:	2b00      	cmp	r3, #0
 8003cf0:	d1e5      	bne.n	8003cbe <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8003cf2:	68fb      	ldr	r3, [r7, #12]
 8003cf4:	2220      	movs	r2, #32
 8003cf6:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8003cf8:	68fb      	ldr	r3, [r7, #12]
 8003cfa:	2220      	movs	r2, #32
 8003cfc:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8003cfe:	68fb      	ldr	r3, [r7, #12]
 8003d00:	2200      	movs	r2, #0
 8003d02:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8003d06:	2303      	movs	r3, #3
 8003d08:	e067      	b.n	8003dda <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003d0a:	68fb      	ldr	r3, [r7, #12]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	f003 0304 	and.w	r3, r3, #4
 8003d14:	2b00      	cmp	r3, #0
 8003d16:	d04f      	beq.n	8003db8 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003d18:	68fb      	ldr	r3, [r7, #12]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	69db      	ldr	r3, [r3, #28]
 8003d1e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003d22:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003d26:	d147      	bne.n	8003db8 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003d28:	68fb      	ldr	r3, [r7, #12]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003d30:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003d32:	68fb      	ldr	r3, [r7, #12]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d3a:	e853 3f00 	ldrex	r3, [r3]
 8003d3e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003d40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d42:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003d46:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	461a      	mov	r2, r3
 8003d4e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003d50:	637b      	str	r3, [r7, #52]	; 0x34
 8003d52:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d54:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003d56:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003d58:	e841 2300 	strex	r3, r2, [r1]
 8003d5c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8003d5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d60:	2b00      	cmp	r3, #0
 8003d62:	d1e6      	bne.n	8003d32 <UART_WaitOnFlagUntilTimeout+0xd8>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003d64:	68fb      	ldr	r3, [r7, #12]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	3308      	adds	r3, #8
 8003d6a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d6c:	697b      	ldr	r3, [r7, #20]
 8003d6e:	e853 3f00 	ldrex	r3, [r3]
 8003d72:	613b      	str	r3, [r7, #16]
   return(result);
 8003d74:	693b      	ldr	r3, [r7, #16]
 8003d76:	f023 0301 	bic.w	r3, r3, #1
 8003d7a:	66bb      	str	r3, [r7, #104]	; 0x68
 8003d7c:	68fb      	ldr	r3, [r7, #12]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	3308      	adds	r3, #8
 8003d82:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8003d84:	623a      	str	r2, [r7, #32]
 8003d86:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d88:	69f9      	ldr	r1, [r7, #28]
 8003d8a:	6a3a      	ldr	r2, [r7, #32]
 8003d8c:	e841 2300 	strex	r3, r2, [r1]
 8003d90:	61bb      	str	r3, [r7, #24]
   return(result);
 8003d92:	69bb      	ldr	r3, [r7, #24]
 8003d94:	2b00      	cmp	r3, #0
 8003d96:	d1e5      	bne.n	8003d64 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8003d98:	68fb      	ldr	r3, [r7, #12]
 8003d9a:	2220      	movs	r2, #32
 8003d9c:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8003d9e:	68fb      	ldr	r3, [r7, #12]
 8003da0:	2220      	movs	r2, #32
 8003da2:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003da4:	68fb      	ldr	r3, [r7, #12]
 8003da6:	2220      	movs	r2, #32
 8003da8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003dac:	68fb      	ldr	r3, [r7, #12]
 8003dae:	2200      	movs	r2, #0
 8003db0:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8003db4:	2303      	movs	r3, #3
 8003db6:	e010      	b.n	8003dda <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003db8:	68fb      	ldr	r3, [r7, #12]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	69da      	ldr	r2, [r3, #28]
 8003dbe:	68bb      	ldr	r3, [r7, #8]
 8003dc0:	4013      	ands	r3, r2
 8003dc2:	68ba      	ldr	r2, [r7, #8]
 8003dc4:	429a      	cmp	r2, r3
 8003dc6:	bf0c      	ite	eq
 8003dc8:	2301      	moveq	r3, #1
 8003dca:	2300      	movne	r3, #0
 8003dcc:	b2db      	uxtb	r3, r3
 8003dce:	461a      	mov	r2, r3
 8003dd0:	79fb      	ldrb	r3, [r7, #7]
 8003dd2:	429a      	cmp	r2, r3
 8003dd4:	f43f af4a 	beq.w	8003c6c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003dd8:	2300      	movs	r3, #0
}
 8003dda:	4618      	mov	r0, r3
 8003ddc:	3770      	adds	r7, #112	; 0x70
 8003dde:	46bd      	mov	sp, r7
 8003de0:	bd80      	pop	{r7, pc}
	...

08003de4 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003de4:	b480      	push	{r7}
 8003de6:	b097      	sub	sp, #92	; 0x5c
 8003de8:	af00      	add	r7, sp, #0
 8003dea:	60f8      	str	r0, [r7, #12]
 8003dec:	60b9      	str	r1, [r7, #8]
 8003dee:	4613      	mov	r3, r2
 8003df0:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8003df2:	68fb      	ldr	r3, [r7, #12]
 8003df4:	68ba      	ldr	r2, [r7, #8]
 8003df6:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 8003df8:	68fb      	ldr	r3, [r7, #12]
 8003dfa:	88fa      	ldrh	r2, [r7, #6]
 8003dfc:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 8003e00:	68fb      	ldr	r3, [r7, #12]
 8003e02:	88fa      	ldrh	r2, [r7, #6]
 8003e04:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 8003e08:	68fb      	ldr	r3, [r7, #12]
 8003e0a:	2200      	movs	r2, #0
 8003e0c:	665a      	str	r2, [r3, #100]	; 0x64

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8003e0e:	68fb      	ldr	r3, [r7, #12]
 8003e10:	689b      	ldr	r3, [r3, #8]
 8003e12:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003e16:	d10e      	bne.n	8003e36 <UART_Start_Receive_IT+0x52>
 8003e18:	68fb      	ldr	r3, [r7, #12]
 8003e1a:	691b      	ldr	r3, [r3, #16]
 8003e1c:	2b00      	cmp	r3, #0
 8003e1e:	d105      	bne.n	8003e2c <UART_Start_Receive_IT+0x48>
 8003e20:	68fb      	ldr	r3, [r7, #12]
 8003e22:	f240 12ff 	movw	r2, #511	; 0x1ff
 8003e26:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003e2a:	e02d      	b.n	8003e88 <UART_Start_Receive_IT+0xa4>
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	22ff      	movs	r2, #255	; 0xff
 8003e30:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003e34:	e028      	b.n	8003e88 <UART_Start_Receive_IT+0xa4>
 8003e36:	68fb      	ldr	r3, [r7, #12]
 8003e38:	689b      	ldr	r3, [r3, #8]
 8003e3a:	2b00      	cmp	r3, #0
 8003e3c:	d10d      	bne.n	8003e5a <UART_Start_Receive_IT+0x76>
 8003e3e:	68fb      	ldr	r3, [r7, #12]
 8003e40:	691b      	ldr	r3, [r3, #16]
 8003e42:	2b00      	cmp	r3, #0
 8003e44:	d104      	bne.n	8003e50 <UART_Start_Receive_IT+0x6c>
 8003e46:	68fb      	ldr	r3, [r7, #12]
 8003e48:	22ff      	movs	r2, #255	; 0xff
 8003e4a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003e4e:	e01b      	b.n	8003e88 <UART_Start_Receive_IT+0xa4>
 8003e50:	68fb      	ldr	r3, [r7, #12]
 8003e52:	227f      	movs	r2, #127	; 0x7f
 8003e54:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003e58:	e016      	b.n	8003e88 <UART_Start_Receive_IT+0xa4>
 8003e5a:	68fb      	ldr	r3, [r7, #12]
 8003e5c:	689b      	ldr	r3, [r3, #8]
 8003e5e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003e62:	d10d      	bne.n	8003e80 <UART_Start_Receive_IT+0x9c>
 8003e64:	68fb      	ldr	r3, [r7, #12]
 8003e66:	691b      	ldr	r3, [r3, #16]
 8003e68:	2b00      	cmp	r3, #0
 8003e6a:	d104      	bne.n	8003e76 <UART_Start_Receive_IT+0x92>
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	227f      	movs	r2, #127	; 0x7f
 8003e70:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003e74:	e008      	b.n	8003e88 <UART_Start_Receive_IT+0xa4>
 8003e76:	68fb      	ldr	r3, [r7, #12]
 8003e78:	223f      	movs	r2, #63	; 0x3f
 8003e7a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003e7e:	e003      	b.n	8003e88 <UART_Start_Receive_IT+0xa4>
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	2200      	movs	r2, #0
 8003e84:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003e88:	68fb      	ldr	r3, [r7, #12]
 8003e8a:	2200      	movs	r2, #0
 8003e8c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003e90:	68fb      	ldr	r3, [r7, #12]
 8003e92:	2222      	movs	r2, #34	; 0x22
 8003e94:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003e96:	68fb      	ldr	r3, [r7, #12]
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	3308      	adds	r3, #8
 8003e9c:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e9e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003ea0:	e853 3f00 	ldrex	r3, [r3]
 8003ea4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003ea6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003ea8:	f043 0301 	orr.w	r3, r3, #1
 8003eac:	657b      	str	r3, [r7, #84]	; 0x54
 8003eae:	68fb      	ldr	r3, [r7, #12]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	3308      	adds	r3, #8
 8003eb4:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8003eb6:	64ba      	str	r2, [r7, #72]	; 0x48
 8003eb8:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003eba:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8003ebc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003ebe:	e841 2300 	strex	r3, r2, [r1]
 8003ec2:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8003ec4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003ec6:	2b00      	cmp	r3, #0
 8003ec8:	d1e5      	bne.n	8003e96 <UART_Start_Receive_IT+0xb2>

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003eca:	68fb      	ldr	r3, [r7, #12]
 8003ecc:	689b      	ldr	r3, [r3, #8]
 8003ece:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003ed2:	d107      	bne.n	8003ee4 <UART_Start_Receive_IT+0x100>
 8003ed4:	68fb      	ldr	r3, [r7, #12]
 8003ed6:	691b      	ldr	r3, [r3, #16]
 8003ed8:	2b00      	cmp	r3, #0
 8003eda:	d103      	bne.n	8003ee4 <UART_Start_Receive_IT+0x100>
  {
    huart->RxISR = UART_RxISR_16BIT;
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	4a24      	ldr	r2, [pc, #144]	; (8003f70 <UART_Start_Receive_IT+0x18c>)
 8003ee0:	665a      	str	r2, [r3, #100]	; 0x64
 8003ee2:	e002      	b.n	8003eea <UART_Start_Receive_IT+0x106>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8003ee4:	68fb      	ldr	r3, [r7, #12]
 8003ee6:	4a23      	ldr	r2, [pc, #140]	; (8003f74 <UART_Start_Receive_IT+0x190>)
 8003ee8:	665a      	str	r2, [r3, #100]	; 0x64
  }

  __HAL_UNLOCK(huart);
 8003eea:	68fb      	ldr	r3, [r7, #12]
 8003eec:	2200      	movs	r2, #0
 8003eee:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8003ef2:	68fb      	ldr	r3, [r7, #12]
 8003ef4:	691b      	ldr	r3, [r3, #16]
 8003ef6:	2b00      	cmp	r3, #0
 8003ef8:	d019      	beq.n	8003f2e <UART_Start_Receive_IT+0x14a>
  { 
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8003efa:	68fb      	ldr	r3, [r7, #12]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f02:	e853 3f00 	ldrex	r3, [r3]
 8003f06:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003f08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f0a:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 8003f0e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003f10:	68fb      	ldr	r3, [r7, #12]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	461a      	mov	r2, r3
 8003f16:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003f18:	637b      	str	r3, [r7, #52]	; 0x34
 8003f1a:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f1c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003f1e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003f20:	e841 2300 	strex	r3, r2, [r1]
 8003f24:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8003f26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f28:	2b00      	cmp	r3, #0
 8003f2a:	d1e6      	bne.n	8003efa <UART_Start_Receive_IT+0x116>
 8003f2c:	e018      	b.n	8003f60 <UART_Start_Receive_IT+0x17c>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 8003f2e:	68fb      	ldr	r3, [r7, #12]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f34:	697b      	ldr	r3, [r7, #20]
 8003f36:	e853 3f00 	ldrex	r3, [r3]
 8003f3a:	613b      	str	r3, [r7, #16]
   return(result);
 8003f3c:	693b      	ldr	r3, [r7, #16]
 8003f3e:	f043 0320 	orr.w	r3, r3, #32
 8003f42:	653b      	str	r3, [r7, #80]	; 0x50
 8003f44:	68fb      	ldr	r3, [r7, #12]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	461a      	mov	r2, r3
 8003f4a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003f4c:	623b      	str	r3, [r7, #32]
 8003f4e:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f50:	69f9      	ldr	r1, [r7, #28]
 8003f52:	6a3a      	ldr	r2, [r7, #32]
 8003f54:	e841 2300 	strex	r3, r2, [r1]
 8003f58:	61bb      	str	r3, [r7, #24]
   return(result);
 8003f5a:	69bb      	ldr	r3, [r7, #24]
 8003f5c:	2b00      	cmp	r3, #0
 8003f5e:	d1e6      	bne.n	8003f2e <UART_Start_Receive_IT+0x14a>
  }
  return HAL_OK;
 8003f60:	2300      	movs	r3, #0
}
 8003f62:	4618      	mov	r0, r3
 8003f64:	375c      	adds	r7, #92	; 0x5c
 8003f66:	46bd      	mov	sp, r7
 8003f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f6c:	4770      	bx	lr
 8003f6e:	bf00      	nop
 8003f70:	08004391 	.word	0x08004391
 8003f74:	08004235 	.word	0x08004235

08003f78 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003f78:	b480      	push	{r7}
 8003f7a:	b095      	sub	sp, #84	; 0x54
 8003f7c:	af00      	add	r7, sp, #0
 8003f7e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f86:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003f88:	e853 3f00 	ldrex	r3, [r3]
 8003f8c:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8003f8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f90:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003f94:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	461a      	mov	r2, r3
 8003f9c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003f9e:	643b      	str	r3, [r7, #64]	; 0x40
 8003fa0:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003fa2:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8003fa4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003fa6:	e841 2300 	strex	r3, r2, [r1]
 8003faa:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003fac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003fae:	2b00      	cmp	r3, #0
 8003fb0:	d1e6      	bne.n	8003f80 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	3308      	adds	r3, #8
 8003fb8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003fba:	6a3b      	ldr	r3, [r7, #32]
 8003fbc:	e853 3f00 	ldrex	r3, [r3]
 8003fc0:	61fb      	str	r3, [r7, #28]
   return(result);
 8003fc2:	69fb      	ldr	r3, [r7, #28]
 8003fc4:	f023 0301 	bic.w	r3, r3, #1
 8003fc8:	64bb      	str	r3, [r7, #72]	; 0x48
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	3308      	adds	r3, #8
 8003fd0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003fd2:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003fd4:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003fd6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003fd8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003fda:	e841 2300 	strex	r3, r2, [r1]
 8003fde:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003fe0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fe2:	2b00      	cmp	r3, #0
 8003fe4:	d1e5      	bne.n	8003fb2 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003fea:	2b01      	cmp	r3, #1
 8003fec:	d118      	bne.n	8004020 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ff4:	68fb      	ldr	r3, [r7, #12]
 8003ff6:	e853 3f00 	ldrex	r3, [r3]
 8003ffa:	60bb      	str	r3, [r7, #8]
   return(result);
 8003ffc:	68bb      	ldr	r3, [r7, #8]
 8003ffe:	f023 0310 	bic.w	r3, r3, #16
 8004002:	647b      	str	r3, [r7, #68]	; 0x44
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	461a      	mov	r2, r3
 800400a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800400c:	61bb      	str	r3, [r7, #24]
 800400e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004010:	6979      	ldr	r1, [r7, #20]
 8004012:	69ba      	ldr	r2, [r7, #24]
 8004014:	e841 2300 	strex	r3, r2, [r1]
 8004018:	613b      	str	r3, [r7, #16]
   return(result);
 800401a:	693b      	ldr	r3, [r7, #16]
 800401c:	2b00      	cmp	r3, #0
 800401e:	d1e6      	bne.n	8003fee <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	2220      	movs	r2, #32
 8004024:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	2200      	movs	r2, #0
 800402a:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	2200      	movs	r2, #0
 8004030:	665a      	str	r2, [r3, #100]	; 0x64
}
 8004032:	bf00      	nop
 8004034:	3754      	adds	r7, #84	; 0x54
 8004036:	46bd      	mov	sp, r7
 8004038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800403c:	4770      	bx	lr

0800403e <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800403e:	b580      	push	{r7, lr}
 8004040:	b084      	sub	sp, #16
 8004042:	af00      	add	r7, sp, #0
 8004044:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800404a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800404c:	68fb      	ldr	r3, [r7, #12]
 800404e:	2200      	movs	r2, #0
 8004050:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8004054:	68fb      	ldr	r3, [r7, #12]
 8004056:	2200      	movs	r2, #0
 8004058:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800405c:	68f8      	ldr	r0, [r7, #12]
 800405e:	f7ff fa8f 	bl	8003580 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004062:	bf00      	nop
 8004064:	3710      	adds	r7, #16
 8004066:	46bd      	mov	sp, r7
 8004068:	bd80      	pop	{r7, pc}

0800406a <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 800406a:	b480      	push	{r7}
 800406c:	b08f      	sub	sp, #60	; 0x3c
 800406e:	af00      	add	r7, sp, #0
 8004070:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004076:	2b21      	cmp	r3, #33	; 0x21
 8004078:	d14c      	bne.n	8004114 <UART_TxISR_8BIT+0xaa>
  {
    if (huart->TxXferCount == 0U)
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004080:	b29b      	uxth	r3, r3
 8004082:	2b00      	cmp	r3, #0
 8004084:	d132      	bne.n	80040ec <UART_TxISR_8BIT+0x82>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800408c:	6a3b      	ldr	r3, [r7, #32]
 800408e:	e853 3f00 	ldrex	r3, [r3]
 8004092:	61fb      	str	r3, [r7, #28]
   return(result);
 8004094:	69fb      	ldr	r3, [r7, #28]
 8004096:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800409a:	637b      	str	r3, [r7, #52]	; 0x34
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	461a      	mov	r2, r3
 80040a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80040a4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80040a6:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80040a8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80040aa:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80040ac:	e841 2300 	strex	r3, r2, [r1]
 80040b0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80040b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040b4:	2b00      	cmp	r3, #0
 80040b6:	d1e6      	bne.n	8004086 <UART_TxISR_8BIT+0x1c>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80040be:	68fb      	ldr	r3, [r7, #12]
 80040c0:	e853 3f00 	ldrex	r3, [r3]
 80040c4:	60bb      	str	r3, [r7, #8]
   return(result);
 80040c6:	68bb      	ldr	r3, [r7, #8]
 80040c8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80040cc:	633b      	str	r3, [r7, #48]	; 0x30
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	461a      	mov	r2, r3
 80040d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80040d6:	61bb      	str	r3, [r7, #24]
 80040d8:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80040da:	6979      	ldr	r1, [r7, #20]
 80040dc:	69ba      	ldr	r2, [r7, #24]
 80040de:	e841 2300 	strex	r3, r2, [r1]
 80040e2:	613b      	str	r3, [r7, #16]
   return(result);
 80040e4:	693b      	ldr	r3, [r7, #16]
 80040e6:	2b00      	cmp	r3, #0
 80040e8:	d1e6      	bne.n	80040b8 <UART_TxISR_8BIT+0x4e>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 80040ea:	e013      	b.n	8004114 <UART_TxISR_8BIT+0xaa>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80040f0:	781a      	ldrb	r2, [r3, #0]
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	629a      	str	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr++;
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80040fc:	1c5a      	adds	r2, r3, #1
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004108:	b29b      	uxth	r3, r3
 800410a:	3b01      	subs	r3, #1
 800410c:	b29a      	uxth	r2, r3
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
}
 8004114:	bf00      	nop
 8004116:	373c      	adds	r7, #60	; 0x3c
 8004118:	46bd      	mov	sp, r7
 800411a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800411e:	4770      	bx	lr

08004120 <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 8004120:	b480      	push	{r7}
 8004122:	b091      	sub	sp, #68	; 0x44
 8004124:	af00      	add	r7, sp, #0
 8004126:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800412c:	2b21      	cmp	r3, #33	; 0x21
 800412e:	d151      	bne.n	80041d4 <UART_TxISR_16BIT+0xb4>
  {
    if (huart->TxXferCount == 0U)
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004136:	b29b      	uxth	r3, r3
 8004138:	2b00      	cmp	r3, #0
 800413a:	d132      	bne.n	80041a2 <UART_TxISR_16BIT+0x82>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004142:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004144:	e853 3f00 	ldrex	r3, [r3]
 8004148:	623b      	str	r3, [r7, #32]
   return(result);
 800414a:	6a3b      	ldr	r3, [r7, #32]
 800414c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004150:	63bb      	str	r3, [r7, #56]	; 0x38
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	461a      	mov	r2, r3
 8004158:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800415a:	633b      	str	r3, [r7, #48]	; 0x30
 800415c:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800415e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004160:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004162:	e841 2300 	strex	r3, r2, [r1]
 8004166:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004168:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800416a:	2b00      	cmp	r3, #0
 800416c:	d1e6      	bne.n	800413c <UART_TxISR_16BIT+0x1c>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004174:	693b      	ldr	r3, [r7, #16]
 8004176:	e853 3f00 	ldrex	r3, [r3]
 800417a:	60fb      	str	r3, [r7, #12]
   return(result);
 800417c:	68fb      	ldr	r3, [r7, #12]
 800417e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004182:	637b      	str	r3, [r7, #52]	; 0x34
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	461a      	mov	r2, r3
 800418a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800418c:	61fb      	str	r3, [r7, #28]
 800418e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004190:	69b9      	ldr	r1, [r7, #24]
 8004192:	69fa      	ldr	r2, [r7, #28]
 8004194:	e841 2300 	strex	r3, r2, [r1]
 8004198:	617b      	str	r3, [r7, #20]
   return(result);
 800419a:	697b      	ldr	r3, [r7, #20]
 800419c:	2b00      	cmp	r3, #0
 800419e:	d1e6      	bne.n	800416e <UART_TxISR_16BIT+0x4e>
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 80041a0:	e018      	b.n	80041d4 <UART_TxISR_16BIT+0xb4>
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80041a6:	63fb      	str	r3, [r7, #60]	; 0x3c
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 80041a8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80041aa:	881b      	ldrh	r3, [r3, #0]
 80041ac:	461a      	mov	r2, r3
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80041b6:	629a      	str	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr += 2U;
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80041bc:	1c9a      	adds	r2, r3, #2
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80041c8:	b29b      	uxth	r3, r3
 80041ca:	3b01      	subs	r3, #1
 80041cc:	b29a      	uxth	r2, r3
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
}
 80041d4:	bf00      	nop
 80041d6:	3744      	adds	r7, #68	; 0x44
 80041d8:	46bd      	mov	sp, r7
 80041da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041de:	4770      	bx	lr

080041e0 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80041e0:	b580      	push	{r7, lr}
 80041e2:	b088      	sub	sp, #32
 80041e4:	af00      	add	r7, sp, #0
 80041e6:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80041ee:	68fb      	ldr	r3, [r7, #12]
 80041f0:	e853 3f00 	ldrex	r3, [r3]
 80041f4:	60bb      	str	r3, [r7, #8]
   return(result);
 80041f6:	68bb      	ldr	r3, [r7, #8]
 80041f8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80041fc:	61fb      	str	r3, [r7, #28]
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	461a      	mov	r2, r3
 8004204:	69fb      	ldr	r3, [r7, #28]
 8004206:	61bb      	str	r3, [r7, #24]
 8004208:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800420a:	6979      	ldr	r1, [r7, #20]
 800420c:	69ba      	ldr	r2, [r7, #24]
 800420e:	e841 2300 	strex	r3, r2, [r1]
 8004212:	613b      	str	r3, [r7, #16]
   return(result);
 8004214:	693b      	ldr	r3, [r7, #16]
 8004216:	2b00      	cmp	r3, #0
 8004218:	d1e6      	bne.n	80041e8 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	2220      	movs	r2, #32
 800421e:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	2200      	movs	r2, #0
 8004224:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004226:	6878      	ldr	r0, [r7, #4]
 8004228:	f7ff f9a0 	bl	800356c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800422c:	bf00      	nop
 800422e:	3720      	adds	r7, #32
 8004230:	46bd      	mov	sp, r7
 8004232:	bd80      	pop	{r7, pc}

08004234 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8004234:	b580      	push	{r7, lr}
 8004236:	b096      	sub	sp, #88	; 0x58
 8004238:	af00      	add	r7, sp, #0
 800423a:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8004242:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800424a:	2b22      	cmp	r3, #34	; 0x22
 800424c:	f040 8094 	bne.w	8004378 <UART_RxISR_8BIT+0x144>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004256:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800425a:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 800425e:	b2d9      	uxtb	r1, r3
 8004260:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8004264:	b2da      	uxtb	r2, r3
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800426a:	400a      	ands	r2, r1
 800426c:	b2d2      	uxtb	r2, r2
 800426e:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004274:	1c5a      	adds	r2, r3, #1
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004280:	b29b      	uxth	r3, r3
 8004282:	3b01      	subs	r3, #1
 8004284:	b29a      	uxth	r2, r3
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004292:	b29b      	uxth	r3, r3
 8004294:	2b00      	cmp	r3, #0
 8004296:	d177      	bne.n	8004388 <UART_RxISR_8BIT+0x154>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800429e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80042a0:	e853 3f00 	ldrex	r3, [r3]
 80042a4:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80042a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80042a8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80042ac:	653b      	str	r3, [r7, #80]	; 0x50
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	461a      	mov	r2, r3
 80042b4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80042b6:	647b      	str	r3, [r7, #68]	; 0x44
 80042b8:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80042ba:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80042bc:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80042be:	e841 2300 	strex	r3, r2, [r1]
 80042c2:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80042c4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80042c6:	2b00      	cmp	r3, #0
 80042c8:	d1e6      	bne.n	8004298 <UART_RxISR_8BIT+0x64>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	3308      	adds	r3, #8
 80042d0:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80042d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042d4:	e853 3f00 	ldrex	r3, [r3]
 80042d8:	623b      	str	r3, [r7, #32]
   return(result);
 80042da:	6a3b      	ldr	r3, [r7, #32]
 80042dc:	f023 0301 	bic.w	r3, r3, #1
 80042e0:	64fb      	str	r3, [r7, #76]	; 0x4c
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	3308      	adds	r3, #8
 80042e8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80042ea:	633a      	str	r2, [r7, #48]	; 0x30
 80042ec:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80042ee:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80042f0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80042f2:	e841 2300 	strex	r3, r2, [r1]
 80042f6:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80042f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80042fa:	2b00      	cmp	r3, #0
 80042fc:	d1e5      	bne.n	80042ca <UART_RxISR_8BIT+0x96>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	2220      	movs	r2, #32
 8004302:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	2200      	movs	r2, #0
 8004308:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800430e:	2b01      	cmp	r3, #1
 8004310:	d12e      	bne.n	8004370 <UART_RxISR_8BIT+0x13c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	2200      	movs	r2, #0
 8004316:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800431e:	693b      	ldr	r3, [r7, #16]
 8004320:	e853 3f00 	ldrex	r3, [r3]
 8004324:	60fb      	str	r3, [r7, #12]
   return(result);
 8004326:	68fb      	ldr	r3, [r7, #12]
 8004328:	f023 0310 	bic.w	r3, r3, #16
 800432c:	64bb      	str	r3, [r7, #72]	; 0x48
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	461a      	mov	r2, r3
 8004334:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004336:	61fb      	str	r3, [r7, #28]
 8004338:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800433a:	69b9      	ldr	r1, [r7, #24]
 800433c:	69fa      	ldr	r2, [r7, #28]
 800433e:	e841 2300 	strex	r3, r2, [r1]
 8004342:	617b      	str	r3, [r7, #20]
   return(result);
 8004344:	697b      	ldr	r3, [r7, #20]
 8004346:	2b00      	cmp	r3, #0
 8004348:	d1e6      	bne.n	8004318 <UART_RxISR_8BIT+0xe4>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	69db      	ldr	r3, [r3, #28]
 8004350:	f003 0310 	and.w	r3, r3, #16
 8004354:	2b10      	cmp	r3, #16
 8004356:	d103      	bne.n	8004360 <UART_RxISR_8BIT+0x12c>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	2210      	movs	r2, #16
 800435e:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8004366:	4619      	mov	r1, r3
 8004368:	6878      	ldr	r0, [r7, #4]
 800436a:	f7ff f913 	bl	8003594 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800436e:	e00b      	b.n	8004388 <UART_RxISR_8BIT+0x154>
        HAL_UART_RxCpltCallback(huart);
 8004370:	6878      	ldr	r0, [r7, #4]
 8004372:	f7fc f8e1 	bl	8000538 <HAL_UART_RxCpltCallback>
}
 8004376:	e007      	b.n	8004388 <UART_RxISR_8BIT+0x154>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	699a      	ldr	r2, [r3, #24]
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	f042 0208 	orr.w	r2, r2, #8
 8004386:	619a      	str	r2, [r3, #24]
}
 8004388:	bf00      	nop
 800438a:	3758      	adds	r7, #88	; 0x58
 800438c:	46bd      	mov	sp, r7
 800438e:	bd80      	pop	{r7, pc}

08004390 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8004390:	b580      	push	{r7, lr}
 8004392:	b096      	sub	sp, #88	; 0x58
 8004394:	af00      	add	r7, sp, #0
 8004396:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800439e:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80043a6:	2b22      	cmp	r3, #34	; 0x22
 80043a8:	f040 8094 	bne.w	80044d4 <UART_RxISR_16BIT+0x144>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043b2:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80043ba:	653b      	str	r3, [r7, #80]	; 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 80043bc:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 80043c0:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 80043c4:	4013      	ands	r3, r2
 80043c6:	b29a      	uxth	r2, r3
 80043c8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80043ca:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80043d0:	1c9a      	adds	r2, r3, #2
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80043dc:	b29b      	uxth	r3, r3
 80043de:	3b01      	subs	r3, #1
 80043e0:	b29a      	uxth	r2, r3
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80043ee:	b29b      	uxth	r3, r3
 80043f0:	2b00      	cmp	r3, #0
 80043f2:	d177      	bne.n	80044e4 <UART_RxISR_16BIT+0x154>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80043fa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80043fc:	e853 3f00 	ldrex	r3, [r3]
 8004400:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8004402:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004404:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004408:	64fb      	str	r3, [r7, #76]	; 0x4c
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	461a      	mov	r2, r3
 8004410:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004412:	643b      	str	r3, [r7, #64]	; 0x40
 8004414:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004416:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8004418:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800441a:	e841 2300 	strex	r3, r2, [r1]
 800441e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004420:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004422:	2b00      	cmp	r3, #0
 8004424:	d1e6      	bne.n	80043f4 <UART_RxISR_16BIT+0x64>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	3308      	adds	r3, #8
 800442c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800442e:	6a3b      	ldr	r3, [r7, #32]
 8004430:	e853 3f00 	ldrex	r3, [r3]
 8004434:	61fb      	str	r3, [r7, #28]
   return(result);
 8004436:	69fb      	ldr	r3, [r7, #28]
 8004438:	f023 0301 	bic.w	r3, r3, #1
 800443c:	64bb      	str	r3, [r7, #72]	; 0x48
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	3308      	adds	r3, #8
 8004444:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004446:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004448:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800444a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800444c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800444e:	e841 2300 	strex	r3, r2, [r1]
 8004452:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004454:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004456:	2b00      	cmp	r3, #0
 8004458:	d1e5      	bne.n	8004426 <UART_RxISR_16BIT+0x96>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	2220      	movs	r2, #32
 800445e:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	2200      	movs	r2, #0
 8004464:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800446a:	2b01      	cmp	r3, #1
 800446c:	d12e      	bne.n	80044cc <UART_RxISR_16BIT+0x13c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	2200      	movs	r2, #0
 8004472:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800447a:	68fb      	ldr	r3, [r7, #12]
 800447c:	e853 3f00 	ldrex	r3, [r3]
 8004480:	60bb      	str	r3, [r7, #8]
   return(result);
 8004482:	68bb      	ldr	r3, [r7, #8]
 8004484:	f023 0310 	bic.w	r3, r3, #16
 8004488:	647b      	str	r3, [r7, #68]	; 0x44
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	461a      	mov	r2, r3
 8004490:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004492:	61bb      	str	r3, [r7, #24]
 8004494:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004496:	6979      	ldr	r1, [r7, #20]
 8004498:	69ba      	ldr	r2, [r7, #24]
 800449a:	e841 2300 	strex	r3, r2, [r1]
 800449e:	613b      	str	r3, [r7, #16]
   return(result);
 80044a0:	693b      	ldr	r3, [r7, #16]
 80044a2:	2b00      	cmp	r3, #0
 80044a4:	d1e6      	bne.n	8004474 <UART_RxISR_16BIT+0xe4>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	69db      	ldr	r3, [r3, #28]
 80044ac:	f003 0310 	and.w	r3, r3, #16
 80044b0:	2b10      	cmp	r3, #16
 80044b2:	d103      	bne.n	80044bc <UART_RxISR_16BIT+0x12c>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	2210      	movs	r2, #16
 80044ba:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80044c2:	4619      	mov	r1, r3
 80044c4:	6878      	ldr	r0, [r7, #4]
 80044c6:	f7ff f865 	bl	8003594 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80044ca:	e00b      	b.n	80044e4 <UART_RxISR_16BIT+0x154>
        HAL_UART_RxCpltCallback(huart);
 80044cc:	6878      	ldr	r0, [r7, #4]
 80044ce:	f7fc f833 	bl	8000538 <HAL_UART_RxCpltCallback>
}
 80044d2:	e007      	b.n	80044e4 <UART_RxISR_16BIT+0x154>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	699a      	ldr	r2, [r3, #24]
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	f042 0208 	orr.w	r2, r2, #8
 80044e2:	619a      	str	r2, [r3, #24]
}
 80044e4:	bf00      	nop
 80044e6:	3758      	adds	r7, #88	; 0x58
 80044e8:	46bd      	mov	sp, r7
 80044ea:	bd80      	pop	{r7, pc}

080044ec <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 80044ec:	b480      	push	{r7}
 80044ee:	af00      	add	r7, sp, #0
  * The issue was logged under:https://github.com/ARM-software/CMSIS-FreeRTOS/issues/35
  * until it is correctly fixed, the code below is commented
  */
/*    NVIC_SetPriority (SVCall_IRQn, 0U); */
#endif
}
 80044f0:	bf00      	nop
 80044f2:	46bd      	mov	sp, r7
 80044f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044f8:	4770      	bx	lr
	...

080044fc <osKernelInitialize>:

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 80044fc:	b480      	push	{r7}
 80044fe:	b085      	sub	sp, #20
 8004500:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004502:	f3ef 8305 	mrs	r3, IPSR
 8004506:	60bb      	str	r3, [r7, #8]
  return(result);
 8004508:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800450a:	2b00      	cmp	r3, #0
 800450c:	d10f      	bne.n	800452e <osKernelInitialize+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800450e:	f3ef 8310 	mrs	r3, PRIMASK
 8004512:	607b      	str	r3, [r7, #4]
  return(result);
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	2b00      	cmp	r3, #0
 8004518:	d105      	bne.n	8004526 <osKernelInitialize+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800451a:	f3ef 8311 	mrs	r3, BASEPRI
 800451e:	603b      	str	r3, [r7, #0]
  return(result);
 8004520:	683b      	ldr	r3, [r7, #0]
 8004522:	2b00      	cmp	r3, #0
 8004524:	d007      	beq.n	8004536 <osKernelInitialize+0x3a>
 8004526:	4b0e      	ldr	r3, [pc, #56]	; (8004560 <osKernelInitialize+0x64>)
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	2b02      	cmp	r3, #2
 800452c:	d103      	bne.n	8004536 <osKernelInitialize+0x3a>
    stat = osErrorISR;
 800452e:	f06f 0305 	mvn.w	r3, #5
 8004532:	60fb      	str	r3, [r7, #12]
 8004534:	e00c      	b.n	8004550 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 8004536:	4b0a      	ldr	r3, [pc, #40]	; (8004560 <osKernelInitialize+0x64>)
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	2b00      	cmp	r3, #0
 800453c:	d105      	bne.n	800454a <osKernelInitialize+0x4e>
      #if defined(USE_FREERTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800453e:	4b08      	ldr	r3, [pc, #32]	; (8004560 <osKernelInitialize+0x64>)
 8004540:	2201      	movs	r2, #1
 8004542:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8004544:	2300      	movs	r3, #0
 8004546:	60fb      	str	r3, [r7, #12]
 8004548:	e002      	b.n	8004550 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 800454a:	f04f 33ff 	mov.w	r3, #4294967295
 800454e:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8004550:	68fb      	ldr	r3, [r7, #12]
}
 8004552:	4618      	mov	r0, r3
 8004554:	3714      	adds	r7, #20
 8004556:	46bd      	mov	sp, r7
 8004558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800455c:	4770      	bx	lr
 800455e:	bf00      	nop
 8004560:	20000034 	.word	0x20000034

08004564 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8004564:	b580      	push	{r7, lr}
 8004566:	b084      	sub	sp, #16
 8004568:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800456a:	f3ef 8305 	mrs	r3, IPSR
 800456e:	60bb      	str	r3, [r7, #8]
  return(result);
 8004570:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8004572:	2b00      	cmp	r3, #0
 8004574:	d10f      	bne.n	8004596 <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004576:	f3ef 8310 	mrs	r3, PRIMASK
 800457a:	607b      	str	r3, [r7, #4]
  return(result);
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	2b00      	cmp	r3, #0
 8004580:	d105      	bne.n	800458e <osKernelStart+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8004582:	f3ef 8311 	mrs	r3, BASEPRI
 8004586:	603b      	str	r3, [r7, #0]
  return(result);
 8004588:	683b      	ldr	r3, [r7, #0]
 800458a:	2b00      	cmp	r3, #0
 800458c:	d007      	beq.n	800459e <osKernelStart+0x3a>
 800458e:	4b0f      	ldr	r3, [pc, #60]	; (80045cc <osKernelStart+0x68>)
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	2b02      	cmp	r3, #2
 8004594:	d103      	bne.n	800459e <osKernelStart+0x3a>
    stat = osErrorISR;
 8004596:	f06f 0305 	mvn.w	r3, #5
 800459a:	60fb      	str	r3, [r7, #12]
 800459c:	e010      	b.n	80045c0 <osKernelStart+0x5c>
  }
  else {
    if (KernelState == osKernelReady) {
 800459e:	4b0b      	ldr	r3, [pc, #44]	; (80045cc <osKernelStart+0x68>)
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	2b01      	cmp	r3, #1
 80045a4:	d109      	bne.n	80045ba <osKernelStart+0x56>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 80045a6:	f7ff ffa1 	bl	80044ec <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 80045aa:	4b08      	ldr	r3, [pc, #32]	; (80045cc <osKernelStart+0x68>)
 80045ac:	2202      	movs	r2, #2
 80045ae:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 80045b0:	f001 fae8 	bl	8005b84 <vTaskStartScheduler>
      stat = osOK;
 80045b4:	2300      	movs	r3, #0
 80045b6:	60fb      	str	r3, [r7, #12]
 80045b8:	e002      	b.n	80045c0 <osKernelStart+0x5c>
    } else {
      stat = osError;
 80045ba:	f04f 33ff 	mov.w	r3, #4294967295
 80045be:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 80045c0:	68fb      	ldr	r3, [r7, #12]
}
 80045c2:	4618      	mov	r0, r3
 80045c4:	3710      	adds	r7, #16
 80045c6:	46bd      	mov	sp, r7
 80045c8:	bd80      	pop	{r7, pc}
 80045ca:	bf00      	nop
 80045cc:	20000034 	.word	0x20000034

080045d0 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 80045d0:	b580      	push	{r7, lr}
 80045d2:	b090      	sub	sp, #64	; 0x40
 80045d4:	af04      	add	r7, sp, #16
 80045d6:	60f8      	str	r0, [r7, #12]
 80045d8:	60b9      	str	r1, [r7, #8]
 80045da:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 80045dc:	2300      	movs	r3, #0
 80045de:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80045e0:	f3ef 8305 	mrs	r3, IPSR
 80045e4:	61fb      	str	r3, [r7, #28]
  return(result);
 80045e6:	69fb      	ldr	r3, [r7, #28]

  if (!IS_IRQ() && (func != NULL)) {
 80045e8:	2b00      	cmp	r3, #0
 80045ea:	f040 808f 	bne.w	800470c <osThreadNew+0x13c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80045ee:	f3ef 8310 	mrs	r3, PRIMASK
 80045f2:	61bb      	str	r3, [r7, #24]
  return(result);
 80045f4:	69bb      	ldr	r3, [r7, #24]
 80045f6:	2b00      	cmp	r3, #0
 80045f8:	d105      	bne.n	8004606 <osThreadNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80045fa:	f3ef 8311 	mrs	r3, BASEPRI
 80045fe:	617b      	str	r3, [r7, #20]
  return(result);
 8004600:	697b      	ldr	r3, [r7, #20]
 8004602:	2b00      	cmp	r3, #0
 8004604:	d003      	beq.n	800460e <osThreadNew+0x3e>
 8004606:	4b44      	ldr	r3, [pc, #272]	; (8004718 <osThreadNew+0x148>)
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	2b02      	cmp	r3, #2
 800460c:	d07e      	beq.n	800470c <osThreadNew+0x13c>
 800460e:	68fb      	ldr	r3, [r7, #12]
 8004610:	2b00      	cmp	r3, #0
 8004612:	d07b      	beq.n	800470c <osThreadNew+0x13c>
    stack = configMINIMAL_STACK_SIZE;
 8004614:	2380      	movs	r3, #128	; 0x80
 8004616:	62bb      	str	r3, [r7, #40]	; 0x28
    prio  = (UBaseType_t)osPriorityNormal;
 8004618:	2318      	movs	r3, #24
 800461a:	627b      	str	r3, [r7, #36]	; 0x24

    name = NULL;
 800461c:	2300      	movs	r3, #0
 800461e:	62fb      	str	r3, [r7, #44]	; 0x2c
    mem  = -1;
 8004620:	f04f 33ff 	mov.w	r3, #4294967295
 8004624:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	2b00      	cmp	r3, #0
 800462a:	d045      	beq.n	80046b8 <osThreadNew+0xe8>
      if (attr->name != NULL) {
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	2b00      	cmp	r3, #0
 8004632:	d002      	beq.n	800463a <osThreadNew+0x6a>
        name = attr->name;
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (attr->priority != osPriorityNone) {
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	699b      	ldr	r3, [r3, #24]
 800463e:	2b00      	cmp	r3, #0
 8004640:	d002      	beq.n	8004648 <osThreadNew+0x78>
        prio = (UBaseType_t)attr->priority;
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	699b      	ldr	r3, [r3, #24]
 8004646:	627b      	str	r3, [r7, #36]	; 0x24
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8004648:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800464a:	2b00      	cmp	r3, #0
 800464c:	d008      	beq.n	8004660 <osThreadNew+0x90>
 800464e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004650:	2b38      	cmp	r3, #56	; 0x38
 8004652:	d805      	bhi.n	8004660 <osThreadNew+0x90>
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	685b      	ldr	r3, [r3, #4]
 8004658:	f003 0301 	and.w	r3, r3, #1
 800465c:	2b00      	cmp	r3, #0
 800465e:	d001      	beq.n	8004664 <osThreadNew+0x94>
        return (NULL);
 8004660:	2300      	movs	r3, #0
 8004662:	e054      	b.n	800470e <osThreadNew+0x13e>
      }

      if (attr->stack_size > 0U) {
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	695b      	ldr	r3, [r3, #20]
 8004668:	2b00      	cmp	r3, #0
 800466a:	d003      	beq.n	8004674 <osThreadNew+0xa4>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	695b      	ldr	r3, [r3, #20]
 8004670:	089b      	lsrs	r3, r3, #2
 8004672:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	689b      	ldr	r3, [r3, #8]
 8004678:	2b00      	cmp	r3, #0
 800467a:	d00e      	beq.n	800469a <osThreadNew+0xca>
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	68db      	ldr	r3, [r3, #12]
 8004680:	2b5b      	cmp	r3, #91	; 0x5b
 8004682:	d90a      	bls.n	800469a <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8004688:	2b00      	cmp	r3, #0
 800468a:	d006      	beq.n	800469a <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	695b      	ldr	r3, [r3, #20]
 8004690:	2b00      	cmp	r3, #0
 8004692:	d002      	beq.n	800469a <osThreadNew+0xca>
        mem = 1;
 8004694:	2301      	movs	r3, #1
 8004696:	623b      	str	r3, [r7, #32]
 8004698:	e010      	b.n	80046bc <osThreadNew+0xec>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	689b      	ldr	r3, [r3, #8]
 800469e:	2b00      	cmp	r3, #0
 80046a0:	d10c      	bne.n	80046bc <osThreadNew+0xec>
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	68db      	ldr	r3, [r3, #12]
 80046a6:	2b00      	cmp	r3, #0
 80046a8:	d108      	bne.n	80046bc <osThreadNew+0xec>
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	691b      	ldr	r3, [r3, #16]
 80046ae:	2b00      	cmp	r3, #0
 80046b0:	d104      	bne.n	80046bc <osThreadNew+0xec>
          mem = 0;
 80046b2:	2300      	movs	r3, #0
 80046b4:	623b      	str	r3, [r7, #32]
 80046b6:	e001      	b.n	80046bc <osThreadNew+0xec>
        }
      }
    }
    else {
      mem = 0;
 80046b8:	2300      	movs	r3, #0
 80046ba:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 80046bc:	6a3b      	ldr	r3, [r7, #32]
 80046be:	2b01      	cmp	r3, #1
 80046c0:	d110      	bne.n	80046e4 <osThreadNew+0x114>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 80046c6:	687a      	ldr	r2, [r7, #4]
 80046c8:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80046ca:	9202      	str	r2, [sp, #8]
 80046cc:	9301      	str	r3, [sp, #4]
 80046ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046d0:	9300      	str	r3, [sp, #0]
 80046d2:	68bb      	ldr	r3, [r7, #8]
 80046d4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80046d6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80046d8:	68f8      	ldr	r0, [r7, #12]
 80046da:	f001 f873 	bl	80057c4 <xTaskCreateStatic>
 80046de:	4603      	mov	r3, r0
 80046e0:	613b      	str	r3, [r7, #16]
 80046e2:	e013      	b.n	800470c <osThreadNew+0x13c>
    }
    else {
      if (mem == 0) {
 80046e4:	6a3b      	ldr	r3, [r7, #32]
 80046e6:	2b00      	cmp	r3, #0
 80046e8:	d110      	bne.n	800470c <osThreadNew+0x13c>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 80046ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80046ec:	b29a      	uxth	r2, r3
 80046ee:	f107 0310 	add.w	r3, r7, #16
 80046f2:	9301      	str	r3, [sp, #4]
 80046f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046f6:	9300      	str	r3, [sp, #0]
 80046f8:	68bb      	ldr	r3, [r7, #8]
 80046fa:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80046fc:	68f8      	ldr	r0, [r7, #12]
 80046fe:	f001 f8c4 	bl	800588a <xTaskCreate>
 8004702:	4603      	mov	r3, r0
 8004704:	2b01      	cmp	r3, #1
 8004706:	d001      	beq.n	800470c <osThreadNew+0x13c>
          hTask = NULL;
 8004708:	2300      	movs	r3, #0
 800470a:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 800470c:	693b      	ldr	r3, [r7, #16]
}
 800470e:	4618      	mov	r0, r3
 8004710:	3730      	adds	r7, #48	; 0x30
 8004712:	46bd      	mov	sp, r7
 8004714:	bd80      	pop	{r7, pc}
 8004716:	bf00      	nop
 8004718:	20000034 	.word	0x20000034

0800471c <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 800471c:	b580      	push	{r7, lr}
 800471e:	b086      	sub	sp, #24
 8004720:	af00      	add	r7, sp, #0
 8004722:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004724:	f3ef 8305 	mrs	r3, IPSR
 8004728:	613b      	str	r3, [r7, #16]
  return(result);
 800472a:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 800472c:	2b00      	cmp	r3, #0
 800472e:	d10f      	bne.n	8004750 <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004730:	f3ef 8310 	mrs	r3, PRIMASK
 8004734:	60fb      	str	r3, [r7, #12]
  return(result);
 8004736:	68fb      	ldr	r3, [r7, #12]
 8004738:	2b00      	cmp	r3, #0
 800473a:	d105      	bne.n	8004748 <osDelay+0x2c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800473c:	f3ef 8311 	mrs	r3, BASEPRI
 8004740:	60bb      	str	r3, [r7, #8]
  return(result);
 8004742:	68bb      	ldr	r3, [r7, #8]
 8004744:	2b00      	cmp	r3, #0
 8004746:	d007      	beq.n	8004758 <osDelay+0x3c>
 8004748:	4b0a      	ldr	r3, [pc, #40]	; (8004774 <osDelay+0x58>)
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	2b02      	cmp	r3, #2
 800474e:	d103      	bne.n	8004758 <osDelay+0x3c>
    stat = osErrorISR;
 8004750:	f06f 0305 	mvn.w	r3, #5
 8004754:	617b      	str	r3, [r7, #20]
 8004756:	e007      	b.n	8004768 <osDelay+0x4c>
  }
  else {
    stat = osOK;
 8004758:	2300      	movs	r3, #0
 800475a:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	2b00      	cmp	r3, #0
 8004760:	d002      	beq.n	8004768 <osDelay+0x4c>
      vTaskDelay(ticks);
 8004762:	6878      	ldr	r0, [r7, #4]
 8004764:	f001 f9d8 	bl	8005b18 <vTaskDelay>
    }
  }

  return (stat);
 8004768:	697b      	ldr	r3, [r7, #20]
}
 800476a:	4618      	mov	r0, r3
 800476c:	3718      	adds	r7, #24
 800476e:	46bd      	mov	sp, r7
 8004770:	bd80      	pop	{r7, pc}
 8004772:	bf00      	nop
 8004774:	20000034 	.word	0x20000034

08004778 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 8004778:	b580      	push	{r7, lr}
 800477a:	b08c      	sub	sp, #48	; 0x30
 800477c:	af02      	add	r7, sp, #8
 800477e:	60f8      	str	r0, [r7, #12]
 8004780:	60b9      	str	r1, [r7, #8]
 8004782:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 8004784:	2300      	movs	r3, #0
 8004786:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004788:	f3ef 8305 	mrs	r3, IPSR
 800478c:	61bb      	str	r3, [r7, #24]
  return(result);
 800478e:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 8004790:	2b00      	cmp	r3, #0
 8004792:	d16f      	bne.n	8004874 <osMessageQueueNew+0xfc>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004794:	f3ef 8310 	mrs	r3, PRIMASK
 8004798:	617b      	str	r3, [r7, #20]
  return(result);
 800479a:	697b      	ldr	r3, [r7, #20]
 800479c:	2b00      	cmp	r3, #0
 800479e:	d105      	bne.n	80047ac <osMessageQueueNew+0x34>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80047a0:	f3ef 8311 	mrs	r3, BASEPRI
 80047a4:	613b      	str	r3, [r7, #16]
  return(result);
 80047a6:	693b      	ldr	r3, [r7, #16]
 80047a8:	2b00      	cmp	r3, #0
 80047aa:	d003      	beq.n	80047b4 <osMessageQueueNew+0x3c>
 80047ac:	4b34      	ldr	r3, [pc, #208]	; (8004880 <osMessageQueueNew+0x108>)
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	2b02      	cmp	r3, #2
 80047b2:	d05f      	beq.n	8004874 <osMessageQueueNew+0xfc>
 80047b4:	68fb      	ldr	r3, [r7, #12]
 80047b6:	2b00      	cmp	r3, #0
 80047b8:	d05c      	beq.n	8004874 <osMessageQueueNew+0xfc>
 80047ba:	68bb      	ldr	r3, [r7, #8]
 80047bc:	2b00      	cmp	r3, #0
 80047be:	d059      	beq.n	8004874 <osMessageQueueNew+0xfc>
    mem = -1;
 80047c0:	f04f 33ff 	mov.w	r3, #4294967295
 80047c4:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	2b00      	cmp	r3, #0
 80047ca:	d029      	beq.n	8004820 <osMessageQueueNew+0xa8>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	689b      	ldr	r3, [r3, #8]
 80047d0:	2b00      	cmp	r3, #0
 80047d2:	d012      	beq.n	80047fa <osMessageQueueNew+0x82>
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	68db      	ldr	r3, [r3, #12]
 80047d8:	2b4f      	cmp	r3, #79	; 0x4f
 80047da:	d90e      	bls.n	80047fa <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 80047e0:	2b00      	cmp	r3, #0
 80047e2:	d00a      	beq.n	80047fa <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	695a      	ldr	r2, [r3, #20]
 80047e8:	68fb      	ldr	r3, [r7, #12]
 80047ea:	68b9      	ldr	r1, [r7, #8]
 80047ec:	fb01 f303 	mul.w	r3, r1, r3
 80047f0:	429a      	cmp	r2, r3
 80047f2:	d302      	bcc.n	80047fa <osMessageQueueNew+0x82>
        mem = 1;
 80047f4:	2301      	movs	r3, #1
 80047f6:	623b      	str	r3, [r7, #32]
 80047f8:	e014      	b.n	8004824 <osMessageQueueNew+0xac>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	689b      	ldr	r3, [r3, #8]
 80047fe:	2b00      	cmp	r3, #0
 8004800:	d110      	bne.n	8004824 <osMessageQueueNew+0xac>
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	68db      	ldr	r3, [r3, #12]
 8004806:	2b00      	cmp	r3, #0
 8004808:	d10c      	bne.n	8004824 <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800480e:	2b00      	cmp	r3, #0
 8004810:	d108      	bne.n	8004824 <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	695b      	ldr	r3, [r3, #20]
 8004816:	2b00      	cmp	r3, #0
 8004818:	d104      	bne.n	8004824 <osMessageQueueNew+0xac>
          mem = 0;
 800481a:	2300      	movs	r3, #0
 800481c:	623b      	str	r3, [r7, #32]
 800481e:	e001      	b.n	8004824 <osMessageQueueNew+0xac>
        }
      }
    }
    else {
      mem = 0;
 8004820:	2300      	movs	r3, #0
 8004822:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 8004824:	6a3b      	ldr	r3, [r7, #32]
 8004826:	2b01      	cmp	r3, #1
 8004828:	d10b      	bne.n	8004842 <osMessageQueueNew+0xca>
      hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	691a      	ldr	r2, [r3, #16]
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	689b      	ldr	r3, [r3, #8]
 8004832:	2100      	movs	r1, #0
 8004834:	9100      	str	r1, [sp, #0]
 8004836:	68b9      	ldr	r1, [r7, #8]
 8004838:	68f8      	ldr	r0, [r7, #12]
 800483a:	f000 fa5b 	bl	8004cf4 <xQueueGenericCreateStatic>
 800483e:	6278      	str	r0, [r7, #36]	; 0x24
 8004840:	e008      	b.n	8004854 <osMessageQueueNew+0xdc>
    }
    else {
      if (mem == 0) {
 8004842:	6a3b      	ldr	r3, [r7, #32]
 8004844:	2b00      	cmp	r3, #0
 8004846:	d105      	bne.n	8004854 <osMessageQueueNew+0xdc>
        hQueue = xQueueCreate (msg_count, msg_size);
 8004848:	2200      	movs	r2, #0
 800484a:	68b9      	ldr	r1, [r7, #8]
 800484c:	68f8      	ldr	r0, [r7, #12]
 800484e:	f000 fad3 	bl	8004df8 <xQueueGenericCreate>
 8004852:	6278      	str	r0, [r7, #36]	; 0x24
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 8004854:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004856:	2b00      	cmp	r3, #0
 8004858:	d00c      	beq.n	8004874 <osMessageQueueNew+0xfc>
      if (attr != NULL) {
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	2b00      	cmp	r3, #0
 800485e:	d003      	beq.n	8004868 <osMessageQueueNew+0xf0>
        name = attr->name;
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	61fb      	str	r3, [r7, #28]
 8004866:	e001      	b.n	800486c <osMessageQueueNew+0xf4>
      } else {
        name = NULL;
 8004868:	2300      	movs	r3, #0
 800486a:	61fb      	str	r3, [r7, #28]
      }
      vQueueAddToRegistry (hQueue, name);
 800486c:	69f9      	ldr	r1, [r7, #28]
 800486e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004870:	f000 ff4a 	bl	8005708 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 8004874:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8004876:	4618      	mov	r0, r3
 8004878:	3728      	adds	r7, #40	; 0x28
 800487a:	46bd      	mov	sp, r7
 800487c:	bd80      	pop	{r7, pc}
 800487e:	bf00      	nop
 8004880:	20000034 	.word	0x20000034

08004884 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 8004884:	b580      	push	{r7, lr}
 8004886:	b08a      	sub	sp, #40	; 0x28
 8004888:	af00      	add	r7, sp, #0
 800488a:	60f8      	str	r0, [r7, #12]
 800488c:	60b9      	str	r1, [r7, #8]
 800488e:	603b      	str	r3, [r7, #0]
 8004890:	4613      	mov	r3, r2
 8004892:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8004894:	68fb      	ldr	r3, [r7, #12]
 8004896:	623b      	str	r3, [r7, #32]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8004898:	2300      	movs	r3, #0
 800489a:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800489c:	f3ef 8305 	mrs	r3, IPSR
 80048a0:	61fb      	str	r3, [r7, #28]
  return(result);
 80048a2:	69fb      	ldr	r3, [r7, #28]

  if (IS_IRQ()) {
 80048a4:	2b00      	cmp	r3, #0
 80048a6:	d10f      	bne.n	80048c8 <osMessageQueuePut+0x44>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80048a8:	f3ef 8310 	mrs	r3, PRIMASK
 80048ac:	61bb      	str	r3, [r7, #24]
  return(result);
 80048ae:	69bb      	ldr	r3, [r7, #24]
 80048b0:	2b00      	cmp	r3, #0
 80048b2:	d105      	bne.n	80048c0 <osMessageQueuePut+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80048b4:	f3ef 8311 	mrs	r3, BASEPRI
 80048b8:	617b      	str	r3, [r7, #20]
  return(result);
 80048ba:	697b      	ldr	r3, [r7, #20]
 80048bc:	2b00      	cmp	r3, #0
 80048be:	d02c      	beq.n	800491a <osMessageQueuePut+0x96>
 80048c0:	4b28      	ldr	r3, [pc, #160]	; (8004964 <osMessageQueuePut+0xe0>)
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	2b02      	cmp	r3, #2
 80048c6:	d128      	bne.n	800491a <osMessageQueuePut+0x96>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80048c8:	6a3b      	ldr	r3, [r7, #32]
 80048ca:	2b00      	cmp	r3, #0
 80048cc:	d005      	beq.n	80048da <osMessageQueuePut+0x56>
 80048ce:	68bb      	ldr	r3, [r7, #8]
 80048d0:	2b00      	cmp	r3, #0
 80048d2:	d002      	beq.n	80048da <osMessageQueuePut+0x56>
 80048d4:	683b      	ldr	r3, [r7, #0]
 80048d6:	2b00      	cmp	r3, #0
 80048d8:	d003      	beq.n	80048e2 <osMessageQueuePut+0x5e>
      stat = osErrorParameter;
 80048da:	f06f 0303 	mvn.w	r3, #3
 80048de:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80048e0:	e039      	b.n	8004956 <osMessageQueuePut+0xd2>
    }
    else {
      yield = pdFALSE;
 80048e2:	2300      	movs	r3, #0
 80048e4:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 80048e6:	f107 0210 	add.w	r2, r7, #16
 80048ea:	2300      	movs	r3, #0
 80048ec:	68b9      	ldr	r1, [r7, #8]
 80048ee:	6a38      	ldr	r0, [r7, #32]
 80048f0:	f000 fbee 	bl	80050d0 <xQueueGenericSendFromISR>
 80048f4:	4603      	mov	r3, r0
 80048f6:	2b01      	cmp	r3, #1
 80048f8:	d003      	beq.n	8004902 <osMessageQueuePut+0x7e>
        stat = osErrorResource;
 80048fa:	f06f 0302 	mvn.w	r3, #2
 80048fe:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8004900:	e029      	b.n	8004956 <osMessageQueuePut+0xd2>
      } else {
        portYIELD_FROM_ISR (yield);
 8004902:	693b      	ldr	r3, [r7, #16]
 8004904:	2b00      	cmp	r3, #0
 8004906:	d026      	beq.n	8004956 <osMessageQueuePut+0xd2>
 8004908:	4b17      	ldr	r3, [pc, #92]	; (8004968 <osMessageQueuePut+0xe4>)
 800490a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800490e:	601a      	str	r2, [r3, #0]
 8004910:	f3bf 8f4f 	dsb	sy
 8004914:	f3bf 8f6f 	isb	sy
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8004918:	e01d      	b.n	8004956 <osMessageQueuePut+0xd2>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800491a:	6a3b      	ldr	r3, [r7, #32]
 800491c:	2b00      	cmp	r3, #0
 800491e:	d002      	beq.n	8004926 <osMessageQueuePut+0xa2>
 8004920:	68bb      	ldr	r3, [r7, #8]
 8004922:	2b00      	cmp	r3, #0
 8004924:	d103      	bne.n	800492e <osMessageQueuePut+0xaa>
      stat = osErrorParameter;
 8004926:	f06f 0303 	mvn.w	r3, #3
 800492a:	627b      	str	r3, [r7, #36]	; 0x24
 800492c:	e014      	b.n	8004958 <osMessageQueuePut+0xd4>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800492e:	2300      	movs	r3, #0
 8004930:	683a      	ldr	r2, [r7, #0]
 8004932:	68b9      	ldr	r1, [r7, #8]
 8004934:	6a38      	ldr	r0, [r7, #32]
 8004936:	f000 fac5 	bl	8004ec4 <xQueueGenericSend>
 800493a:	4603      	mov	r3, r0
 800493c:	2b01      	cmp	r3, #1
 800493e:	d00b      	beq.n	8004958 <osMessageQueuePut+0xd4>
        if (timeout != 0U) {
 8004940:	683b      	ldr	r3, [r7, #0]
 8004942:	2b00      	cmp	r3, #0
 8004944:	d003      	beq.n	800494e <osMessageQueuePut+0xca>
          stat = osErrorTimeout;
 8004946:	f06f 0301 	mvn.w	r3, #1
 800494a:	627b      	str	r3, [r7, #36]	; 0x24
 800494c:	e004      	b.n	8004958 <osMessageQueuePut+0xd4>
        } else {
          stat = osErrorResource;
 800494e:	f06f 0302 	mvn.w	r3, #2
 8004952:	627b      	str	r3, [r7, #36]	; 0x24
 8004954:	e000      	b.n	8004958 <osMessageQueuePut+0xd4>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8004956:	bf00      	nop
        }
      }
    }
  }

  return (stat);
 8004958:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800495a:	4618      	mov	r0, r3
 800495c:	3728      	adds	r7, #40	; 0x28
 800495e:	46bd      	mov	sp, r7
 8004960:	bd80      	pop	{r7, pc}
 8004962:	bf00      	nop
 8004964:	20000034 	.word	0x20000034
 8004968:	e000ed04 	.word	0xe000ed04

0800496c <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 800496c:	b580      	push	{r7, lr}
 800496e:	b08a      	sub	sp, #40	; 0x28
 8004970:	af00      	add	r7, sp, #0
 8004972:	60f8      	str	r0, [r7, #12]
 8004974:	60b9      	str	r1, [r7, #8]
 8004976:	607a      	str	r2, [r7, #4]
 8004978:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800497a:	68fb      	ldr	r3, [r7, #12]
 800497c:	623b      	str	r3, [r7, #32]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 800497e:	2300      	movs	r3, #0
 8004980:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004982:	f3ef 8305 	mrs	r3, IPSR
 8004986:	61fb      	str	r3, [r7, #28]
  return(result);
 8004988:	69fb      	ldr	r3, [r7, #28]

  if (IS_IRQ()) {
 800498a:	2b00      	cmp	r3, #0
 800498c:	d10f      	bne.n	80049ae <osMessageQueueGet+0x42>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800498e:	f3ef 8310 	mrs	r3, PRIMASK
 8004992:	61bb      	str	r3, [r7, #24]
  return(result);
 8004994:	69bb      	ldr	r3, [r7, #24]
 8004996:	2b00      	cmp	r3, #0
 8004998:	d105      	bne.n	80049a6 <osMessageQueueGet+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800499a:	f3ef 8311 	mrs	r3, BASEPRI
 800499e:	617b      	str	r3, [r7, #20]
  return(result);
 80049a0:	697b      	ldr	r3, [r7, #20]
 80049a2:	2b00      	cmp	r3, #0
 80049a4:	d02c      	beq.n	8004a00 <osMessageQueueGet+0x94>
 80049a6:	4b28      	ldr	r3, [pc, #160]	; (8004a48 <osMessageQueueGet+0xdc>)
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	2b02      	cmp	r3, #2
 80049ac:	d128      	bne.n	8004a00 <osMessageQueueGet+0x94>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80049ae:	6a3b      	ldr	r3, [r7, #32]
 80049b0:	2b00      	cmp	r3, #0
 80049b2:	d005      	beq.n	80049c0 <osMessageQueueGet+0x54>
 80049b4:	68bb      	ldr	r3, [r7, #8]
 80049b6:	2b00      	cmp	r3, #0
 80049b8:	d002      	beq.n	80049c0 <osMessageQueueGet+0x54>
 80049ba:	683b      	ldr	r3, [r7, #0]
 80049bc:	2b00      	cmp	r3, #0
 80049be:	d003      	beq.n	80049c8 <osMessageQueueGet+0x5c>
      stat = osErrorParameter;
 80049c0:	f06f 0303 	mvn.w	r3, #3
 80049c4:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80049c6:	e038      	b.n	8004a3a <osMessageQueueGet+0xce>
    }
    else {
      yield = pdFALSE;
 80049c8:	2300      	movs	r3, #0
 80049ca:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 80049cc:	f107 0310 	add.w	r3, r7, #16
 80049d0:	461a      	mov	r2, r3
 80049d2:	68b9      	ldr	r1, [r7, #8]
 80049d4:	6a38      	ldr	r0, [r7, #32]
 80049d6:	f000 fd01 	bl	80053dc <xQueueReceiveFromISR>
 80049da:	4603      	mov	r3, r0
 80049dc:	2b01      	cmp	r3, #1
 80049de:	d003      	beq.n	80049e8 <osMessageQueueGet+0x7c>
        stat = osErrorResource;
 80049e0:	f06f 0302 	mvn.w	r3, #2
 80049e4:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80049e6:	e028      	b.n	8004a3a <osMessageQueueGet+0xce>
      } else {
        portYIELD_FROM_ISR (yield);
 80049e8:	693b      	ldr	r3, [r7, #16]
 80049ea:	2b00      	cmp	r3, #0
 80049ec:	d025      	beq.n	8004a3a <osMessageQueueGet+0xce>
 80049ee:	4b17      	ldr	r3, [pc, #92]	; (8004a4c <osMessageQueueGet+0xe0>)
 80049f0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80049f4:	601a      	str	r2, [r3, #0]
 80049f6:	f3bf 8f4f 	dsb	sy
 80049fa:	f3bf 8f6f 	isb	sy
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80049fe:	e01c      	b.n	8004a3a <osMessageQueueGet+0xce>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8004a00:	6a3b      	ldr	r3, [r7, #32]
 8004a02:	2b00      	cmp	r3, #0
 8004a04:	d002      	beq.n	8004a0c <osMessageQueueGet+0xa0>
 8004a06:	68bb      	ldr	r3, [r7, #8]
 8004a08:	2b00      	cmp	r3, #0
 8004a0a:	d103      	bne.n	8004a14 <osMessageQueueGet+0xa8>
      stat = osErrorParameter;
 8004a0c:	f06f 0303 	mvn.w	r3, #3
 8004a10:	627b      	str	r3, [r7, #36]	; 0x24
 8004a12:	e013      	b.n	8004a3c <osMessageQueueGet+0xd0>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8004a14:	683a      	ldr	r2, [r7, #0]
 8004a16:	68b9      	ldr	r1, [r7, #8]
 8004a18:	6a38      	ldr	r0, [r7, #32]
 8004a1a:	f000 fbf9 	bl	8005210 <xQueueReceive>
 8004a1e:	4603      	mov	r3, r0
 8004a20:	2b01      	cmp	r3, #1
 8004a22:	d00b      	beq.n	8004a3c <osMessageQueueGet+0xd0>
        if (timeout != 0U) {
 8004a24:	683b      	ldr	r3, [r7, #0]
 8004a26:	2b00      	cmp	r3, #0
 8004a28:	d003      	beq.n	8004a32 <osMessageQueueGet+0xc6>
          stat = osErrorTimeout;
 8004a2a:	f06f 0301 	mvn.w	r3, #1
 8004a2e:	627b      	str	r3, [r7, #36]	; 0x24
 8004a30:	e004      	b.n	8004a3c <osMessageQueueGet+0xd0>
        } else {
          stat = osErrorResource;
 8004a32:	f06f 0302 	mvn.w	r3, #2
 8004a36:	627b      	str	r3, [r7, #36]	; 0x24
 8004a38:	e000      	b.n	8004a3c <osMessageQueueGet+0xd0>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8004a3a:	bf00      	nop
        }
      }
    }
  }

  return (stat);
 8004a3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8004a3e:	4618      	mov	r0, r3
 8004a40:	3728      	adds	r7, #40	; 0x28
 8004a42:	46bd      	mov	sp, r7
 8004a44:	bd80      	pop	{r7, pc}
 8004a46:	bf00      	nop
 8004a48:	20000034 	.word	0x20000034
 8004a4c:	e000ed04 	.word	0xe000ed04

08004a50 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8004a50:	b480      	push	{r7}
 8004a52:	b085      	sub	sp, #20
 8004a54:	af00      	add	r7, sp, #0
 8004a56:	60f8      	str	r0, [r7, #12]
 8004a58:	60b9      	str	r1, [r7, #8]
 8004a5a:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8004a5c:	68fb      	ldr	r3, [r7, #12]
 8004a5e:	4a07      	ldr	r2, [pc, #28]	; (8004a7c <vApplicationGetIdleTaskMemory+0x2c>)
 8004a60:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8004a62:	68bb      	ldr	r3, [r7, #8]
 8004a64:	4a06      	ldr	r2, [pc, #24]	; (8004a80 <vApplicationGetIdleTaskMemory+0x30>)
 8004a66:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	2280      	movs	r2, #128	; 0x80
 8004a6c:	601a      	str	r2, [r3, #0]
}
 8004a6e:	bf00      	nop
 8004a70:	3714      	adds	r7, #20
 8004a72:	46bd      	mov	sp, r7
 8004a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a78:	4770      	bx	lr
 8004a7a:	bf00      	nop
 8004a7c:	20000038 	.word	0x20000038
 8004a80:	20000094 	.word	0x20000094

08004a84 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8004a84:	b480      	push	{r7}
 8004a86:	b085      	sub	sp, #20
 8004a88:	af00      	add	r7, sp, #0
 8004a8a:	60f8      	str	r0, [r7, #12]
 8004a8c:	60b9      	str	r1, [r7, #8]
 8004a8e:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8004a90:	68fb      	ldr	r3, [r7, #12]
 8004a92:	4a07      	ldr	r2, [pc, #28]	; (8004ab0 <vApplicationGetTimerTaskMemory+0x2c>)
 8004a94:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8004a96:	68bb      	ldr	r3, [r7, #8]
 8004a98:	4a06      	ldr	r2, [pc, #24]	; (8004ab4 <vApplicationGetTimerTaskMemory+0x30>)
 8004a9a:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004aa2:	601a      	str	r2, [r3, #0]
}
 8004aa4:	bf00      	nop
 8004aa6:	3714      	adds	r7, #20
 8004aa8:	46bd      	mov	sp, r7
 8004aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aae:	4770      	bx	lr
 8004ab0:	20000294 	.word	0x20000294
 8004ab4:	200002f0 	.word	0x200002f0

08004ab8 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8004ab8:	b480      	push	{r7}
 8004aba:	b083      	sub	sp, #12
 8004abc:	af00      	add	r7, sp, #0
 8004abe:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	f103 0208 	add.w	r2, r3, #8
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	f04f 32ff 	mov.w	r2, #4294967295
 8004ad0:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	f103 0208 	add.w	r2, r3, #8
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	f103 0208 	add.w	r2, r3, #8
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	2200      	movs	r2, #0
 8004aea:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8004aec:	bf00      	nop
 8004aee:	370c      	adds	r7, #12
 8004af0:	46bd      	mov	sp, r7
 8004af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004af6:	4770      	bx	lr

08004af8 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8004af8:	b480      	push	{r7}
 8004afa:	b083      	sub	sp, #12
 8004afc:	af00      	add	r7, sp, #0
 8004afe:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	2200      	movs	r2, #0
 8004b04:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8004b06:	bf00      	nop
 8004b08:	370c      	adds	r7, #12
 8004b0a:	46bd      	mov	sp, r7
 8004b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b10:	4770      	bx	lr

08004b12 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004b12:	b480      	push	{r7}
 8004b14:	b085      	sub	sp, #20
 8004b16:	af00      	add	r7, sp, #0
 8004b18:	6078      	str	r0, [r7, #4]
 8004b1a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	685b      	ldr	r3, [r3, #4]
 8004b20:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8004b22:	683b      	ldr	r3, [r7, #0]
 8004b24:	68fa      	ldr	r2, [r7, #12]
 8004b26:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8004b28:	68fb      	ldr	r3, [r7, #12]
 8004b2a:	689a      	ldr	r2, [r3, #8]
 8004b2c:	683b      	ldr	r3, [r7, #0]
 8004b2e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8004b30:	68fb      	ldr	r3, [r7, #12]
 8004b32:	689b      	ldr	r3, [r3, #8]
 8004b34:	683a      	ldr	r2, [r7, #0]
 8004b36:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8004b38:	68fb      	ldr	r3, [r7, #12]
 8004b3a:	683a      	ldr	r2, [r7, #0]
 8004b3c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8004b3e:	683b      	ldr	r3, [r7, #0]
 8004b40:	687a      	ldr	r2, [r7, #4]
 8004b42:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	1c5a      	adds	r2, r3, #1
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	601a      	str	r2, [r3, #0]
}
 8004b4e:	bf00      	nop
 8004b50:	3714      	adds	r7, #20
 8004b52:	46bd      	mov	sp, r7
 8004b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b58:	4770      	bx	lr

08004b5a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004b5a:	b480      	push	{r7}
 8004b5c:	b085      	sub	sp, #20
 8004b5e:	af00      	add	r7, sp, #0
 8004b60:	6078      	str	r0, [r7, #4]
 8004b62:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8004b64:	683b      	ldr	r3, [r7, #0]
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8004b6a:	68bb      	ldr	r3, [r7, #8]
 8004b6c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b70:	d103      	bne.n	8004b7a <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	691b      	ldr	r3, [r3, #16]
 8004b76:	60fb      	str	r3, [r7, #12]
 8004b78:	e00c      	b.n	8004b94 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	3308      	adds	r3, #8
 8004b7e:	60fb      	str	r3, [r7, #12]
 8004b80:	e002      	b.n	8004b88 <vListInsert+0x2e>
 8004b82:	68fb      	ldr	r3, [r7, #12]
 8004b84:	685b      	ldr	r3, [r3, #4]
 8004b86:	60fb      	str	r3, [r7, #12]
 8004b88:	68fb      	ldr	r3, [r7, #12]
 8004b8a:	685b      	ldr	r3, [r3, #4]
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	68ba      	ldr	r2, [r7, #8]
 8004b90:	429a      	cmp	r2, r3
 8004b92:	d2f6      	bcs.n	8004b82 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8004b94:	68fb      	ldr	r3, [r7, #12]
 8004b96:	685a      	ldr	r2, [r3, #4]
 8004b98:	683b      	ldr	r3, [r7, #0]
 8004b9a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8004b9c:	683b      	ldr	r3, [r7, #0]
 8004b9e:	685b      	ldr	r3, [r3, #4]
 8004ba0:	683a      	ldr	r2, [r7, #0]
 8004ba2:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8004ba4:	683b      	ldr	r3, [r7, #0]
 8004ba6:	68fa      	ldr	r2, [r7, #12]
 8004ba8:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8004baa:	68fb      	ldr	r3, [r7, #12]
 8004bac:	683a      	ldr	r2, [r7, #0]
 8004bae:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8004bb0:	683b      	ldr	r3, [r7, #0]
 8004bb2:	687a      	ldr	r2, [r7, #4]
 8004bb4:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	1c5a      	adds	r2, r3, #1
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	601a      	str	r2, [r3, #0]
}
 8004bc0:	bf00      	nop
 8004bc2:	3714      	adds	r7, #20
 8004bc4:	46bd      	mov	sp, r7
 8004bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bca:	4770      	bx	lr

08004bcc <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8004bcc:	b480      	push	{r7}
 8004bce:	b085      	sub	sp, #20
 8004bd0:	af00      	add	r7, sp, #0
 8004bd2:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	691b      	ldr	r3, [r3, #16]
 8004bd8:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	685b      	ldr	r3, [r3, #4]
 8004bde:	687a      	ldr	r2, [r7, #4]
 8004be0:	6892      	ldr	r2, [r2, #8]
 8004be2:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	689b      	ldr	r3, [r3, #8]
 8004be8:	687a      	ldr	r2, [r7, #4]
 8004bea:	6852      	ldr	r2, [r2, #4]
 8004bec:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8004bee:	68fb      	ldr	r3, [r7, #12]
 8004bf0:	685b      	ldr	r3, [r3, #4]
 8004bf2:	687a      	ldr	r2, [r7, #4]
 8004bf4:	429a      	cmp	r2, r3
 8004bf6:	d103      	bne.n	8004c00 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	689a      	ldr	r2, [r3, #8]
 8004bfc:	68fb      	ldr	r3, [r7, #12]
 8004bfe:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	2200      	movs	r2, #0
 8004c04:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8004c06:	68fb      	ldr	r3, [r7, #12]
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	1e5a      	subs	r2, r3, #1
 8004c0c:	68fb      	ldr	r3, [r7, #12]
 8004c0e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8004c10:	68fb      	ldr	r3, [r7, #12]
 8004c12:	681b      	ldr	r3, [r3, #0]
}
 8004c14:	4618      	mov	r0, r3
 8004c16:	3714      	adds	r7, #20
 8004c18:	46bd      	mov	sp, r7
 8004c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c1e:	4770      	bx	lr

08004c20 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8004c20:	b580      	push	{r7, lr}
 8004c22:	b084      	sub	sp, #16
 8004c24:	af00      	add	r7, sp, #0
 8004c26:	6078      	str	r0, [r7, #4]
 8004c28:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8004c2e:	68fb      	ldr	r3, [r7, #12]
 8004c30:	2b00      	cmp	r3, #0
 8004c32:	d10c      	bne.n	8004c4e <xQueueGenericReset+0x2e>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8004c34:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c38:	b672      	cpsid	i
 8004c3a:	f383 8811 	msr	BASEPRI, r3
 8004c3e:	f3bf 8f6f 	isb	sy
 8004c42:	f3bf 8f4f 	dsb	sy
 8004c46:	b662      	cpsie	i
 8004c48:	60bb      	str	r3, [r7, #8]
		"	isb														\n" \
		"	dsb														\n" \
		"	cpsie i													\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8004c4a:	bf00      	nop
 8004c4c:	e7fe      	b.n	8004c4c <xQueueGenericReset+0x2c>

	taskENTER_CRITICAL();
 8004c4e:	f002 f945 	bl	8006edc <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004c52:	68fb      	ldr	r3, [r7, #12]
 8004c54:	681a      	ldr	r2, [r3, #0]
 8004c56:	68fb      	ldr	r3, [r7, #12]
 8004c58:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004c5a:	68f9      	ldr	r1, [r7, #12]
 8004c5c:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8004c5e:	fb01 f303 	mul.w	r3, r1, r3
 8004c62:	441a      	add	r2, r3
 8004c64:	68fb      	ldr	r3, [r7, #12]
 8004c66:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8004c68:	68fb      	ldr	r3, [r7, #12]
 8004c6a:	2200      	movs	r2, #0
 8004c6c:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8004c6e:	68fb      	ldr	r3, [r7, #12]
 8004c70:	681a      	ldr	r2, [r3, #0]
 8004c72:	68fb      	ldr	r3, [r7, #12]
 8004c74:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004c76:	68fb      	ldr	r3, [r7, #12]
 8004c78:	681a      	ldr	r2, [r3, #0]
 8004c7a:	68fb      	ldr	r3, [r7, #12]
 8004c7c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004c7e:	3b01      	subs	r3, #1
 8004c80:	68f9      	ldr	r1, [r7, #12]
 8004c82:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8004c84:	fb01 f303 	mul.w	r3, r1, r3
 8004c88:	441a      	add	r2, r3
 8004c8a:	68fb      	ldr	r3, [r7, #12]
 8004c8c:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8004c8e:	68fb      	ldr	r3, [r7, #12]
 8004c90:	22ff      	movs	r2, #255	; 0xff
 8004c92:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8004c96:	68fb      	ldr	r3, [r7, #12]
 8004c98:	22ff      	movs	r2, #255	; 0xff
 8004c9a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8004c9e:	683b      	ldr	r3, [r7, #0]
 8004ca0:	2b00      	cmp	r3, #0
 8004ca2:	d114      	bne.n	8004cce <xQueueGenericReset+0xae>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004ca4:	68fb      	ldr	r3, [r7, #12]
 8004ca6:	691b      	ldr	r3, [r3, #16]
 8004ca8:	2b00      	cmp	r3, #0
 8004caa:	d01a      	beq.n	8004ce2 <xQueueGenericReset+0xc2>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004cac:	68fb      	ldr	r3, [r7, #12]
 8004cae:	3310      	adds	r3, #16
 8004cb0:	4618      	mov	r0, r3
 8004cb2:	f001 f9ff 	bl	80060b4 <xTaskRemoveFromEventList>
 8004cb6:	4603      	mov	r3, r0
 8004cb8:	2b00      	cmp	r3, #0
 8004cba:	d012      	beq.n	8004ce2 <xQueueGenericReset+0xc2>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8004cbc:	4b0c      	ldr	r3, [pc, #48]	; (8004cf0 <xQueueGenericReset+0xd0>)
 8004cbe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004cc2:	601a      	str	r2, [r3, #0]
 8004cc4:	f3bf 8f4f 	dsb	sy
 8004cc8:	f3bf 8f6f 	isb	sy
 8004ccc:	e009      	b.n	8004ce2 <xQueueGenericReset+0xc2>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8004cce:	68fb      	ldr	r3, [r7, #12]
 8004cd0:	3310      	adds	r3, #16
 8004cd2:	4618      	mov	r0, r3
 8004cd4:	f7ff fef0 	bl	8004ab8 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8004cd8:	68fb      	ldr	r3, [r7, #12]
 8004cda:	3324      	adds	r3, #36	; 0x24
 8004cdc:	4618      	mov	r0, r3
 8004cde:	f7ff feeb 	bl	8004ab8 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8004ce2:	f002 f92f 	bl	8006f44 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8004ce6:	2301      	movs	r3, #1
}
 8004ce8:	4618      	mov	r0, r3
 8004cea:	3710      	adds	r7, #16
 8004cec:	46bd      	mov	sp, r7
 8004cee:	bd80      	pop	{r7, pc}
 8004cf0:	e000ed04 	.word	0xe000ed04

08004cf4 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8004cf4:	b580      	push	{r7, lr}
 8004cf6:	b08e      	sub	sp, #56	; 0x38
 8004cf8:	af02      	add	r7, sp, #8
 8004cfa:	60f8      	str	r0, [r7, #12]
 8004cfc:	60b9      	str	r1, [r7, #8]
 8004cfe:	607a      	str	r2, [r7, #4]
 8004d00:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8004d02:	68fb      	ldr	r3, [r7, #12]
 8004d04:	2b00      	cmp	r3, #0
 8004d06:	d10c      	bne.n	8004d22 <xQueueGenericCreateStatic+0x2e>
	__asm volatile
 8004d08:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d0c:	b672      	cpsid	i
 8004d0e:	f383 8811 	msr	BASEPRI, r3
 8004d12:	f3bf 8f6f 	isb	sy
 8004d16:	f3bf 8f4f 	dsb	sy
 8004d1a:	b662      	cpsie	i
 8004d1c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8004d1e:	bf00      	nop
 8004d20:	e7fe      	b.n	8004d20 <xQueueGenericCreateStatic+0x2c>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8004d22:	683b      	ldr	r3, [r7, #0]
 8004d24:	2b00      	cmp	r3, #0
 8004d26:	d10c      	bne.n	8004d42 <xQueueGenericCreateStatic+0x4e>
	__asm volatile
 8004d28:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d2c:	b672      	cpsid	i
 8004d2e:	f383 8811 	msr	BASEPRI, r3
 8004d32:	f3bf 8f6f 	isb	sy
 8004d36:	f3bf 8f4f 	dsb	sy
 8004d3a:	b662      	cpsie	i
 8004d3c:	627b      	str	r3, [r7, #36]	; 0x24
}
 8004d3e:	bf00      	nop
 8004d40:	e7fe      	b.n	8004d40 <xQueueGenericCreateStatic+0x4c>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	2b00      	cmp	r3, #0
 8004d46:	d002      	beq.n	8004d4e <xQueueGenericCreateStatic+0x5a>
 8004d48:	68bb      	ldr	r3, [r7, #8]
 8004d4a:	2b00      	cmp	r3, #0
 8004d4c:	d001      	beq.n	8004d52 <xQueueGenericCreateStatic+0x5e>
 8004d4e:	2301      	movs	r3, #1
 8004d50:	e000      	b.n	8004d54 <xQueueGenericCreateStatic+0x60>
 8004d52:	2300      	movs	r3, #0
 8004d54:	2b00      	cmp	r3, #0
 8004d56:	d10c      	bne.n	8004d72 <xQueueGenericCreateStatic+0x7e>
	__asm volatile
 8004d58:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d5c:	b672      	cpsid	i
 8004d5e:	f383 8811 	msr	BASEPRI, r3
 8004d62:	f3bf 8f6f 	isb	sy
 8004d66:	f3bf 8f4f 	dsb	sy
 8004d6a:	b662      	cpsie	i
 8004d6c:	623b      	str	r3, [r7, #32]
}
 8004d6e:	bf00      	nop
 8004d70:	e7fe      	b.n	8004d70 <xQueueGenericCreateStatic+0x7c>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	2b00      	cmp	r3, #0
 8004d76:	d102      	bne.n	8004d7e <xQueueGenericCreateStatic+0x8a>
 8004d78:	68bb      	ldr	r3, [r7, #8]
 8004d7a:	2b00      	cmp	r3, #0
 8004d7c:	d101      	bne.n	8004d82 <xQueueGenericCreateStatic+0x8e>
 8004d7e:	2301      	movs	r3, #1
 8004d80:	e000      	b.n	8004d84 <xQueueGenericCreateStatic+0x90>
 8004d82:	2300      	movs	r3, #0
 8004d84:	2b00      	cmp	r3, #0
 8004d86:	d10c      	bne.n	8004da2 <xQueueGenericCreateStatic+0xae>
	__asm volatile
 8004d88:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d8c:	b672      	cpsid	i
 8004d8e:	f383 8811 	msr	BASEPRI, r3
 8004d92:	f3bf 8f6f 	isb	sy
 8004d96:	f3bf 8f4f 	dsb	sy
 8004d9a:	b662      	cpsie	i
 8004d9c:	61fb      	str	r3, [r7, #28]
}
 8004d9e:	bf00      	nop
 8004da0:	e7fe      	b.n	8004da0 <xQueueGenericCreateStatic+0xac>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8004da2:	2350      	movs	r3, #80	; 0x50
 8004da4:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8004da6:	697b      	ldr	r3, [r7, #20]
 8004da8:	2b50      	cmp	r3, #80	; 0x50
 8004daa:	d00c      	beq.n	8004dc6 <xQueueGenericCreateStatic+0xd2>
	__asm volatile
 8004dac:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004db0:	b672      	cpsid	i
 8004db2:	f383 8811 	msr	BASEPRI, r3
 8004db6:	f3bf 8f6f 	isb	sy
 8004dba:	f3bf 8f4f 	dsb	sy
 8004dbe:	b662      	cpsie	i
 8004dc0:	61bb      	str	r3, [r7, #24]
}
 8004dc2:	bf00      	nop
 8004dc4:	e7fe      	b.n	8004dc4 <xQueueGenericCreateStatic+0xd0>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8004dc6:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8004dc8:	683b      	ldr	r3, [r7, #0]
 8004dca:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8004dcc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004dce:	2b00      	cmp	r3, #0
 8004dd0:	d00d      	beq.n	8004dee <xQueueGenericCreateStatic+0xfa>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8004dd2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004dd4:	2201      	movs	r2, #1
 8004dd6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8004dda:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8004dde:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004de0:	9300      	str	r3, [sp, #0]
 8004de2:	4613      	mov	r3, r2
 8004de4:	687a      	ldr	r2, [r7, #4]
 8004de6:	68b9      	ldr	r1, [r7, #8]
 8004de8:	68f8      	ldr	r0, [r7, #12]
 8004dea:	f000 f847 	bl	8004e7c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8004dee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8004df0:	4618      	mov	r0, r3
 8004df2:	3730      	adds	r7, #48	; 0x30
 8004df4:	46bd      	mov	sp, r7
 8004df6:	bd80      	pop	{r7, pc}

08004df8 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8004df8:	b580      	push	{r7, lr}
 8004dfa:	b08a      	sub	sp, #40	; 0x28
 8004dfc:	af02      	add	r7, sp, #8
 8004dfe:	60f8      	str	r0, [r7, #12]
 8004e00:	60b9      	str	r1, [r7, #8]
 8004e02:	4613      	mov	r3, r2
 8004e04:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8004e06:	68fb      	ldr	r3, [r7, #12]
 8004e08:	2b00      	cmp	r3, #0
 8004e0a:	d10c      	bne.n	8004e26 <xQueueGenericCreate+0x2e>
	__asm volatile
 8004e0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e10:	b672      	cpsid	i
 8004e12:	f383 8811 	msr	BASEPRI, r3
 8004e16:	f3bf 8f6f 	isb	sy
 8004e1a:	f3bf 8f4f 	dsb	sy
 8004e1e:	b662      	cpsie	i
 8004e20:	613b      	str	r3, [r7, #16]
}
 8004e22:	bf00      	nop
 8004e24:	e7fe      	b.n	8004e24 <xQueueGenericCreate+0x2c>

		if( uxItemSize == ( UBaseType_t ) 0 )
 8004e26:	68bb      	ldr	r3, [r7, #8]
 8004e28:	2b00      	cmp	r3, #0
 8004e2a:	d102      	bne.n	8004e32 <xQueueGenericCreate+0x3a>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8004e2c:	2300      	movs	r3, #0
 8004e2e:	61fb      	str	r3, [r7, #28]
 8004e30:	e004      	b.n	8004e3c <xQueueGenericCreate+0x44>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004e32:	68fb      	ldr	r3, [r7, #12]
 8004e34:	68ba      	ldr	r2, [r7, #8]
 8004e36:	fb02 f303 	mul.w	r3, r2, r3
 8004e3a:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8004e3c:	69fb      	ldr	r3, [r7, #28]
 8004e3e:	3350      	adds	r3, #80	; 0x50
 8004e40:	4618      	mov	r0, r3
 8004e42:	f002 f977 	bl	8007134 <pvPortMalloc>
 8004e46:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8004e48:	69bb      	ldr	r3, [r7, #24]
 8004e4a:	2b00      	cmp	r3, #0
 8004e4c:	d011      	beq.n	8004e72 <xQueueGenericCreate+0x7a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8004e4e:	69bb      	ldr	r3, [r7, #24]
 8004e50:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004e52:	697b      	ldr	r3, [r7, #20]
 8004e54:	3350      	adds	r3, #80	; 0x50
 8004e56:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8004e58:	69bb      	ldr	r3, [r7, #24]
 8004e5a:	2200      	movs	r2, #0
 8004e5c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8004e60:	79fa      	ldrb	r2, [r7, #7]
 8004e62:	69bb      	ldr	r3, [r7, #24]
 8004e64:	9300      	str	r3, [sp, #0]
 8004e66:	4613      	mov	r3, r2
 8004e68:	697a      	ldr	r2, [r7, #20]
 8004e6a:	68b9      	ldr	r1, [r7, #8]
 8004e6c:	68f8      	ldr	r0, [r7, #12]
 8004e6e:	f000 f805 	bl	8004e7c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8004e72:	69bb      	ldr	r3, [r7, #24]
	}
 8004e74:	4618      	mov	r0, r3
 8004e76:	3720      	adds	r7, #32
 8004e78:	46bd      	mov	sp, r7
 8004e7a:	bd80      	pop	{r7, pc}

08004e7c <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8004e7c:	b580      	push	{r7, lr}
 8004e7e:	b084      	sub	sp, #16
 8004e80:	af00      	add	r7, sp, #0
 8004e82:	60f8      	str	r0, [r7, #12]
 8004e84:	60b9      	str	r1, [r7, #8]
 8004e86:	607a      	str	r2, [r7, #4]
 8004e88:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8004e8a:	68bb      	ldr	r3, [r7, #8]
 8004e8c:	2b00      	cmp	r3, #0
 8004e8e:	d103      	bne.n	8004e98 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8004e90:	69bb      	ldr	r3, [r7, #24]
 8004e92:	69ba      	ldr	r2, [r7, #24]
 8004e94:	601a      	str	r2, [r3, #0]
 8004e96:	e002      	b.n	8004e9e <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8004e98:	69bb      	ldr	r3, [r7, #24]
 8004e9a:	687a      	ldr	r2, [r7, #4]
 8004e9c:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8004e9e:	69bb      	ldr	r3, [r7, #24]
 8004ea0:	68fa      	ldr	r2, [r7, #12]
 8004ea2:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8004ea4:	69bb      	ldr	r3, [r7, #24]
 8004ea6:	68ba      	ldr	r2, [r7, #8]
 8004ea8:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8004eaa:	2101      	movs	r1, #1
 8004eac:	69b8      	ldr	r0, [r7, #24]
 8004eae:	f7ff feb7 	bl	8004c20 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8004eb2:	69bb      	ldr	r3, [r7, #24]
 8004eb4:	78fa      	ldrb	r2, [r7, #3]
 8004eb6:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8004eba:	bf00      	nop
 8004ebc:	3710      	adds	r7, #16
 8004ebe:	46bd      	mov	sp, r7
 8004ec0:	bd80      	pop	{r7, pc}
	...

08004ec4 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8004ec4:	b580      	push	{r7, lr}
 8004ec6:	b08e      	sub	sp, #56	; 0x38
 8004ec8:	af00      	add	r7, sp, #0
 8004eca:	60f8      	str	r0, [r7, #12]
 8004ecc:	60b9      	str	r1, [r7, #8]
 8004ece:	607a      	str	r2, [r7, #4]
 8004ed0:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8004ed2:	2300      	movs	r3, #0
 8004ed4:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8004ed6:	68fb      	ldr	r3, [r7, #12]
 8004ed8:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8004eda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004edc:	2b00      	cmp	r3, #0
 8004ede:	d10c      	bne.n	8004efa <xQueueGenericSend+0x36>
	__asm volatile
 8004ee0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ee4:	b672      	cpsid	i
 8004ee6:	f383 8811 	msr	BASEPRI, r3
 8004eea:	f3bf 8f6f 	isb	sy
 8004eee:	f3bf 8f4f 	dsb	sy
 8004ef2:	b662      	cpsie	i
 8004ef4:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8004ef6:	bf00      	nop
 8004ef8:	e7fe      	b.n	8004ef8 <xQueueGenericSend+0x34>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004efa:	68bb      	ldr	r3, [r7, #8]
 8004efc:	2b00      	cmp	r3, #0
 8004efe:	d103      	bne.n	8004f08 <xQueueGenericSend+0x44>
 8004f00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f04:	2b00      	cmp	r3, #0
 8004f06:	d101      	bne.n	8004f0c <xQueueGenericSend+0x48>
 8004f08:	2301      	movs	r3, #1
 8004f0a:	e000      	b.n	8004f0e <xQueueGenericSend+0x4a>
 8004f0c:	2300      	movs	r3, #0
 8004f0e:	2b00      	cmp	r3, #0
 8004f10:	d10c      	bne.n	8004f2c <xQueueGenericSend+0x68>
	__asm volatile
 8004f12:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f16:	b672      	cpsid	i
 8004f18:	f383 8811 	msr	BASEPRI, r3
 8004f1c:	f3bf 8f6f 	isb	sy
 8004f20:	f3bf 8f4f 	dsb	sy
 8004f24:	b662      	cpsie	i
 8004f26:	627b      	str	r3, [r7, #36]	; 0x24
}
 8004f28:	bf00      	nop
 8004f2a:	e7fe      	b.n	8004f2a <xQueueGenericSend+0x66>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004f2c:	683b      	ldr	r3, [r7, #0]
 8004f2e:	2b02      	cmp	r3, #2
 8004f30:	d103      	bne.n	8004f3a <xQueueGenericSend+0x76>
 8004f32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f34:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004f36:	2b01      	cmp	r3, #1
 8004f38:	d101      	bne.n	8004f3e <xQueueGenericSend+0x7a>
 8004f3a:	2301      	movs	r3, #1
 8004f3c:	e000      	b.n	8004f40 <xQueueGenericSend+0x7c>
 8004f3e:	2300      	movs	r3, #0
 8004f40:	2b00      	cmp	r3, #0
 8004f42:	d10c      	bne.n	8004f5e <xQueueGenericSend+0x9a>
	__asm volatile
 8004f44:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f48:	b672      	cpsid	i
 8004f4a:	f383 8811 	msr	BASEPRI, r3
 8004f4e:	f3bf 8f6f 	isb	sy
 8004f52:	f3bf 8f4f 	dsb	sy
 8004f56:	b662      	cpsie	i
 8004f58:	623b      	str	r3, [r7, #32]
}
 8004f5a:	bf00      	nop
 8004f5c:	e7fe      	b.n	8004f5c <xQueueGenericSend+0x98>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004f5e:	f001 fa6f 	bl	8006440 <xTaskGetSchedulerState>
 8004f62:	4603      	mov	r3, r0
 8004f64:	2b00      	cmp	r3, #0
 8004f66:	d102      	bne.n	8004f6e <xQueueGenericSend+0xaa>
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	2b00      	cmp	r3, #0
 8004f6c:	d101      	bne.n	8004f72 <xQueueGenericSend+0xae>
 8004f6e:	2301      	movs	r3, #1
 8004f70:	e000      	b.n	8004f74 <xQueueGenericSend+0xb0>
 8004f72:	2300      	movs	r3, #0
 8004f74:	2b00      	cmp	r3, #0
 8004f76:	d10c      	bne.n	8004f92 <xQueueGenericSend+0xce>
	__asm volatile
 8004f78:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f7c:	b672      	cpsid	i
 8004f7e:	f383 8811 	msr	BASEPRI, r3
 8004f82:	f3bf 8f6f 	isb	sy
 8004f86:	f3bf 8f4f 	dsb	sy
 8004f8a:	b662      	cpsie	i
 8004f8c:	61fb      	str	r3, [r7, #28]
}
 8004f8e:	bf00      	nop
 8004f90:	e7fe      	b.n	8004f90 <xQueueGenericSend+0xcc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8004f92:	f001 ffa3 	bl	8006edc <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8004f96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f98:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004f9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f9c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004f9e:	429a      	cmp	r2, r3
 8004fa0:	d302      	bcc.n	8004fa8 <xQueueGenericSend+0xe4>
 8004fa2:	683b      	ldr	r3, [r7, #0]
 8004fa4:	2b02      	cmp	r3, #2
 8004fa6:	d129      	bne.n	8004ffc <xQueueGenericSend+0x138>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004fa8:	683a      	ldr	r2, [r7, #0]
 8004faa:	68b9      	ldr	r1, [r7, #8]
 8004fac:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004fae:	f000 fa9b 	bl	80054e8 <prvCopyDataToQueue>
 8004fb2:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004fb4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004fb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fb8:	2b00      	cmp	r3, #0
 8004fba:	d010      	beq.n	8004fde <xQueueGenericSend+0x11a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004fbc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004fbe:	3324      	adds	r3, #36	; 0x24
 8004fc0:	4618      	mov	r0, r3
 8004fc2:	f001 f877 	bl	80060b4 <xTaskRemoveFromEventList>
 8004fc6:	4603      	mov	r3, r0
 8004fc8:	2b00      	cmp	r3, #0
 8004fca:	d013      	beq.n	8004ff4 <xQueueGenericSend+0x130>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8004fcc:	4b3f      	ldr	r3, [pc, #252]	; (80050cc <xQueueGenericSend+0x208>)
 8004fce:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004fd2:	601a      	str	r2, [r3, #0]
 8004fd4:	f3bf 8f4f 	dsb	sy
 8004fd8:	f3bf 8f6f 	isb	sy
 8004fdc:	e00a      	b.n	8004ff4 <xQueueGenericSend+0x130>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8004fde:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004fe0:	2b00      	cmp	r3, #0
 8004fe2:	d007      	beq.n	8004ff4 <xQueueGenericSend+0x130>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8004fe4:	4b39      	ldr	r3, [pc, #228]	; (80050cc <xQueueGenericSend+0x208>)
 8004fe6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004fea:	601a      	str	r2, [r3, #0]
 8004fec:	f3bf 8f4f 	dsb	sy
 8004ff0:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8004ff4:	f001 ffa6 	bl	8006f44 <vPortExitCritical>
				return pdPASS;
 8004ff8:	2301      	movs	r3, #1
 8004ffa:	e063      	b.n	80050c4 <xQueueGenericSend+0x200>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	2b00      	cmp	r3, #0
 8005000:	d103      	bne.n	800500a <xQueueGenericSend+0x146>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8005002:	f001 ff9f 	bl	8006f44 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8005006:	2300      	movs	r3, #0
 8005008:	e05c      	b.n	80050c4 <xQueueGenericSend+0x200>
				}
				else if( xEntryTimeSet == pdFALSE )
 800500a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800500c:	2b00      	cmp	r3, #0
 800500e:	d106      	bne.n	800501e <xQueueGenericSend+0x15a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005010:	f107 0314 	add.w	r3, r7, #20
 8005014:	4618      	mov	r0, r3
 8005016:	f001 f8b3 	bl	8006180 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800501a:	2301      	movs	r3, #1
 800501c:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800501e:	f001 ff91 	bl	8006f44 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005022:	f000 fe19 	bl	8005c58 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005026:	f001 ff59 	bl	8006edc <vPortEnterCritical>
 800502a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800502c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005030:	b25b      	sxtb	r3, r3
 8005032:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005036:	d103      	bne.n	8005040 <xQueueGenericSend+0x17c>
 8005038:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800503a:	2200      	movs	r2, #0
 800503c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005040:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005042:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005046:	b25b      	sxtb	r3, r3
 8005048:	f1b3 3fff 	cmp.w	r3, #4294967295
 800504c:	d103      	bne.n	8005056 <xQueueGenericSend+0x192>
 800504e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005050:	2200      	movs	r2, #0
 8005052:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005056:	f001 ff75 	bl	8006f44 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800505a:	1d3a      	adds	r2, r7, #4
 800505c:	f107 0314 	add.w	r3, r7, #20
 8005060:	4611      	mov	r1, r2
 8005062:	4618      	mov	r0, r3
 8005064:	f001 f8a2 	bl	80061ac <xTaskCheckForTimeOut>
 8005068:	4603      	mov	r3, r0
 800506a:	2b00      	cmp	r3, #0
 800506c:	d124      	bne.n	80050b8 <xQueueGenericSend+0x1f4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800506e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005070:	f000 fb32 	bl	80056d8 <prvIsQueueFull>
 8005074:	4603      	mov	r3, r0
 8005076:	2b00      	cmp	r3, #0
 8005078:	d018      	beq.n	80050ac <xQueueGenericSend+0x1e8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800507a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800507c:	3310      	adds	r3, #16
 800507e:	687a      	ldr	r2, [r7, #4]
 8005080:	4611      	mov	r1, r2
 8005082:	4618      	mov	r0, r3
 8005084:	f000 ffc2 	bl	800600c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8005088:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800508a:	f000 fabd 	bl	8005608 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800508e:	f000 fdf1 	bl	8005c74 <xTaskResumeAll>
 8005092:	4603      	mov	r3, r0
 8005094:	2b00      	cmp	r3, #0
 8005096:	f47f af7c 	bne.w	8004f92 <xQueueGenericSend+0xce>
				{
					portYIELD_WITHIN_API();
 800509a:	4b0c      	ldr	r3, [pc, #48]	; (80050cc <xQueueGenericSend+0x208>)
 800509c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80050a0:	601a      	str	r2, [r3, #0]
 80050a2:	f3bf 8f4f 	dsb	sy
 80050a6:	f3bf 8f6f 	isb	sy
 80050aa:	e772      	b.n	8004f92 <xQueueGenericSend+0xce>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80050ac:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80050ae:	f000 faab 	bl	8005608 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80050b2:	f000 fddf 	bl	8005c74 <xTaskResumeAll>
 80050b6:	e76c      	b.n	8004f92 <xQueueGenericSend+0xce>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80050b8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80050ba:	f000 faa5 	bl	8005608 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80050be:	f000 fdd9 	bl	8005c74 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80050c2:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80050c4:	4618      	mov	r0, r3
 80050c6:	3738      	adds	r7, #56	; 0x38
 80050c8:	46bd      	mov	sp, r7
 80050ca:	bd80      	pop	{r7, pc}
 80050cc:	e000ed04 	.word	0xe000ed04

080050d0 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80050d0:	b580      	push	{r7, lr}
 80050d2:	b08e      	sub	sp, #56	; 0x38
 80050d4:	af00      	add	r7, sp, #0
 80050d6:	60f8      	str	r0, [r7, #12]
 80050d8:	60b9      	str	r1, [r7, #8]
 80050da:	607a      	str	r2, [r7, #4]
 80050dc:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80050de:	68fb      	ldr	r3, [r7, #12]
 80050e0:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80050e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80050e4:	2b00      	cmp	r3, #0
 80050e6:	d10c      	bne.n	8005102 <xQueueGenericSendFromISR+0x32>
	__asm volatile
 80050e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80050ec:	b672      	cpsid	i
 80050ee:	f383 8811 	msr	BASEPRI, r3
 80050f2:	f3bf 8f6f 	isb	sy
 80050f6:	f3bf 8f4f 	dsb	sy
 80050fa:	b662      	cpsie	i
 80050fc:	627b      	str	r3, [r7, #36]	; 0x24
}
 80050fe:	bf00      	nop
 8005100:	e7fe      	b.n	8005100 <xQueueGenericSendFromISR+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005102:	68bb      	ldr	r3, [r7, #8]
 8005104:	2b00      	cmp	r3, #0
 8005106:	d103      	bne.n	8005110 <xQueueGenericSendFromISR+0x40>
 8005108:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800510a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800510c:	2b00      	cmp	r3, #0
 800510e:	d101      	bne.n	8005114 <xQueueGenericSendFromISR+0x44>
 8005110:	2301      	movs	r3, #1
 8005112:	e000      	b.n	8005116 <xQueueGenericSendFromISR+0x46>
 8005114:	2300      	movs	r3, #0
 8005116:	2b00      	cmp	r3, #0
 8005118:	d10c      	bne.n	8005134 <xQueueGenericSendFromISR+0x64>
	__asm volatile
 800511a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800511e:	b672      	cpsid	i
 8005120:	f383 8811 	msr	BASEPRI, r3
 8005124:	f3bf 8f6f 	isb	sy
 8005128:	f3bf 8f4f 	dsb	sy
 800512c:	b662      	cpsie	i
 800512e:	623b      	str	r3, [r7, #32]
}
 8005130:	bf00      	nop
 8005132:	e7fe      	b.n	8005132 <xQueueGenericSendFromISR+0x62>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005134:	683b      	ldr	r3, [r7, #0]
 8005136:	2b02      	cmp	r3, #2
 8005138:	d103      	bne.n	8005142 <xQueueGenericSendFromISR+0x72>
 800513a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800513c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800513e:	2b01      	cmp	r3, #1
 8005140:	d101      	bne.n	8005146 <xQueueGenericSendFromISR+0x76>
 8005142:	2301      	movs	r3, #1
 8005144:	e000      	b.n	8005148 <xQueueGenericSendFromISR+0x78>
 8005146:	2300      	movs	r3, #0
 8005148:	2b00      	cmp	r3, #0
 800514a:	d10c      	bne.n	8005166 <xQueueGenericSendFromISR+0x96>
	__asm volatile
 800514c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005150:	b672      	cpsid	i
 8005152:	f383 8811 	msr	BASEPRI, r3
 8005156:	f3bf 8f6f 	isb	sy
 800515a:	f3bf 8f4f 	dsb	sy
 800515e:	b662      	cpsie	i
 8005160:	61fb      	str	r3, [r7, #28]
}
 8005162:	bf00      	nop
 8005164:	e7fe      	b.n	8005164 <xQueueGenericSendFromISR+0x94>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8005166:	f001 ffa1 	bl	80070ac <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800516a:	f3ef 8211 	mrs	r2, BASEPRI
 800516e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005172:	b672      	cpsid	i
 8005174:	f383 8811 	msr	BASEPRI, r3
 8005178:	f3bf 8f6f 	isb	sy
 800517c:	f3bf 8f4f 	dsb	sy
 8005180:	b662      	cpsie	i
 8005182:	61ba      	str	r2, [r7, #24]
 8005184:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8005186:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8005188:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800518a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800518c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800518e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005190:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005192:	429a      	cmp	r2, r3
 8005194:	d302      	bcc.n	800519c <xQueueGenericSendFromISR+0xcc>
 8005196:	683b      	ldr	r3, [r7, #0]
 8005198:	2b02      	cmp	r3, #2
 800519a:	d12c      	bne.n	80051f6 <xQueueGenericSendFromISR+0x126>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800519c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800519e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80051a2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80051a6:	683a      	ldr	r2, [r7, #0]
 80051a8:	68b9      	ldr	r1, [r7, #8]
 80051aa:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80051ac:	f000 f99c 	bl	80054e8 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80051b0:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 80051b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80051b8:	d112      	bne.n	80051e0 <xQueueGenericSendFromISR+0x110>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80051ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80051bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051be:	2b00      	cmp	r3, #0
 80051c0:	d016      	beq.n	80051f0 <xQueueGenericSendFromISR+0x120>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80051c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80051c4:	3324      	adds	r3, #36	; 0x24
 80051c6:	4618      	mov	r0, r3
 80051c8:	f000 ff74 	bl	80060b4 <xTaskRemoveFromEventList>
 80051cc:	4603      	mov	r3, r0
 80051ce:	2b00      	cmp	r3, #0
 80051d0:	d00e      	beq.n	80051f0 <xQueueGenericSendFromISR+0x120>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	2b00      	cmp	r3, #0
 80051d6:	d00b      	beq.n	80051f0 <xQueueGenericSendFromISR+0x120>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	2201      	movs	r2, #1
 80051dc:	601a      	str	r2, [r3, #0]
 80051de:	e007      	b.n	80051f0 <xQueueGenericSendFromISR+0x120>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80051e0:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80051e4:	3301      	adds	r3, #1
 80051e6:	b2db      	uxtb	r3, r3
 80051e8:	b25a      	sxtb	r2, r3
 80051ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80051ec:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 80051f0:	2301      	movs	r3, #1
 80051f2:	637b      	str	r3, [r7, #52]	; 0x34
		{
 80051f4:	e001      	b.n	80051fa <xQueueGenericSendFromISR+0x12a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80051f6:	2300      	movs	r3, #0
 80051f8:	637b      	str	r3, [r7, #52]	; 0x34
 80051fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80051fc:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80051fe:	693b      	ldr	r3, [r7, #16]
 8005200:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8005204:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8005206:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8005208:	4618      	mov	r0, r3
 800520a:	3738      	adds	r7, #56	; 0x38
 800520c:	46bd      	mov	sp, r7
 800520e:	bd80      	pop	{r7, pc}

08005210 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8005210:	b580      	push	{r7, lr}
 8005212:	b08c      	sub	sp, #48	; 0x30
 8005214:	af00      	add	r7, sp, #0
 8005216:	60f8      	str	r0, [r7, #12]
 8005218:	60b9      	str	r1, [r7, #8]
 800521a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800521c:	2300      	movs	r3, #0
 800521e:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8005220:	68fb      	ldr	r3, [r7, #12]
 8005222:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8005224:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005226:	2b00      	cmp	r3, #0
 8005228:	d10c      	bne.n	8005244 <xQueueReceive+0x34>
	__asm volatile
 800522a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800522e:	b672      	cpsid	i
 8005230:	f383 8811 	msr	BASEPRI, r3
 8005234:	f3bf 8f6f 	isb	sy
 8005238:	f3bf 8f4f 	dsb	sy
 800523c:	b662      	cpsie	i
 800523e:	623b      	str	r3, [r7, #32]
}
 8005240:	bf00      	nop
 8005242:	e7fe      	b.n	8005242 <xQueueReceive+0x32>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005244:	68bb      	ldr	r3, [r7, #8]
 8005246:	2b00      	cmp	r3, #0
 8005248:	d103      	bne.n	8005252 <xQueueReceive+0x42>
 800524a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800524c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800524e:	2b00      	cmp	r3, #0
 8005250:	d101      	bne.n	8005256 <xQueueReceive+0x46>
 8005252:	2301      	movs	r3, #1
 8005254:	e000      	b.n	8005258 <xQueueReceive+0x48>
 8005256:	2300      	movs	r3, #0
 8005258:	2b00      	cmp	r3, #0
 800525a:	d10c      	bne.n	8005276 <xQueueReceive+0x66>
	__asm volatile
 800525c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005260:	b672      	cpsid	i
 8005262:	f383 8811 	msr	BASEPRI, r3
 8005266:	f3bf 8f6f 	isb	sy
 800526a:	f3bf 8f4f 	dsb	sy
 800526e:	b662      	cpsie	i
 8005270:	61fb      	str	r3, [r7, #28]
}
 8005272:	bf00      	nop
 8005274:	e7fe      	b.n	8005274 <xQueueReceive+0x64>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005276:	f001 f8e3 	bl	8006440 <xTaskGetSchedulerState>
 800527a:	4603      	mov	r3, r0
 800527c:	2b00      	cmp	r3, #0
 800527e:	d102      	bne.n	8005286 <xQueueReceive+0x76>
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	2b00      	cmp	r3, #0
 8005284:	d101      	bne.n	800528a <xQueueReceive+0x7a>
 8005286:	2301      	movs	r3, #1
 8005288:	e000      	b.n	800528c <xQueueReceive+0x7c>
 800528a:	2300      	movs	r3, #0
 800528c:	2b00      	cmp	r3, #0
 800528e:	d10c      	bne.n	80052aa <xQueueReceive+0x9a>
	__asm volatile
 8005290:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005294:	b672      	cpsid	i
 8005296:	f383 8811 	msr	BASEPRI, r3
 800529a:	f3bf 8f6f 	isb	sy
 800529e:	f3bf 8f4f 	dsb	sy
 80052a2:	b662      	cpsie	i
 80052a4:	61bb      	str	r3, [r7, #24]
}
 80052a6:	bf00      	nop
 80052a8:	e7fe      	b.n	80052a8 <xQueueReceive+0x98>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80052aa:	f001 fe17 	bl	8006edc <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80052ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80052b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80052b2:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80052b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052b6:	2b00      	cmp	r3, #0
 80052b8:	d01f      	beq.n	80052fa <xQueueReceive+0xea>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80052ba:	68b9      	ldr	r1, [r7, #8]
 80052bc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80052be:	f000 f97d 	bl	80055bc <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80052c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052c4:	1e5a      	subs	r2, r3, #1
 80052c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80052c8:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80052ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80052cc:	691b      	ldr	r3, [r3, #16]
 80052ce:	2b00      	cmp	r3, #0
 80052d0:	d00f      	beq.n	80052f2 <xQueueReceive+0xe2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80052d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80052d4:	3310      	adds	r3, #16
 80052d6:	4618      	mov	r0, r3
 80052d8:	f000 feec 	bl	80060b4 <xTaskRemoveFromEventList>
 80052dc:	4603      	mov	r3, r0
 80052de:	2b00      	cmp	r3, #0
 80052e0:	d007      	beq.n	80052f2 <xQueueReceive+0xe2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80052e2:	4b3d      	ldr	r3, [pc, #244]	; (80053d8 <xQueueReceive+0x1c8>)
 80052e4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80052e8:	601a      	str	r2, [r3, #0]
 80052ea:	f3bf 8f4f 	dsb	sy
 80052ee:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80052f2:	f001 fe27 	bl	8006f44 <vPortExitCritical>
				return pdPASS;
 80052f6:	2301      	movs	r3, #1
 80052f8:	e069      	b.n	80053ce <xQueueReceive+0x1be>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	2b00      	cmp	r3, #0
 80052fe:	d103      	bne.n	8005308 <xQueueReceive+0xf8>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8005300:	f001 fe20 	bl	8006f44 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8005304:	2300      	movs	r3, #0
 8005306:	e062      	b.n	80053ce <xQueueReceive+0x1be>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005308:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800530a:	2b00      	cmp	r3, #0
 800530c:	d106      	bne.n	800531c <xQueueReceive+0x10c>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800530e:	f107 0310 	add.w	r3, r7, #16
 8005312:	4618      	mov	r0, r3
 8005314:	f000 ff34 	bl	8006180 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005318:	2301      	movs	r3, #1
 800531a:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800531c:	f001 fe12 	bl	8006f44 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005320:	f000 fc9a 	bl	8005c58 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005324:	f001 fdda 	bl	8006edc <vPortEnterCritical>
 8005328:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800532a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800532e:	b25b      	sxtb	r3, r3
 8005330:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005334:	d103      	bne.n	800533e <xQueueReceive+0x12e>
 8005336:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005338:	2200      	movs	r2, #0
 800533a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800533e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005340:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005344:	b25b      	sxtb	r3, r3
 8005346:	f1b3 3fff 	cmp.w	r3, #4294967295
 800534a:	d103      	bne.n	8005354 <xQueueReceive+0x144>
 800534c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800534e:	2200      	movs	r2, #0
 8005350:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005354:	f001 fdf6 	bl	8006f44 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005358:	1d3a      	adds	r2, r7, #4
 800535a:	f107 0310 	add.w	r3, r7, #16
 800535e:	4611      	mov	r1, r2
 8005360:	4618      	mov	r0, r3
 8005362:	f000 ff23 	bl	80061ac <xTaskCheckForTimeOut>
 8005366:	4603      	mov	r3, r0
 8005368:	2b00      	cmp	r3, #0
 800536a:	d123      	bne.n	80053b4 <xQueueReceive+0x1a4>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800536c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800536e:	f000 f99d 	bl	80056ac <prvIsQueueEmpty>
 8005372:	4603      	mov	r3, r0
 8005374:	2b00      	cmp	r3, #0
 8005376:	d017      	beq.n	80053a8 <xQueueReceive+0x198>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8005378:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800537a:	3324      	adds	r3, #36	; 0x24
 800537c:	687a      	ldr	r2, [r7, #4]
 800537e:	4611      	mov	r1, r2
 8005380:	4618      	mov	r0, r3
 8005382:	f000 fe43 	bl	800600c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8005386:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005388:	f000 f93e 	bl	8005608 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800538c:	f000 fc72 	bl	8005c74 <xTaskResumeAll>
 8005390:	4603      	mov	r3, r0
 8005392:	2b00      	cmp	r3, #0
 8005394:	d189      	bne.n	80052aa <xQueueReceive+0x9a>
				{
					portYIELD_WITHIN_API();
 8005396:	4b10      	ldr	r3, [pc, #64]	; (80053d8 <xQueueReceive+0x1c8>)
 8005398:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800539c:	601a      	str	r2, [r3, #0]
 800539e:	f3bf 8f4f 	dsb	sy
 80053a2:	f3bf 8f6f 	isb	sy
 80053a6:	e780      	b.n	80052aa <xQueueReceive+0x9a>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80053a8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80053aa:	f000 f92d 	bl	8005608 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80053ae:	f000 fc61 	bl	8005c74 <xTaskResumeAll>
 80053b2:	e77a      	b.n	80052aa <xQueueReceive+0x9a>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80053b4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80053b6:	f000 f927 	bl	8005608 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80053ba:	f000 fc5b 	bl	8005c74 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80053be:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80053c0:	f000 f974 	bl	80056ac <prvIsQueueEmpty>
 80053c4:	4603      	mov	r3, r0
 80053c6:	2b00      	cmp	r3, #0
 80053c8:	f43f af6f 	beq.w	80052aa <xQueueReceive+0x9a>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80053cc:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80053ce:	4618      	mov	r0, r3
 80053d0:	3730      	adds	r7, #48	; 0x30
 80053d2:	46bd      	mov	sp, r7
 80053d4:	bd80      	pop	{r7, pc}
 80053d6:	bf00      	nop
 80053d8:	e000ed04 	.word	0xe000ed04

080053dc <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 80053dc:	b580      	push	{r7, lr}
 80053de:	b08e      	sub	sp, #56	; 0x38
 80053e0:	af00      	add	r7, sp, #0
 80053e2:	60f8      	str	r0, [r7, #12]
 80053e4:	60b9      	str	r1, [r7, #8]
 80053e6:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80053e8:	68fb      	ldr	r3, [r7, #12]
 80053ea:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80053ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80053ee:	2b00      	cmp	r3, #0
 80053f0:	d10c      	bne.n	800540c <xQueueReceiveFromISR+0x30>
	__asm volatile
 80053f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80053f6:	b672      	cpsid	i
 80053f8:	f383 8811 	msr	BASEPRI, r3
 80053fc:	f3bf 8f6f 	isb	sy
 8005400:	f3bf 8f4f 	dsb	sy
 8005404:	b662      	cpsie	i
 8005406:	623b      	str	r3, [r7, #32]
}
 8005408:	bf00      	nop
 800540a:	e7fe      	b.n	800540a <xQueueReceiveFromISR+0x2e>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800540c:	68bb      	ldr	r3, [r7, #8]
 800540e:	2b00      	cmp	r3, #0
 8005410:	d103      	bne.n	800541a <xQueueReceiveFromISR+0x3e>
 8005412:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005414:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005416:	2b00      	cmp	r3, #0
 8005418:	d101      	bne.n	800541e <xQueueReceiveFromISR+0x42>
 800541a:	2301      	movs	r3, #1
 800541c:	e000      	b.n	8005420 <xQueueReceiveFromISR+0x44>
 800541e:	2300      	movs	r3, #0
 8005420:	2b00      	cmp	r3, #0
 8005422:	d10c      	bne.n	800543e <xQueueReceiveFromISR+0x62>
	__asm volatile
 8005424:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005428:	b672      	cpsid	i
 800542a:	f383 8811 	msr	BASEPRI, r3
 800542e:	f3bf 8f6f 	isb	sy
 8005432:	f3bf 8f4f 	dsb	sy
 8005436:	b662      	cpsie	i
 8005438:	61fb      	str	r3, [r7, #28]
}
 800543a:	bf00      	nop
 800543c:	e7fe      	b.n	800543c <xQueueReceiveFromISR+0x60>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800543e:	f001 fe35 	bl	80070ac <vPortValidateInterruptPriority>
	__asm volatile
 8005442:	f3ef 8211 	mrs	r2, BASEPRI
 8005446:	f04f 0350 	mov.w	r3, #80	; 0x50
 800544a:	b672      	cpsid	i
 800544c:	f383 8811 	msr	BASEPRI, r3
 8005450:	f3bf 8f6f 	isb	sy
 8005454:	f3bf 8f4f 	dsb	sy
 8005458:	b662      	cpsie	i
 800545a:	61ba      	str	r2, [r7, #24]
 800545c:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800545e:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8005460:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005462:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005464:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005466:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005468:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800546a:	2b00      	cmp	r3, #0
 800546c:	d02f      	beq.n	80054ce <xQueueReceiveFromISR+0xf2>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800546e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005470:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005474:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8005478:	68b9      	ldr	r1, [r7, #8]
 800547a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800547c:	f000 f89e 	bl	80055bc <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8005480:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005482:	1e5a      	subs	r2, r3, #1
 8005484:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005486:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8005488:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800548c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005490:	d112      	bne.n	80054b8 <xQueueReceiveFromISR+0xdc>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005492:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005494:	691b      	ldr	r3, [r3, #16]
 8005496:	2b00      	cmp	r3, #0
 8005498:	d016      	beq.n	80054c8 <xQueueReceiveFromISR+0xec>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800549a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800549c:	3310      	adds	r3, #16
 800549e:	4618      	mov	r0, r3
 80054a0:	f000 fe08 	bl	80060b4 <xTaskRemoveFromEventList>
 80054a4:	4603      	mov	r3, r0
 80054a6:	2b00      	cmp	r3, #0
 80054a8:	d00e      	beq.n	80054c8 <xQueueReceiveFromISR+0xec>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	2b00      	cmp	r3, #0
 80054ae:	d00b      	beq.n	80054c8 <xQueueReceiveFromISR+0xec>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	2201      	movs	r2, #1
 80054b4:	601a      	str	r2, [r3, #0]
 80054b6:	e007      	b.n	80054c8 <xQueueReceiveFromISR+0xec>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 80054b8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80054bc:	3301      	adds	r3, #1
 80054be:	b2db      	uxtb	r3, r3
 80054c0:	b25a      	sxtb	r2, r3
 80054c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80054c4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 80054c8:	2301      	movs	r3, #1
 80054ca:	637b      	str	r3, [r7, #52]	; 0x34
 80054cc:	e001      	b.n	80054d2 <xQueueReceiveFromISR+0xf6>
		}
		else
		{
			xReturn = pdFAIL;
 80054ce:	2300      	movs	r3, #0
 80054d0:	637b      	str	r3, [r7, #52]	; 0x34
 80054d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80054d4:	613b      	str	r3, [r7, #16]
	__asm volatile
 80054d6:	693b      	ldr	r3, [r7, #16]
 80054d8:	f383 8811 	msr	BASEPRI, r3
}
 80054dc:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80054de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80054e0:	4618      	mov	r0, r3
 80054e2:	3738      	adds	r7, #56	; 0x38
 80054e4:	46bd      	mov	sp, r7
 80054e6:	bd80      	pop	{r7, pc}

080054e8 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80054e8:	b580      	push	{r7, lr}
 80054ea:	b086      	sub	sp, #24
 80054ec:	af00      	add	r7, sp, #0
 80054ee:	60f8      	str	r0, [r7, #12]
 80054f0:	60b9      	str	r1, [r7, #8]
 80054f2:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80054f4:	2300      	movs	r3, #0
 80054f6:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80054f8:	68fb      	ldr	r3, [r7, #12]
 80054fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80054fc:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80054fe:	68fb      	ldr	r3, [r7, #12]
 8005500:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005502:	2b00      	cmp	r3, #0
 8005504:	d10d      	bne.n	8005522 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8005506:	68fb      	ldr	r3, [r7, #12]
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	2b00      	cmp	r3, #0
 800550c:	d14d      	bne.n	80055aa <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800550e:	68fb      	ldr	r3, [r7, #12]
 8005510:	689b      	ldr	r3, [r3, #8]
 8005512:	4618      	mov	r0, r3
 8005514:	f000 ffb2 	bl	800647c <xTaskPriorityDisinherit>
 8005518:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800551a:	68fb      	ldr	r3, [r7, #12]
 800551c:	2200      	movs	r2, #0
 800551e:	609a      	str	r2, [r3, #8]
 8005520:	e043      	b.n	80055aa <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	2b00      	cmp	r3, #0
 8005526:	d119      	bne.n	800555c <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8005528:	68fb      	ldr	r3, [r7, #12]
 800552a:	6858      	ldr	r0, [r3, #4]
 800552c:	68fb      	ldr	r3, [r7, #12]
 800552e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005530:	461a      	mov	r2, r3
 8005532:	68b9      	ldr	r1, [r7, #8]
 8005534:	f002 f806 	bl	8007544 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8005538:	68fb      	ldr	r3, [r7, #12]
 800553a:	685a      	ldr	r2, [r3, #4]
 800553c:	68fb      	ldr	r3, [r7, #12]
 800553e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005540:	441a      	add	r2, r3
 8005542:	68fb      	ldr	r3, [r7, #12]
 8005544:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005546:	68fb      	ldr	r3, [r7, #12]
 8005548:	685a      	ldr	r2, [r3, #4]
 800554a:	68fb      	ldr	r3, [r7, #12]
 800554c:	689b      	ldr	r3, [r3, #8]
 800554e:	429a      	cmp	r2, r3
 8005550:	d32b      	bcc.n	80055aa <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8005552:	68fb      	ldr	r3, [r7, #12]
 8005554:	681a      	ldr	r2, [r3, #0]
 8005556:	68fb      	ldr	r3, [r7, #12]
 8005558:	605a      	str	r2, [r3, #4]
 800555a:	e026      	b.n	80055aa <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800555c:	68fb      	ldr	r3, [r7, #12]
 800555e:	68d8      	ldr	r0, [r3, #12]
 8005560:	68fb      	ldr	r3, [r7, #12]
 8005562:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005564:	461a      	mov	r2, r3
 8005566:	68b9      	ldr	r1, [r7, #8]
 8005568:	f001 ffec 	bl	8007544 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800556c:	68fb      	ldr	r3, [r7, #12]
 800556e:	68da      	ldr	r2, [r3, #12]
 8005570:	68fb      	ldr	r3, [r7, #12]
 8005572:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005574:	425b      	negs	r3, r3
 8005576:	441a      	add	r2, r3
 8005578:	68fb      	ldr	r3, [r7, #12]
 800557a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800557c:	68fb      	ldr	r3, [r7, #12]
 800557e:	68da      	ldr	r2, [r3, #12]
 8005580:	68fb      	ldr	r3, [r7, #12]
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	429a      	cmp	r2, r3
 8005586:	d207      	bcs.n	8005598 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8005588:	68fb      	ldr	r3, [r7, #12]
 800558a:	689a      	ldr	r2, [r3, #8]
 800558c:	68fb      	ldr	r3, [r7, #12]
 800558e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005590:	425b      	negs	r3, r3
 8005592:	441a      	add	r2, r3
 8005594:	68fb      	ldr	r3, [r7, #12]
 8005596:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	2b02      	cmp	r3, #2
 800559c:	d105      	bne.n	80055aa <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800559e:	693b      	ldr	r3, [r7, #16]
 80055a0:	2b00      	cmp	r3, #0
 80055a2:	d002      	beq.n	80055aa <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80055a4:	693b      	ldr	r3, [r7, #16]
 80055a6:	3b01      	subs	r3, #1
 80055a8:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80055aa:	693b      	ldr	r3, [r7, #16]
 80055ac:	1c5a      	adds	r2, r3, #1
 80055ae:	68fb      	ldr	r3, [r7, #12]
 80055b0:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 80055b2:	697b      	ldr	r3, [r7, #20]
}
 80055b4:	4618      	mov	r0, r3
 80055b6:	3718      	adds	r7, #24
 80055b8:	46bd      	mov	sp, r7
 80055ba:	bd80      	pop	{r7, pc}

080055bc <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80055bc:	b580      	push	{r7, lr}
 80055be:	b082      	sub	sp, #8
 80055c0:	af00      	add	r7, sp, #0
 80055c2:	6078      	str	r0, [r7, #4]
 80055c4:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055ca:	2b00      	cmp	r3, #0
 80055cc:	d018      	beq.n	8005600 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	68da      	ldr	r2, [r3, #12]
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055d6:	441a      	add	r2, r3
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	68da      	ldr	r2, [r3, #12]
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	689b      	ldr	r3, [r3, #8]
 80055e4:	429a      	cmp	r2, r3
 80055e6:	d303      	bcc.n	80055f0 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	681a      	ldr	r2, [r3, #0]
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	68d9      	ldr	r1, [r3, #12]
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055f8:	461a      	mov	r2, r3
 80055fa:	6838      	ldr	r0, [r7, #0]
 80055fc:	f001 ffa2 	bl	8007544 <memcpy>
	}
}
 8005600:	bf00      	nop
 8005602:	3708      	adds	r7, #8
 8005604:	46bd      	mov	sp, r7
 8005606:	bd80      	pop	{r7, pc}

08005608 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8005608:	b580      	push	{r7, lr}
 800560a:	b084      	sub	sp, #16
 800560c:	af00      	add	r7, sp, #0
 800560e:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8005610:	f001 fc64 	bl	8006edc <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800561a:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800561c:	e011      	b.n	8005642 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005622:	2b00      	cmp	r3, #0
 8005624:	d012      	beq.n	800564c <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	3324      	adds	r3, #36	; 0x24
 800562a:	4618      	mov	r0, r3
 800562c:	f000 fd42 	bl	80060b4 <xTaskRemoveFromEventList>
 8005630:	4603      	mov	r3, r0
 8005632:	2b00      	cmp	r3, #0
 8005634:	d001      	beq.n	800563a <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8005636:	f000 fe1f 	bl	8006278 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800563a:	7bfb      	ldrb	r3, [r7, #15]
 800563c:	3b01      	subs	r3, #1
 800563e:	b2db      	uxtb	r3, r3
 8005640:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005642:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005646:	2b00      	cmp	r3, #0
 8005648:	dce9      	bgt.n	800561e <prvUnlockQueue+0x16>
 800564a:	e000      	b.n	800564e <prvUnlockQueue+0x46>
					break;
 800564c:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	22ff      	movs	r2, #255	; 0xff
 8005652:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8005656:	f001 fc75 	bl	8006f44 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800565a:	f001 fc3f 	bl	8006edc <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005664:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005666:	e011      	b.n	800568c <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	691b      	ldr	r3, [r3, #16]
 800566c:	2b00      	cmp	r3, #0
 800566e:	d012      	beq.n	8005696 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	3310      	adds	r3, #16
 8005674:	4618      	mov	r0, r3
 8005676:	f000 fd1d 	bl	80060b4 <xTaskRemoveFromEventList>
 800567a:	4603      	mov	r3, r0
 800567c:	2b00      	cmp	r3, #0
 800567e:	d001      	beq.n	8005684 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8005680:	f000 fdfa 	bl	8006278 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8005684:	7bbb      	ldrb	r3, [r7, #14]
 8005686:	3b01      	subs	r3, #1
 8005688:	b2db      	uxtb	r3, r3
 800568a:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800568c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005690:	2b00      	cmp	r3, #0
 8005692:	dce9      	bgt.n	8005668 <prvUnlockQueue+0x60>
 8005694:	e000      	b.n	8005698 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8005696:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	22ff      	movs	r2, #255	; 0xff
 800569c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 80056a0:	f001 fc50 	bl	8006f44 <vPortExitCritical>
}
 80056a4:	bf00      	nop
 80056a6:	3710      	adds	r7, #16
 80056a8:	46bd      	mov	sp, r7
 80056aa:	bd80      	pop	{r7, pc}

080056ac <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80056ac:	b580      	push	{r7, lr}
 80056ae:	b084      	sub	sp, #16
 80056b0:	af00      	add	r7, sp, #0
 80056b2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80056b4:	f001 fc12 	bl	8006edc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80056bc:	2b00      	cmp	r3, #0
 80056be:	d102      	bne.n	80056c6 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80056c0:	2301      	movs	r3, #1
 80056c2:	60fb      	str	r3, [r7, #12]
 80056c4:	e001      	b.n	80056ca <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80056c6:	2300      	movs	r3, #0
 80056c8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80056ca:	f001 fc3b 	bl	8006f44 <vPortExitCritical>

	return xReturn;
 80056ce:	68fb      	ldr	r3, [r7, #12]
}
 80056d0:	4618      	mov	r0, r3
 80056d2:	3710      	adds	r7, #16
 80056d4:	46bd      	mov	sp, r7
 80056d6:	bd80      	pop	{r7, pc}

080056d8 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80056d8:	b580      	push	{r7, lr}
 80056da:	b084      	sub	sp, #16
 80056dc:	af00      	add	r7, sp, #0
 80056de:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80056e0:	f001 fbfc 	bl	8006edc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80056ec:	429a      	cmp	r2, r3
 80056ee:	d102      	bne.n	80056f6 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80056f0:	2301      	movs	r3, #1
 80056f2:	60fb      	str	r3, [r7, #12]
 80056f4:	e001      	b.n	80056fa <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80056f6:	2300      	movs	r3, #0
 80056f8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80056fa:	f001 fc23 	bl	8006f44 <vPortExitCritical>

	return xReturn;
 80056fe:	68fb      	ldr	r3, [r7, #12]
}
 8005700:	4618      	mov	r0, r3
 8005702:	3710      	adds	r7, #16
 8005704:	46bd      	mov	sp, r7
 8005706:	bd80      	pop	{r7, pc}

08005708 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8005708:	b480      	push	{r7}
 800570a:	b085      	sub	sp, #20
 800570c:	af00      	add	r7, sp, #0
 800570e:	6078      	str	r0, [r7, #4]
 8005710:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8005712:	2300      	movs	r3, #0
 8005714:	60fb      	str	r3, [r7, #12]
 8005716:	e014      	b.n	8005742 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8005718:	4a0f      	ldr	r2, [pc, #60]	; (8005758 <vQueueAddToRegistry+0x50>)
 800571a:	68fb      	ldr	r3, [r7, #12]
 800571c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8005720:	2b00      	cmp	r3, #0
 8005722:	d10b      	bne.n	800573c <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8005724:	490c      	ldr	r1, [pc, #48]	; (8005758 <vQueueAddToRegistry+0x50>)
 8005726:	68fb      	ldr	r3, [r7, #12]
 8005728:	683a      	ldr	r2, [r7, #0]
 800572a:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800572e:	4a0a      	ldr	r2, [pc, #40]	; (8005758 <vQueueAddToRegistry+0x50>)
 8005730:	68fb      	ldr	r3, [r7, #12]
 8005732:	00db      	lsls	r3, r3, #3
 8005734:	4413      	add	r3, r2
 8005736:	687a      	ldr	r2, [r7, #4]
 8005738:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800573a:	e006      	b.n	800574a <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800573c:	68fb      	ldr	r3, [r7, #12]
 800573e:	3301      	adds	r3, #1
 8005740:	60fb      	str	r3, [r7, #12]
 8005742:	68fb      	ldr	r3, [r7, #12]
 8005744:	2b07      	cmp	r3, #7
 8005746:	d9e7      	bls.n	8005718 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8005748:	bf00      	nop
 800574a:	bf00      	nop
 800574c:	3714      	adds	r7, #20
 800574e:	46bd      	mov	sp, r7
 8005750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005754:	4770      	bx	lr
 8005756:	bf00      	nop
 8005758:	20004a30 	.word	0x20004a30

0800575c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800575c:	b580      	push	{r7, lr}
 800575e:	b086      	sub	sp, #24
 8005760:	af00      	add	r7, sp, #0
 8005762:	60f8      	str	r0, [r7, #12]
 8005764:	60b9      	str	r1, [r7, #8]
 8005766:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8005768:	68fb      	ldr	r3, [r7, #12]
 800576a:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800576c:	f001 fbb6 	bl	8006edc <vPortEnterCritical>
 8005770:	697b      	ldr	r3, [r7, #20]
 8005772:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005776:	b25b      	sxtb	r3, r3
 8005778:	f1b3 3fff 	cmp.w	r3, #4294967295
 800577c:	d103      	bne.n	8005786 <vQueueWaitForMessageRestricted+0x2a>
 800577e:	697b      	ldr	r3, [r7, #20]
 8005780:	2200      	movs	r2, #0
 8005782:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005786:	697b      	ldr	r3, [r7, #20]
 8005788:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800578c:	b25b      	sxtb	r3, r3
 800578e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005792:	d103      	bne.n	800579c <vQueueWaitForMessageRestricted+0x40>
 8005794:	697b      	ldr	r3, [r7, #20]
 8005796:	2200      	movs	r2, #0
 8005798:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800579c:	f001 fbd2 	bl	8006f44 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80057a0:	697b      	ldr	r3, [r7, #20]
 80057a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80057a4:	2b00      	cmp	r3, #0
 80057a6:	d106      	bne.n	80057b6 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80057a8:	697b      	ldr	r3, [r7, #20]
 80057aa:	3324      	adds	r3, #36	; 0x24
 80057ac:	687a      	ldr	r2, [r7, #4]
 80057ae:	68b9      	ldr	r1, [r7, #8]
 80057b0:	4618      	mov	r0, r3
 80057b2:	f000 fc51 	bl	8006058 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80057b6:	6978      	ldr	r0, [r7, #20]
 80057b8:	f7ff ff26 	bl	8005608 <prvUnlockQueue>
	}
 80057bc:	bf00      	nop
 80057be:	3718      	adds	r7, #24
 80057c0:	46bd      	mov	sp, r7
 80057c2:	bd80      	pop	{r7, pc}

080057c4 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80057c4:	b580      	push	{r7, lr}
 80057c6:	b08e      	sub	sp, #56	; 0x38
 80057c8:	af04      	add	r7, sp, #16
 80057ca:	60f8      	str	r0, [r7, #12]
 80057cc:	60b9      	str	r1, [r7, #8]
 80057ce:	607a      	str	r2, [r7, #4]
 80057d0:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80057d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80057d4:	2b00      	cmp	r3, #0
 80057d6:	d10c      	bne.n	80057f2 <xTaskCreateStatic+0x2e>
	__asm volatile
 80057d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80057dc:	b672      	cpsid	i
 80057de:	f383 8811 	msr	BASEPRI, r3
 80057e2:	f3bf 8f6f 	isb	sy
 80057e6:	f3bf 8f4f 	dsb	sy
 80057ea:	b662      	cpsie	i
 80057ec:	623b      	str	r3, [r7, #32]
}
 80057ee:	bf00      	nop
 80057f0:	e7fe      	b.n	80057f0 <xTaskCreateStatic+0x2c>
		configASSERT( pxTaskBuffer != NULL );
 80057f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80057f4:	2b00      	cmp	r3, #0
 80057f6:	d10c      	bne.n	8005812 <xTaskCreateStatic+0x4e>
	__asm volatile
 80057f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80057fc:	b672      	cpsid	i
 80057fe:	f383 8811 	msr	BASEPRI, r3
 8005802:	f3bf 8f6f 	isb	sy
 8005806:	f3bf 8f4f 	dsb	sy
 800580a:	b662      	cpsie	i
 800580c:	61fb      	str	r3, [r7, #28]
}
 800580e:	bf00      	nop
 8005810:	e7fe      	b.n	8005810 <xTaskCreateStatic+0x4c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8005812:	235c      	movs	r3, #92	; 0x5c
 8005814:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8005816:	693b      	ldr	r3, [r7, #16]
 8005818:	2b5c      	cmp	r3, #92	; 0x5c
 800581a:	d00c      	beq.n	8005836 <xTaskCreateStatic+0x72>
	__asm volatile
 800581c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005820:	b672      	cpsid	i
 8005822:	f383 8811 	msr	BASEPRI, r3
 8005826:	f3bf 8f6f 	isb	sy
 800582a:	f3bf 8f4f 	dsb	sy
 800582e:	b662      	cpsie	i
 8005830:	61bb      	str	r3, [r7, #24]
}
 8005832:	bf00      	nop
 8005834:	e7fe      	b.n	8005834 <xTaskCreateStatic+0x70>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8005836:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8005838:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800583a:	2b00      	cmp	r3, #0
 800583c:	d01e      	beq.n	800587c <xTaskCreateStatic+0xb8>
 800583e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005840:	2b00      	cmp	r3, #0
 8005842:	d01b      	beq.n	800587c <xTaskCreateStatic+0xb8>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8005844:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005846:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8005848:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800584a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800584c:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800584e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005850:	2202      	movs	r2, #2
 8005852:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8005856:	2300      	movs	r3, #0
 8005858:	9303      	str	r3, [sp, #12]
 800585a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800585c:	9302      	str	r3, [sp, #8]
 800585e:	f107 0314 	add.w	r3, r7, #20
 8005862:	9301      	str	r3, [sp, #4]
 8005864:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005866:	9300      	str	r3, [sp, #0]
 8005868:	683b      	ldr	r3, [r7, #0]
 800586a:	687a      	ldr	r2, [r7, #4]
 800586c:	68b9      	ldr	r1, [r7, #8]
 800586e:	68f8      	ldr	r0, [r7, #12]
 8005870:	f000 f850 	bl	8005914 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005874:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005876:	f000 f8df 	bl	8005a38 <prvAddNewTaskToReadyList>
 800587a:	e001      	b.n	8005880 <xTaskCreateStatic+0xbc>
		}
		else
		{
			xReturn = NULL;
 800587c:	2300      	movs	r3, #0
 800587e:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8005880:	697b      	ldr	r3, [r7, #20]
	}
 8005882:	4618      	mov	r0, r3
 8005884:	3728      	adds	r7, #40	; 0x28
 8005886:	46bd      	mov	sp, r7
 8005888:	bd80      	pop	{r7, pc}

0800588a <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800588a:	b580      	push	{r7, lr}
 800588c:	b08c      	sub	sp, #48	; 0x30
 800588e:	af04      	add	r7, sp, #16
 8005890:	60f8      	str	r0, [r7, #12]
 8005892:	60b9      	str	r1, [r7, #8]
 8005894:	603b      	str	r3, [r7, #0]
 8005896:	4613      	mov	r3, r2
 8005898:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800589a:	88fb      	ldrh	r3, [r7, #6]
 800589c:	009b      	lsls	r3, r3, #2
 800589e:	4618      	mov	r0, r3
 80058a0:	f001 fc48 	bl	8007134 <pvPortMalloc>
 80058a4:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80058a6:	697b      	ldr	r3, [r7, #20]
 80058a8:	2b00      	cmp	r3, #0
 80058aa:	d00e      	beq.n	80058ca <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80058ac:	205c      	movs	r0, #92	; 0x5c
 80058ae:	f001 fc41 	bl	8007134 <pvPortMalloc>
 80058b2:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80058b4:	69fb      	ldr	r3, [r7, #28]
 80058b6:	2b00      	cmp	r3, #0
 80058b8:	d003      	beq.n	80058c2 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80058ba:	69fb      	ldr	r3, [r7, #28]
 80058bc:	697a      	ldr	r2, [r7, #20]
 80058be:	631a      	str	r2, [r3, #48]	; 0x30
 80058c0:	e005      	b.n	80058ce <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80058c2:	6978      	ldr	r0, [r7, #20]
 80058c4:	f001 fd00 	bl	80072c8 <vPortFree>
 80058c8:	e001      	b.n	80058ce <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80058ca:	2300      	movs	r3, #0
 80058cc:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80058ce:	69fb      	ldr	r3, [r7, #28]
 80058d0:	2b00      	cmp	r3, #0
 80058d2:	d017      	beq.n	8005904 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80058d4:	69fb      	ldr	r3, [r7, #28]
 80058d6:	2200      	movs	r2, #0
 80058d8:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80058dc:	88fa      	ldrh	r2, [r7, #6]
 80058de:	2300      	movs	r3, #0
 80058e0:	9303      	str	r3, [sp, #12]
 80058e2:	69fb      	ldr	r3, [r7, #28]
 80058e4:	9302      	str	r3, [sp, #8]
 80058e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80058e8:	9301      	str	r3, [sp, #4]
 80058ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80058ec:	9300      	str	r3, [sp, #0]
 80058ee:	683b      	ldr	r3, [r7, #0]
 80058f0:	68b9      	ldr	r1, [r7, #8]
 80058f2:	68f8      	ldr	r0, [r7, #12]
 80058f4:	f000 f80e 	bl	8005914 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80058f8:	69f8      	ldr	r0, [r7, #28]
 80058fa:	f000 f89d 	bl	8005a38 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80058fe:	2301      	movs	r3, #1
 8005900:	61bb      	str	r3, [r7, #24]
 8005902:	e002      	b.n	800590a <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8005904:	f04f 33ff 	mov.w	r3, #4294967295
 8005908:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800590a:	69bb      	ldr	r3, [r7, #24]
	}
 800590c:	4618      	mov	r0, r3
 800590e:	3720      	adds	r7, #32
 8005910:	46bd      	mov	sp, r7
 8005912:	bd80      	pop	{r7, pc}

08005914 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8005914:	b580      	push	{r7, lr}
 8005916:	b088      	sub	sp, #32
 8005918:	af00      	add	r7, sp, #0
 800591a:	60f8      	str	r0, [r7, #12]
 800591c:	60b9      	str	r1, [r7, #8]
 800591e:	607a      	str	r2, [r7, #4]
 8005920:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8005922:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005924:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	009b      	lsls	r3, r3, #2
 800592a:	461a      	mov	r2, r3
 800592c:	21a5      	movs	r1, #165	; 0xa5
 800592e:	f001 fe17 	bl	8007560 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8005932:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005934:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005936:	6879      	ldr	r1, [r7, #4]
 8005938:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 800593c:	440b      	add	r3, r1
 800593e:	009b      	lsls	r3, r3, #2
 8005940:	4413      	add	r3, r2
 8005942:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8005944:	69bb      	ldr	r3, [r7, #24]
 8005946:	f023 0307 	bic.w	r3, r3, #7
 800594a:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800594c:	69bb      	ldr	r3, [r7, #24]
 800594e:	f003 0307 	and.w	r3, r3, #7
 8005952:	2b00      	cmp	r3, #0
 8005954:	d00c      	beq.n	8005970 <prvInitialiseNewTask+0x5c>
	__asm volatile
 8005956:	f04f 0350 	mov.w	r3, #80	; 0x50
 800595a:	b672      	cpsid	i
 800595c:	f383 8811 	msr	BASEPRI, r3
 8005960:	f3bf 8f6f 	isb	sy
 8005964:	f3bf 8f4f 	dsb	sy
 8005968:	b662      	cpsie	i
 800596a:	617b      	str	r3, [r7, #20]
}
 800596c:	bf00      	nop
 800596e:	e7fe      	b.n	800596e <prvInitialiseNewTask+0x5a>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8005970:	68bb      	ldr	r3, [r7, #8]
 8005972:	2b00      	cmp	r3, #0
 8005974:	d01f      	beq.n	80059b6 <prvInitialiseNewTask+0xa2>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005976:	2300      	movs	r3, #0
 8005978:	61fb      	str	r3, [r7, #28]
 800597a:	e012      	b.n	80059a2 <prvInitialiseNewTask+0x8e>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800597c:	68ba      	ldr	r2, [r7, #8]
 800597e:	69fb      	ldr	r3, [r7, #28]
 8005980:	4413      	add	r3, r2
 8005982:	7819      	ldrb	r1, [r3, #0]
 8005984:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005986:	69fb      	ldr	r3, [r7, #28]
 8005988:	4413      	add	r3, r2
 800598a:	3334      	adds	r3, #52	; 0x34
 800598c:	460a      	mov	r2, r1
 800598e:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8005990:	68ba      	ldr	r2, [r7, #8]
 8005992:	69fb      	ldr	r3, [r7, #28]
 8005994:	4413      	add	r3, r2
 8005996:	781b      	ldrb	r3, [r3, #0]
 8005998:	2b00      	cmp	r3, #0
 800599a:	d006      	beq.n	80059aa <prvInitialiseNewTask+0x96>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800599c:	69fb      	ldr	r3, [r7, #28]
 800599e:	3301      	adds	r3, #1
 80059a0:	61fb      	str	r3, [r7, #28]
 80059a2:	69fb      	ldr	r3, [r7, #28]
 80059a4:	2b0f      	cmp	r3, #15
 80059a6:	d9e9      	bls.n	800597c <prvInitialiseNewTask+0x68>
 80059a8:	e000      	b.n	80059ac <prvInitialiseNewTask+0x98>
			{
				break;
 80059aa:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80059ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80059ae:	2200      	movs	r2, #0
 80059b0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80059b4:	e003      	b.n	80059be <prvInitialiseNewTask+0xaa>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80059b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80059b8:	2200      	movs	r2, #0
 80059ba:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80059be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80059c0:	2b37      	cmp	r3, #55	; 0x37
 80059c2:	d901      	bls.n	80059c8 <prvInitialiseNewTask+0xb4>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80059c4:	2337      	movs	r3, #55	; 0x37
 80059c6:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80059c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80059ca:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80059cc:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80059ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80059d0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80059d2:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 80059d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80059d6:	2200      	movs	r2, #0
 80059d8:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80059da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80059dc:	3304      	adds	r3, #4
 80059de:	4618      	mov	r0, r3
 80059e0:	f7ff f88a 	bl	8004af8 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80059e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80059e6:	3318      	adds	r3, #24
 80059e8:	4618      	mov	r0, r3
 80059ea:	f7ff f885 	bl	8004af8 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80059ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80059f0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80059f2:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80059f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80059f6:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80059fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80059fc:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80059fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a00:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005a02:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8005a04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a06:	2200      	movs	r2, #0
 8005a08:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8005a0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a0c:	2200      	movs	r2, #0
 8005a0e:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8005a12:	683a      	ldr	r2, [r7, #0]
 8005a14:	68f9      	ldr	r1, [r7, #12]
 8005a16:	69b8      	ldr	r0, [r7, #24]
 8005a18:	f001 f952 	bl	8006cc0 <pxPortInitialiseStack>
 8005a1c:	4602      	mov	r2, r0
 8005a1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a20:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8005a22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a24:	2b00      	cmp	r3, #0
 8005a26:	d002      	beq.n	8005a2e <prvInitialiseNewTask+0x11a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8005a28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a2a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005a2c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005a2e:	bf00      	nop
 8005a30:	3720      	adds	r7, #32
 8005a32:	46bd      	mov	sp, r7
 8005a34:	bd80      	pop	{r7, pc}
	...

08005a38 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8005a38:	b580      	push	{r7, lr}
 8005a3a:	b082      	sub	sp, #8
 8005a3c:	af00      	add	r7, sp, #0
 8005a3e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8005a40:	f001 fa4c 	bl	8006edc <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8005a44:	4b2d      	ldr	r3, [pc, #180]	; (8005afc <prvAddNewTaskToReadyList+0xc4>)
 8005a46:	681b      	ldr	r3, [r3, #0]
 8005a48:	3301      	adds	r3, #1
 8005a4a:	4a2c      	ldr	r2, [pc, #176]	; (8005afc <prvAddNewTaskToReadyList+0xc4>)
 8005a4c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8005a4e:	4b2c      	ldr	r3, [pc, #176]	; (8005b00 <prvAddNewTaskToReadyList+0xc8>)
 8005a50:	681b      	ldr	r3, [r3, #0]
 8005a52:	2b00      	cmp	r3, #0
 8005a54:	d109      	bne.n	8005a6a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8005a56:	4a2a      	ldr	r2, [pc, #168]	; (8005b00 <prvAddNewTaskToReadyList+0xc8>)
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8005a5c:	4b27      	ldr	r3, [pc, #156]	; (8005afc <prvAddNewTaskToReadyList+0xc4>)
 8005a5e:	681b      	ldr	r3, [r3, #0]
 8005a60:	2b01      	cmp	r3, #1
 8005a62:	d110      	bne.n	8005a86 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8005a64:	f000 fc2c 	bl	80062c0 <prvInitialiseTaskLists>
 8005a68:	e00d      	b.n	8005a86 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8005a6a:	4b26      	ldr	r3, [pc, #152]	; (8005b04 <prvAddNewTaskToReadyList+0xcc>)
 8005a6c:	681b      	ldr	r3, [r3, #0]
 8005a6e:	2b00      	cmp	r3, #0
 8005a70:	d109      	bne.n	8005a86 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8005a72:	4b23      	ldr	r3, [pc, #140]	; (8005b00 <prvAddNewTaskToReadyList+0xc8>)
 8005a74:	681b      	ldr	r3, [r3, #0]
 8005a76:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a7c:	429a      	cmp	r2, r3
 8005a7e:	d802      	bhi.n	8005a86 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8005a80:	4a1f      	ldr	r2, [pc, #124]	; (8005b00 <prvAddNewTaskToReadyList+0xc8>)
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8005a86:	4b20      	ldr	r3, [pc, #128]	; (8005b08 <prvAddNewTaskToReadyList+0xd0>)
 8005a88:	681b      	ldr	r3, [r3, #0]
 8005a8a:	3301      	adds	r3, #1
 8005a8c:	4a1e      	ldr	r2, [pc, #120]	; (8005b08 <prvAddNewTaskToReadyList+0xd0>)
 8005a8e:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8005a90:	4b1d      	ldr	r3, [pc, #116]	; (8005b08 <prvAddNewTaskToReadyList+0xd0>)
 8005a92:	681a      	ldr	r2, [r3, #0]
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005a9c:	4b1b      	ldr	r3, [pc, #108]	; (8005b0c <prvAddNewTaskToReadyList+0xd4>)
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	429a      	cmp	r2, r3
 8005aa2:	d903      	bls.n	8005aac <prvAddNewTaskToReadyList+0x74>
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005aa8:	4a18      	ldr	r2, [pc, #96]	; (8005b0c <prvAddNewTaskToReadyList+0xd4>)
 8005aaa:	6013      	str	r3, [r2, #0]
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005ab0:	4613      	mov	r3, r2
 8005ab2:	009b      	lsls	r3, r3, #2
 8005ab4:	4413      	add	r3, r2
 8005ab6:	009b      	lsls	r3, r3, #2
 8005ab8:	4a15      	ldr	r2, [pc, #84]	; (8005b10 <prvAddNewTaskToReadyList+0xd8>)
 8005aba:	441a      	add	r2, r3
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	3304      	adds	r3, #4
 8005ac0:	4619      	mov	r1, r3
 8005ac2:	4610      	mov	r0, r2
 8005ac4:	f7ff f825 	bl	8004b12 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8005ac8:	f001 fa3c 	bl	8006f44 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8005acc:	4b0d      	ldr	r3, [pc, #52]	; (8005b04 <prvAddNewTaskToReadyList+0xcc>)
 8005ace:	681b      	ldr	r3, [r3, #0]
 8005ad0:	2b00      	cmp	r3, #0
 8005ad2:	d00e      	beq.n	8005af2 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8005ad4:	4b0a      	ldr	r3, [pc, #40]	; (8005b00 <prvAddNewTaskToReadyList+0xc8>)
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ade:	429a      	cmp	r2, r3
 8005ae0:	d207      	bcs.n	8005af2 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8005ae2:	4b0c      	ldr	r3, [pc, #48]	; (8005b14 <prvAddNewTaskToReadyList+0xdc>)
 8005ae4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005ae8:	601a      	str	r2, [r3, #0]
 8005aea:	f3bf 8f4f 	dsb	sy
 8005aee:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005af2:	bf00      	nop
 8005af4:	3708      	adds	r7, #8
 8005af6:	46bd      	mov	sp, r7
 8005af8:	bd80      	pop	{r7, pc}
 8005afa:	bf00      	nop
 8005afc:	20000bc4 	.word	0x20000bc4
 8005b00:	200006f0 	.word	0x200006f0
 8005b04:	20000bd0 	.word	0x20000bd0
 8005b08:	20000be0 	.word	0x20000be0
 8005b0c:	20000bcc 	.word	0x20000bcc
 8005b10:	200006f4 	.word	0x200006f4
 8005b14:	e000ed04 	.word	0xe000ed04

08005b18 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8005b18:	b580      	push	{r7, lr}
 8005b1a:	b084      	sub	sp, #16
 8005b1c:	af00      	add	r7, sp, #0
 8005b1e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8005b20:	2300      	movs	r3, #0
 8005b22:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	2b00      	cmp	r3, #0
 8005b28:	d019      	beq.n	8005b5e <vTaskDelay+0x46>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8005b2a:	4b14      	ldr	r3, [pc, #80]	; (8005b7c <vTaskDelay+0x64>)
 8005b2c:	681b      	ldr	r3, [r3, #0]
 8005b2e:	2b00      	cmp	r3, #0
 8005b30:	d00c      	beq.n	8005b4c <vTaskDelay+0x34>
	__asm volatile
 8005b32:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b36:	b672      	cpsid	i
 8005b38:	f383 8811 	msr	BASEPRI, r3
 8005b3c:	f3bf 8f6f 	isb	sy
 8005b40:	f3bf 8f4f 	dsb	sy
 8005b44:	b662      	cpsie	i
 8005b46:	60bb      	str	r3, [r7, #8]
}
 8005b48:	bf00      	nop
 8005b4a:	e7fe      	b.n	8005b4a <vTaskDelay+0x32>
			vTaskSuspendAll();
 8005b4c:	f000 f884 	bl	8005c58 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8005b50:	2100      	movs	r1, #0
 8005b52:	6878      	ldr	r0, [r7, #4]
 8005b54:	f000 fd04 	bl	8006560 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8005b58:	f000 f88c 	bl	8005c74 <xTaskResumeAll>
 8005b5c:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8005b5e:	68fb      	ldr	r3, [r7, #12]
 8005b60:	2b00      	cmp	r3, #0
 8005b62:	d107      	bne.n	8005b74 <vTaskDelay+0x5c>
		{
			portYIELD_WITHIN_API();
 8005b64:	4b06      	ldr	r3, [pc, #24]	; (8005b80 <vTaskDelay+0x68>)
 8005b66:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005b6a:	601a      	str	r2, [r3, #0]
 8005b6c:	f3bf 8f4f 	dsb	sy
 8005b70:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8005b74:	bf00      	nop
 8005b76:	3710      	adds	r7, #16
 8005b78:	46bd      	mov	sp, r7
 8005b7a:	bd80      	pop	{r7, pc}
 8005b7c:	20000bec 	.word	0x20000bec
 8005b80:	e000ed04 	.word	0xe000ed04

08005b84 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8005b84:	b580      	push	{r7, lr}
 8005b86:	b08a      	sub	sp, #40	; 0x28
 8005b88:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8005b8a:	2300      	movs	r3, #0
 8005b8c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8005b8e:	2300      	movs	r3, #0
 8005b90:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8005b92:	463a      	mov	r2, r7
 8005b94:	1d39      	adds	r1, r7, #4
 8005b96:	f107 0308 	add.w	r3, r7, #8
 8005b9a:	4618      	mov	r0, r3
 8005b9c:	f7fe ff58 	bl	8004a50 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8005ba0:	6839      	ldr	r1, [r7, #0]
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	68ba      	ldr	r2, [r7, #8]
 8005ba6:	9202      	str	r2, [sp, #8]
 8005ba8:	9301      	str	r3, [sp, #4]
 8005baa:	2300      	movs	r3, #0
 8005bac:	9300      	str	r3, [sp, #0]
 8005bae:	2300      	movs	r3, #0
 8005bb0:	460a      	mov	r2, r1
 8005bb2:	4923      	ldr	r1, [pc, #140]	; (8005c40 <vTaskStartScheduler+0xbc>)
 8005bb4:	4823      	ldr	r0, [pc, #140]	; (8005c44 <vTaskStartScheduler+0xc0>)
 8005bb6:	f7ff fe05 	bl	80057c4 <xTaskCreateStatic>
 8005bba:	4603      	mov	r3, r0
 8005bbc:	4a22      	ldr	r2, [pc, #136]	; (8005c48 <vTaskStartScheduler+0xc4>)
 8005bbe:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8005bc0:	4b21      	ldr	r3, [pc, #132]	; (8005c48 <vTaskStartScheduler+0xc4>)
 8005bc2:	681b      	ldr	r3, [r3, #0]
 8005bc4:	2b00      	cmp	r3, #0
 8005bc6:	d002      	beq.n	8005bce <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8005bc8:	2301      	movs	r3, #1
 8005bca:	617b      	str	r3, [r7, #20]
 8005bcc:	e001      	b.n	8005bd2 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8005bce:	2300      	movs	r3, #0
 8005bd0:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8005bd2:	697b      	ldr	r3, [r7, #20]
 8005bd4:	2b01      	cmp	r3, #1
 8005bd6:	d102      	bne.n	8005bde <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8005bd8:	f000 fd16 	bl	8006608 <xTimerCreateTimerTask>
 8005bdc:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8005bde:	697b      	ldr	r3, [r7, #20]
 8005be0:	2b01      	cmp	r3, #1
 8005be2:	d118      	bne.n	8005c16 <vTaskStartScheduler+0x92>
	__asm volatile
 8005be4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005be8:	b672      	cpsid	i
 8005bea:	f383 8811 	msr	BASEPRI, r3
 8005bee:	f3bf 8f6f 	isb	sy
 8005bf2:	f3bf 8f4f 	dsb	sy
 8005bf6:	b662      	cpsie	i
 8005bf8:	613b      	str	r3, [r7, #16]
}
 8005bfa:	bf00      	nop
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8005bfc:	4b13      	ldr	r3, [pc, #76]	; (8005c4c <vTaskStartScheduler+0xc8>)
 8005bfe:	f04f 32ff 	mov.w	r2, #4294967295
 8005c02:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8005c04:	4b12      	ldr	r3, [pc, #72]	; (8005c50 <vTaskStartScheduler+0xcc>)
 8005c06:	2201      	movs	r2, #1
 8005c08:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8005c0a:	4b12      	ldr	r3, [pc, #72]	; (8005c54 <vTaskStartScheduler+0xd0>)
 8005c0c:	2200      	movs	r2, #0
 8005c0e:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8005c10:	f001 f8e6 	bl	8006de0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8005c14:	e010      	b.n	8005c38 <vTaskStartScheduler+0xb4>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8005c16:	697b      	ldr	r3, [r7, #20]
 8005c18:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005c1c:	d10c      	bne.n	8005c38 <vTaskStartScheduler+0xb4>
	__asm volatile
 8005c1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c22:	b672      	cpsid	i
 8005c24:	f383 8811 	msr	BASEPRI, r3
 8005c28:	f3bf 8f6f 	isb	sy
 8005c2c:	f3bf 8f4f 	dsb	sy
 8005c30:	b662      	cpsie	i
 8005c32:	60fb      	str	r3, [r7, #12]
}
 8005c34:	bf00      	nop
 8005c36:	e7fe      	b.n	8005c36 <vTaskStartScheduler+0xb2>
}
 8005c38:	bf00      	nop
 8005c3a:	3718      	adds	r7, #24
 8005c3c:	46bd      	mov	sp, r7
 8005c3e:	bd80      	pop	{r7, pc}
 8005c40:	080075e0 	.word	0x080075e0
 8005c44:	08006291 	.word	0x08006291
 8005c48:	20000be8 	.word	0x20000be8
 8005c4c:	20000be4 	.word	0x20000be4
 8005c50:	20000bd0 	.word	0x20000bd0
 8005c54:	20000bc8 	.word	0x20000bc8

08005c58 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8005c58:	b480      	push	{r7}
 8005c5a:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8005c5c:	4b04      	ldr	r3, [pc, #16]	; (8005c70 <vTaskSuspendAll+0x18>)
 8005c5e:	681b      	ldr	r3, [r3, #0]
 8005c60:	3301      	adds	r3, #1
 8005c62:	4a03      	ldr	r2, [pc, #12]	; (8005c70 <vTaskSuspendAll+0x18>)
 8005c64:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 8005c66:	bf00      	nop
 8005c68:	46bd      	mov	sp, r7
 8005c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c6e:	4770      	bx	lr
 8005c70:	20000bec 	.word	0x20000bec

08005c74 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8005c74:	b580      	push	{r7, lr}
 8005c76:	b084      	sub	sp, #16
 8005c78:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8005c7a:	2300      	movs	r3, #0
 8005c7c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8005c7e:	2300      	movs	r3, #0
 8005c80:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8005c82:	4b43      	ldr	r3, [pc, #268]	; (8005d90 <xTaskResumeAll+0x11c>)
 8005c84:	681b      	ldr	r3, [r3, #0]
 8005c86:	2b00      	cmp	r3, #0
 8005c88:	d10c      	bne.n	8005ca4 <xTaskResumeAll+0x30>
	__asm volatile
 8005c8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c8e:	b672      	cpsid	i
 8005c90:	f383 8811 	msr	BASEPRI, r3
 8005c94:	f3bf 8f6f 	isb	sy
 8005c98:	f3bf 8f4f 	dsb	sy
 8005c9c:	b662      	cpsie	i
 8005c9e:	603b      	str	r3, [r7, #0]
}
 8005ca0:	bf00      	nop
 8005ca2:	e7fe      	b.n	8005ca2 <xTaskResumeAll+0x2e>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8005ca4:	f001 f91a 	bl	8006edc <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8005ca8:	4b39      	ldr	r3, [pc, #228]	; (8005d90 <xTaskResumeAll+0x11c>)
 8005caa:	681b      	ldr	r3, [r3, #0]
 8005cac:	3b01      	subs	r3, #1
 8005cae:	4a38      	ldr	r2, [pc, #224]	; (8005d90 <xTaskResumeAll+0x11c>)
 8005cb0:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005cb2:	4b37      	ldr	r3, [pc, #220]	; (8005d90 <xTaskResumeAll+0x11c>)
 8005cb4:	681b      	ldr	r3, [r3, #0]
 8005cb6:	2b00      	cmp	r3, #0
 8005cb8:	d162      	bne.n	8005d80 <xTaskResumeAll+0x10c>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8005cba:	4b36      	ldr	r3, [pc, #216]	; (8005d94 <xTaskResumeAll+0x120>)
 8005cbc:	681b      	ldr	r3, [r3, #0]
 8005cbe:	2b00      	cmp	r3, #0
 8005cc0:	d05e      	beq.n	8005d80 <xTaskResumeAll+0x10c>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005cc2:	e02f      	b.n	8005d24 <xTaskResumeAll+0xb0>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005cc4:	4b34      	ldr	r3, [pc, #208]	; (8005d98 <xTaskResumeAll+0x124>)
 8005cc6:	68db      	ldr	r3, [r3, #12]
 8005cc8:	68db      	ldr	r3, [r3, #12]
 8005cca:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005ccc:	68fb      	ldr	r3, [r7, #12]
 8005cce:	3318      	adds	r3, #24
 8005cd0:	4618      	mov	r0, r3
 8005cd2:	f7fe ff7b 	bl	8004bcc <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005cd6:	68fb      	ldr	r3, [r7, #12]
 8005cd8:	3304      	adds	r3, #4
 8005cda:	4618      	mov	r0, r3
 8005cdc:	f7fe ff76 	bl	8004bcc <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8005ce0:	68fb      	ldr	r3, [r7, #12]
 8005ce2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005ce4:	4b2d      	ldr	r3, [pc, #180]	; (8005d9c <xTaskResumeAll+0x128>)
 8005ce6:	681b      	ldr	r3, [r3, #0]
 8005ce8:	429a      	cmp	r2, r3
 8005cea:	d903      	bls.n	8005cf4 <xTaskResumeAll+0x80>
 8005cec:	68fb      	ldr	r3, [r7, #12]
 8005cee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005cf0:	4a2a      	ldr	r2, [pc, #168]	; (8005d9c <xTaskResumeAll+0x128>)
 8005cf2:	6013      	str	r3, [r2, #0]
 8005cf4:	68fb      	ldr	r3, [r7, #12]
 8005cf6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005cf8:	4613      	mov	r3, r2
 8005cfa:	009b      	lsls	r3, r3, #2
 8005cfc:	4413      	add	r3, r2
 8005cfe:	009b      	lsls	r3, r3, #2
 8005d00:	4a27      	ldr	r2, [pc, #156]	; (8005da0 <xTaskResumeAll+0x12c>)
 8005d02:	441a      	add	r2, r3
 8005d04:	68fb      	ldr	r3, [r7, #12]
 8005d06:	3304      	adds	r3, #4
 8005d08:	4619      	mov	r1, r3
 8005d0a:	4610      	mov	r0, r2
 8005d0c:	f7fe ff01 	bl	8004b12 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005d10:	68fb      	ldr	r3, [r7, #12]
 8005d12:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005d14:	4b23      	ldr	r3, [pc, #140]	; (8005da4 <xTaskResumeAll+0x130>)
 8005d16:	681b      	ldr	r3, [r3, #0]
 8005d18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d1a:	429a      	cmp	r2, r3
 8005d1c:	d302      	bcc.n	8005d24 <xTaskResumeAll+0xb0>
					{
						xYieldPending = pdTRUE;
 8005d1e:	4b22      	ldr	r3, [pc, #136]	; (8005da8 <xTaskResumeAll+0x134>)
 8005d20:	2201      	movs	r2, #1
 8005d22:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005d24:	4b1c      	ldr	r3, [pc, #112]	; (8005d98 <xTaskResumeAll+0x124>)
 8005d26:	681b      	ldr	r3, [r3, #0]
 8005d28:	2b00      	cmp	r3, #0
 8005d2a:	d1cb      	bne.n	8005cc4 <xTaskResumeAll+0x50>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8005d2c:	68fb      	ldr	r3, [r7, #12]
 8005d2e:	2b00      	cmp	r3, #0
 8005d30:	d001      	beq.n	8005d36 <xTaskResumeAll+0xc2>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8005d32:	f000 fb65 	bl	8006400 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8005d36:	4b1d      	ldr	r3, [pc, #116]	; (8005dac <xTaskResumeAll+0x138>)
 8005d38:	681b      	ldr	r3, [r3, #0]
 8005d3a:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	2b00      	cmp	r3, #0
 8005d40:	d010      	beq.n	8005d64 <xTaskResumeAll+0xf0>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8005d42:	f000 f847 	bl	8005dd4 <xTaskIncrementTick>
 8005d46:	4603      	mov	r3, r0
 8005d48:	2b00      	cmp	r3, #0
 8005d4a:	d002      	beq.n	8005d52 <xTaskResumeAll+0xde>
							{
								xYieldPending = pdTRUE;
 8005d4c:	4b16      	ldr	r3, [pc, #88]	; (8005da8 <xTaskResumeAll+0x134>)
 8005d4e:	2201      	movs	r2, #1
 8005d50:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	3b01      	subs	r3, #1
 8005d56:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	2b00      	cmp	r3, #0
 8005d5c:	d1f1      	bne.n	8005d42 <xTaskResumeAll+0xce>

						uxPendedTicks = 0;
 8005d5e:	4b13      	ldr	r3, [pc, #76]	; (8005dac <xTaskResumeAll+0x138>)
 8005d60:	2200      	movs	r2, #0
 8005d62:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8005d64:	4b10      	ldr	r3, [pc, #64]	; (8005da8 <xTaskResumeAll+0x134>)
 8005d66:	681b      	ldr	r3, [r3, #0]
 8005d68:	2b00      	cmp	r3, #0
 8005d6a:	d009      	beq.n	8005d80 <xTaskResumeAll+0x10c>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8005d6c:	2301      	movs	r3, #1
 8005d6e:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8005d70:	4b0f      	ldr	r3, [pc, #60]	; (8005db0 <xTaskResumeAll+0x13c>)
 8005d72:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005d76:	601a      	str	r2, [r3, #0]
 8005d78:	f3bf 8f4f 	dsb	sy
 8005d7c:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8005d80:	f001 f8e0 	bl	8006f44 <vPortExitCritical>

	return xAlreadyYielded;
 8005d84:	68bb      	ldr	r3, [r7, #8]
}
 8005d86:	4618      	mov	r0, r3
 8005d88:	3710      	adds	r7, #16
 8005d8a:	46bd      	mov	sp, r7
 8005d8c:	bd80      	pop	{r7, pc}
 8005d8e:	bf00      	nop
 8005d90:	20000bec 	.word	0x20000bec
 8005d94:	20000bc4 	.word	0x20000bc4
 8005d98:	20000b84 	.word	0x20000b84
 8005d9c:	20000bcc 	.word	0x20000bcc
 8005da0:	200006f4 	.word	0x200006f4
 8005da4:	200006f0 	.word	0x200006f0
 8005da8:	20000bd8 	.word	0x20000bd8
 8005dac:	20000bd4 	.word	0x20000bd4
 8005db0:	e000ed04 	.word	0xe000ed04

08005db4 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8005db4:	b480      	push	{r7}
 8005db6:	b083      	sub	sp, #12
 8005db8:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8005dba:	4b05      	ldr	r3, [pc, #20]	; (8005dd0 <xTaskGetTickCount+0x1c>)
 8005dbc:	681b      	ldr	r3, [r3, #0]
 8005dbe:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8005dc0:	687b      	ldr	r3, [r7, #4]
}
 8005dc2:	4618      	mov	r0, r3
 8005dc4:	370c      	adds	r7, #12
 8005dc6:	46bd      	mov	sp, r7
 8005dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dcc:	4770      	bx	lr
 8005dce:	bf00      	nop
 8005dd0:	20000bc8 	.word	0x20000bc8

08005dd4 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8005dd4:	b580      	push	{r7, lr}
 8005dd6:	b086      	sub	sp, #24
 8005dd8:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8005dda:	2300      	movs	r3, #0
 8005ddc:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005dde:	4b50      	ldr	r3, [pc, #320]	; (8005f20 <xTaskIncrementTick+0x14c>)
 8005de0:	681b      	ldr	r3, [r3, #0]
 8005de2:	2b00      	cmp	r3, #0
 8005de4:	f040 808b 	bne.w	8005efe <xTaskIncrementTick+0x12a>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8005de8:	4b4e      	ldr	r3, [pc, #312]	; (8005f24 <xTaskIncrementTick+0x150>)
 8005dea:	681b      	ldr	r3, [r3, #0]
 8005dec:	3301      	adds	r3, #1
 8005dee:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8005df0:	4a4c      	ldr	r2, [pc, #304]	; (8005f24 <xTaskIncrementTick+0x150>)
 8005df2:	693b      	ldr	r3, [r7, #16]
 8005df4:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8005df6:	693b      	ldr	r3, [r7, #16]
 8005df8:	2b00      	cmp	r3, #0
 8005dfa:	d122      	bne.n	8005e42 <xTaskIncrementTick+0x6e>
		{
			taskSWITCH_DELAYED_LISTS();
 8005dfc:	4b4a      	ldr	r3, [pc, #296]	; (8005f28 <xTaskIncrementTick+0x154>)
 8005dfe:	681b      	ldr	r3, [r3, #0]
 8005e00:	681b      	ldr	r3, [r3, #0]
 8005e02:	2b00      	cmp	r3, #0
 8005e04:	d00c      	beq.n	8005e20 <xTaskIncrementTick+0x4c>
	__asm volatile
 8005e06:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e0a:	b672      	cpsid	i
 8005e0c:	f383 8811 	msr	BASEPRI, r3
 8005e10:	f3bf 8f6f 	isb	sy
 8005e14:	f3bf 8f4f 	dsb	sy
 8005e18:	b662      	cpsie	i
 8005e1a:	603b      	str	r3, [r7, #0]
}
 8005e1c:	bf00      	nop
 8005e1e:	e7fe      	b.n	8005e1e <xTaskIncrementTick+0x4a>
 8005e20:	4b41      	ldr	r3, [pc, #260]	; (8005f28 <xTaskIncrementTick+0x154>)
 8005e22:	681b      	ldr	r3, [r3, #0]
 8005e24:	60fb      	str	r3, [r7, #12]
 8005e26:	4b41      	ldr	r3, [pc, #260]	; (8005f2c <xTaskIncrementTick+0x158>)
 8005e28:	681b      	ldr	r3, [r3, #0]
 8005e2a:	4a3f      	ldr	r2, [pc, #252]	; (8005f28 <xTaskIncrementTick+0x154>)
 8005e2c:	6013      	str	r3, [r2, #0]
 8005e2e:	4a3f      	ldr	r2, [pc, #252]	; (8005f2c <xTaskIncrementTick+0x158>)
 8005e30:	68fb      	ldr	r3, [r7, #12]
 8005e32:	6013      	str	r3, [r2, #0]
 8005e34:	4b3e      	ldr	r3, [pc, #248]	; (8005f30 <xTaskIncrementTick+0x15c>)
 8005e36:	681b      	ldr	r3, [r3, #0]
 8005e38:	3301      	adds	r3, #1
 8005e3a:	4a3d      	ldr	r2, [pc, #244]	; (8005f30 <xTaskIncrementTick+0x15c>)
 8005e3c:	6013      	str	r3, [r2, #0]
 8005e3e:	f000 fadf 	bl	8006400 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8005e42:	4b3c      	ldr	r3, [pc, #240]	; (8005f34 <xTaskIncrementTick+0x160>)
 8005e44:	681b      	ldr	r3, [r3, #0]
 8005e46:	693a      	ldr	r2, [r7, #16]
 8005e48:	429a      	cmp	r2, r3
 8005e4a:	d349      	bcc.n	8005ee0 <xTaskIncrementTick+0x10c>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005e4c:	4b36      	ldr	r3, [pc, #216]	; (8005f28 <xTaskIncrementTick+0x154>)
 8005e4e:	681b      	ldr	r3, [r3, #0]
 8005e50:	681b      	ldr	r3, [r3, #0]
 8005e52:	2b00      	cmp	r3, #0
 8005e54:	d104      	bne.n	8005e60 <xTaskIncrementTick+0x8c>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005e56:	4b37      	ldr	r3, [pc, #220]	; (8005f34 <xTaskIncrementTick+0x160>)
 8005e58:	f04f 32ff 	mov.w	r2, #4294967295
 8005e5c:	601a      	str	r2, [r3, #0]
					break;
 8005e5e:	e03f      	b.n	8005ee0 <xTaskIncrementTick+0x10c>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005e60:	4b31      	ldr	r3, [pc, #196]	; (8005f28 <xTaskIncrementTick+0x154>)
 8005e62:	681b      	ldr	r3, [r3, #0]
 8005e64:	68db      	ldr	r3, [r3, #12]
 8005e66:	68db      	ldr	r3, [r3, #12]
 8005e68:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8005e6a:	68bb      	ldr	r3, [r7, #8]
 8005e6c:	685b      	ldr	r3, [r3, #4]
 8005e6e:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8005e70:	693a      	ldr	r2, [r7, #16]
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	429a      	cmp	r2, r3
 8005e76:	d203      	bcs.n	8005e80 <xTaskIncrementTick+0xac>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8005e78:	4a2e      	ldr	r2, [pc, #184]	; (8005f34 <xTaskIncrementTick+0x160>)
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8005e7e:	e02f      	b.n	8005ee0 <xTaskIncrementTick+0x10c>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005e80:	68bb      	ldr	r3, [r7, #8]
 8005e82:	3304      	adds	r3, #4
 8005e84:	4618      	mov	r0, r3
 8005e86:	f7fe fea1 	bl	8004bcc <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8005e8a:	68bb      	ldr	r3, [r7, #8]
 8005e8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e8e:	2b00      	cmp	r3, #0
 8005e90:	d004      	beq.n	8005e9c <xTaskIncrementTick+0xc8>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005e92:	68bb      	ldr	r3, [r7, #8]
 8005e94:	3318      	adds	r3, #24
 8005e96:	4618      	mov	r0, r3
 8005e98:	f7fe fe98 	bl	8004bcc <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8005e9c:	68bb      	ldr	r3, [r7, #8]
 8005e9e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005ea0:	4b25      	ldr	r3, [pc, #148]	; (8005f38 <xTaskIncrementTick+0x164>)
 8005ea2:	681b      	ldr	r3, [r3, #0]
 8005ea4:	429a      	cmp	r2, r3
 8005ea6:	d903      	bls.n	8005eb0 <xTaskIncrementTick+0xdc>
 8005ea8:	68bb      	ldr	r3, [r7, #8]
 8005eaa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005eac:	4a22      	ldr	r2, [pc, #136]	; (8005f38 <xTaskIncrementTick+0x164>)
 8005eae:	6013      	str	r3, [r2, #0]
 8005eb0:	68bb      	ldr	r3, [r7, #8]
 8005eb2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005eb4:	4613      	mov	r3, r2
 8005eb6:	009b      	lsls	r3, r3, #2
 8005eb8:	4413      	add	r3, r2
 8005eba:	009b      	lsls	r3, r3, #2
 8005ebc:	4a1f      	ldr	r2, [pc, #124]	; (8005f3c <xTaskIncrementTick+0x168>)
 8005ebe:	441a      	add	r2, r3
 8005ec0:	68bb      	ldr	r3, [r7, #8]
 8005ec2:	3304      	adds	r3, #4
 8005ec4:	4619      	mov	r1, r3
 8005ec6:	4610      	mov	r0, r2
 8005ec8:	f7fe fe23 	bl	8004b12 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005ecc:	68bb      	ldr	r3, [r7, #8]
 8005ece:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005ed0:	4b1b      	ldr	r3, [pc, #108]	; (8005f40 <xTaskIncrementTick+0x16c>)
 8005ed2:	681b      	ldr	r3, [r3, #0]
 8005ed4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ed6:	429a      	cmp	r2, r3
 8005ed8:	d3b8      	bcc.n	8005e4c <xTaskIncrementTick+0x78>
						{
							xSwitchRequired = pdTRUE;
 8005eda:	2301      	movs	r3, #1
 8005edc:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005ede:	e7b5      	b.n	8005e4c <xTaskIncrementTick+0x78>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8005ee0:	4b17      	ldr	r3, [pc, #92]	; (8005f40 <xTaskIncrementTick+0x16c>)
 8005ee2:	681b      	ldr	r3, [r3, #0]
 8005ee4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005ee6:	4915      	ldr	r1, [pc, #84]	; (8005f3c <xTaskIncrementTick+0x168>)
 8005ee8:	4613      	mov	r3, r2
 8005eea:	009b      	lsls	r3, r3, #2
 8005eec:	4413      	add	r3, r2
 8005eee:	009b      	lsls	r3, r3, #2
 8005ef0:	440b      	add	r3, r1
 8005ef2:	681b      	ldr	r3, [r3, #0]
 8005ef4:	2b01      	cmp	r3, #1
 8005ef6:	d907      	bls.n	8005f08 <xTaskIncrementTick+0x134>
			{
				xSwitchRequired = pdTRUE;
 8005ef8:	2301      	movs	r3, #1
 8005efa:	617b      	str	r3, [r7, #20]
 8005efc:	e004      	b.n	8005f08 <xTaskIncrementTick+0x134>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8005efe:	4b11      	ldr	r3, [pc, #68]	; (8005f44 <xTaskIncrementTick+0x170>)
 8005f00:	681b      	ldr	r3, [r3, #0]
 8005f02:	3301      	adds	r3, #1
 8005f04:	4a0f      	ldr	r2, [pc, #60]	; (8005f44 <xTaskIncrementTick+0x170>)
 8005f06:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8005f08:	4b0f      	ldr	r3, [pc, #60]	; (8005f48 <xTaskIncrementTick+0x174>)
 8005f0a:	681b      	ldr	r3, [r3, #0]
 8005f0c:	2b00      	cmp	r3, #0
 8005f0e:	d001      	beq.n	8005f14 <xTaskIncrementTick+0x140>
		{
			xSwitchRequired = pdTRUE;
 8005f10:	2301      	movs	r3, #1
 8005f12:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8005f14:	697b      	ldr	r3, [r7, #20]
}
 8005f16:	4618      	mov	r0, r3
 8005f18:	3718      	adds	r7, #24
 8005f1a:	46bd      	mov	sp, r7
 8005f1c:	bd80      	pop	{r7, pc}
 8005f1e:	bf00      	nop
 8005f20:	20000bec 	.word	0x20000bec
 8005f24:	20000bc8 	.word	0x20000bc8
 8005f28:	20000b7c 	.word	0x20000b7c
 8005f2c:	20000b80 	.word	0x20000b80
 8005f30:	20000bdc 	.word	0x20000bdc
 8005f34:	20000be4 	.word	0x20000be4
 8005f38:	20000bcc 	.word	0x20000bcc
 8005f3c:	200006f4 	.word	0x200006f4
 8005f40:	200006f0 	.word	0x200006f0
 8005f44:	20000bd4 	.word	0x20000bd4
 8005f48:	20000bd8 	.word	0x20000bd8

08005f4c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8005f4c:	b480      	push	{r7}
 8005f4e:	b085      	sub	sp, #20
 8005f50:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8005f52:	4b29      	ldr	r3, [pc, #164]	; (8005ff8 <vTaskSwitchContext+0xac>)
 8005f54:	681b      	ldr	r3, [r3, #0]
 8005f56:	2b00      	cmp	r3, #0
 8005f58:	d003      	beq.n	8005f62 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8005f5a:	4b28      	ldr	r3, [pc, #160]	; (8005ffc <vTaskSwitchContext+0xb0>)
 8005f5c:	2201      	movs	r2, #1
 8005f5e:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8005f60:	e043      	b.n	8005fea <vTaskSwitchContext+0x9e>
		xYieldPending = pdFALSE;
 8005f62:	4b26      	ldr	r3, [pc, #152]	; (8005ffc <vTaskSwitchContext+0xb0>)
 8005f64:	2200      	movs	r2, #0
 8005f66:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005f68:	4b25      	ldr	r3, [pc, #148]	; (8006000 <vTaskSwitchContext+0xb4>)
 8005f6a:	681b      	ldr	r3, [r3, #0]
 8005f6c:	60fb      	str	r3, [r7, #12]
 8005f6e:	e012      	b.n	8005f96 <vTaskSwitchContext+0x4a>
 8005f70:	68fb      	ldr	r3, [r7, #12]
 8005f72:	2b00      	cmp	r3, #0
 8005f74:	d10c      	bne.n	8005f90 <vTaskSwitchContext+0x44>
	__asm volatile
 8005f76:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f7a:	b672      	cpsid	i
 8005f7c:	f383 8811 	msr	BASEPRI, r3
 8005f80:	f3bf 8f6f 	isb	sy
 8005f84:	f3bf 8f4f 	dsb	sy
 8005f88:	b662      	cpsie	i
 8005f8a:	607b      	str	r3, [r7, #4]
}
 8005f8c:	bf00      	nop
 8005f8e:	e7fe      	b.n	8005f8e <vTaskSwitchContext+0x42>
 8005f90:	68fb      	ldr	r3, [r7, #12]
 8005f92:	3b01      	subs	r3, #1
 8005f94:	60fb      	str	r3, [r7, #12]
 8005f96:	491b      	ldr	r1, [pc, #108]	; (8006004 <vTaskSwitchContext+0xb8>)
 8005f98:	68fa      	ldr	r2, [r7, #12]
 8005f9a:	4613      	mov	r3, r2
 8005f9c:	009b      	lsls	r3, r3, #2
 8005f9e:	4413      	add	r3, r2
 8005fa0:	009b      	lsls	r3, r3, #2
 8005fa2:	440b      	add	r3, r1
 8005fa4:	681b      	ldr	r3, [r3, #0]
 8005fa6:	2b00      	cmp	r3, #0
 8005fa8:	d0e2      	beq.n	8005f70 <vTaskSwitchContext+0x24>
 8005faa:	68fa      	ldr	r2, [r7, #12]
 8005fac:	4613      	mov	r3, r2
 8005fae:	009b      	lsls	r3, r3, #2
 8005fb0:	4413      	add	r3, r2
 8005fb2:	009b      	lsls	r3, r3, #2
 8005fb4:	4a13      	ldr	r2, [pc, #76]	; (8006004 <vTaskSwitchContext+0xb8>)
 8005fb6:	4413      	add	r3, r2
 8005fb8:	60bb      	str	r3, [r7, #8]
 8005fba:	68bb      	ldr	r3, [r7, #8]
 8005fbc:	685b      	ldr	r3, [r3, #4]
 8005fbe:	685a      	ldr	r2, [r3, #4]
 8005fc0:	68bb      	ldr	r3, [r7, #8]
 8005fc2:	605a      	str	r2, [r3, #4]
 8005fc4:	68bb      	ldr	r3, [r7, #8]
 8005fc6:	685a      	ldr	r2, [r3, #4]
 8005fc8:	68bb      	ldr	r3, [r7, #8]
 8005fca:	3308      	adds	r3, #8
 8005fcc:	429a      	cmp	r2, r3
 8005fce:	d104      	bne.n	8005fda <vTaskSwitchContext+0x8e>
 8005fd0:	68bb      	ldr	r3, [r7, #8]
 8005fd2:	685b      	ldr	r3, [r3, #4]
 8005fd4:	685a      	ldr	r2, [r3, #4]
 8005fd6:	68bb      	ldr	r3, [r7, #8]
 8005fd8:	605a      	str	r2, [r3, #4]
 8005fda:	68bb      	ldr	r3, [r7, #8]
 8005fdc:	685b      	ldr	r3, [r3, #4]
 8005fde:	68db      	ldr	r3, [r3, #12]
 8005fe0:	4a09      	ldr	r2, [pc, #36]	; (8006008 <vTaskSwitchContext+0xbc>)
 8005fe2:	6013      	str	r3, [r2, #0]
 8005fe4:	4a06      	ldr	r2, [pc, #24]	; (8006000 <vTaskSwitchContext+0xb4>)
 8005fe6:	68fb      	ldr	r3, [r7, #12]
 8005fe8:	6013      	str	r3, [r2, #0]
}
 8005fea:	bf00      	nop
 8005fec:	3714      	adds	r7, #20
 8005fee:	46bd      	mov	sp, r7
 8005ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ff4:	4770      	bx	lr
 8005ff6:	bf00      	nop
 8005ff8:	20000bec 	.word	0x20000bec
 8005ffc:	20000bd8 	.word	0x20000bd8
 8006000:	20000bcc 	.word	0x20000bcc
 8006004:	200006f4 	.word	0x200006f4
 8006008:	200006f0 	.word	0x200006f0

0800600c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800600c:	b580      	push	{r7, lr}
 800600e:	b084      	sub	sp, #16
 8006010:	af00      	add	r7, sp, #0
 8006012:	6078      	str	r0, [r7, #4]
 8006014:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	2b00      	cmp	r3, #0
 800601a:	d10c      	bne.n	8006036 <vTaskPlaceOnEventList+0x2a>
	__asm volatile
 800601c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006020:	b672      	cpsid	i
 8006022:	f383 8811 	msr	BASEPRI, r3
 8006026:	f3bf 8f6f 	isb	sy
 800602a:	f3bf 8f4f 	dsb	sy
 800602e:	b662      	cpsie	i
 8006030:	60fb      	str	r3, [r7, #12]
}
 8006032:	bf00      	nop
 8006034:	e7fe      	b.n	8006034 <vTaskPlaceOnEventList+0x28>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8006036:	4b07      	ldr	r3, [pc, #28]	; (8006054 <vTaskPlaceOnEventList+0x48>)
 8006038:	681b      	ldr	r3, [r3, #0]
 800603a:	3318      	adds	r3, #24
 800603c:	4619      	mov	r1, r3
 800603e:	6878      	ldr	r0, [r7, #4]
 8006040:	f7fe fd8b 	bl	8004b5a <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8006044:	2101      	movs	r1, #1
 8006046:	6838      	ldr	r0, [r7, #0]
 8006048:	f000 fa8a 	bl	8006560 <prvAddCurrentTaskToDelayedList>
}
 800604c:	bf00      	nop
 800604e:	3710      	adds	r7, #16
 8006050:	46bd      	mov	sp, r7
 8006052:	bd80      	pop	{r7, pc}
 8006054:	200006f0 	.word	0x200006f0

08006058 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8006058:	b580      	push	{r7, lr}
 800605a:	b086      	sub	sp, #24
 800605c:	af00      	add	r7, sp, #0
 800605e:	60f8      	str	r0, [r7, #12]
 8006060:	60b9      	str	r1, [r7, #8]
 8006062:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8006064:	68fb      	ldr	r3, [r7, #12]
 8006066:	2b00      	cmp	r3, #0
 8006068:	d10c      	bne.n	8006084 <vTaskPlaceOnEventListRestricted+0x2c>
	__asm volatile
 800606a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800606e:	b672      	cpsid	i
 8006070:	f383 8811 	msr	BASEPRI, r3
 8006074:	f3bf 8f6f 	isb	sy
 8006078:	f3bf 8f4f 	dsb	sy
 800607c:	b662      	cpsie	i
 800607e:	617b      	str	r3, [r7, #20]
}
 8006080:	bf00      	nop
 8006082:	e7fe      	b.n	8006082 <vTaskPlaceOnEventListRestricted+0x2a>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8006084:	4b0a      	ldr	r3, [pc, #40]	; (80060b0 <vTaskPlaceOnEventListRestricted+0x58>)
 8006086:	681b      	ldr	r3, [r3, #0]
 8006088:	3318      	adds	r3, #24
 800608a:	4619      	mov	r1, r3
 800608c:	68f8      	ldr	r0, [r7, #12]
 800608e:	f7fe fd40 	bl	8004b12 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	2b00      	cmp	r3, #0
 8006096:	d002      	beq.n	800609e <vTaskPlaceOnEventListRestricted+0x46>
		{
			xTicksToWait = portMAX_DELAY;
 8006098:	f04f 33ff 	mov.w	r3, #4294967295
 800609c:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800609e:	6879      	ldr	r1, [r7, #4]
 80060a0:	68b8      	ldr	r0, [r7, #8]
 80060a2:	f000 fa5d 	bl	8006560 <prvAddCurrentTaskToDelayedList>
	}
 80060a6:	bf00      	nop
 80060a8:	3718      	adds	r7, #24
 80060aa:	46bd      	mov	sp, r7
 80060ac:	bd80      	pop	{r7, pc}
 80060ae:	bf00      	nop
 80060b0:	200006f0 	.word	0x200006f0

080060b4 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80060b4:	b580      	push	{r7, lr}
 80060b6:	b086      	sub	sp, #24
 80060b8:	af00      	add	r7, sp, #0
 80060ba:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	68db      	ldr	r3, [r3, #12]
 80060c0:	68db      	ldr	r3, [r3, #12]
 80060c2:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80060c4:	693b      	ldr	r3, [r7, #16]
 80060c6:	2b00      	cmp	r3, #0
 80060c8:	d10c      	bne.n	80060e4 <xTaskRemoveFromEventList+0x30>
	__asm volatile
 80060ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80060ce:	b672      	cpsid	i
 80060d0:	f383 8811 	msr	BASEPRI, r3
 80060d4:	f3bf 8f6f 	isb	sy
 80060d8:	f3bf 8f4f 	dsb	sy
 80060dc:	b662      	cpsie	i
 80060de:	60fb      	str	r3, [r7, #12]
}
 80060e0:	bf00      	nop
 80060e2:	e7fe      	b.n	80060e2 <xTaskRemoveFromEventList+0x2e>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80060e4:	693b      	ldr	r3, [r7, #16]
 80060e6:	3318      	adds	r3, #24
 80060e8:	4618      	mov	r0, r3
 80060ea:	f7fe fd6f 	bl	8004bcc <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80060ee:	4b1e      	ldr	r3, [pc, #120]	; (8006168 <xTaskRemoveFromEventList+0xb4>)
 80060f0:	681b      	ldr	r3, [r3, #0]
 80060f2:	2b00      	cmp	r3, #0
 80060f4:	d11d      	bne.n	8006132 <xTaskRemoveFromEventList+0x7e>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80060f6:	693b      	ldr	r3, [r7, #16]
 80060f8:	3304      	adds	r3, #4
 80060fa:	4618      	mov	r0, r3
 80060fc:	f7fe fd66 	bl	8004bcc <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8006100:	693b      	ldr	r3, [r7, #16]
 8006102:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006104:	4b19      	ldr	r3, [pc, #100]	; (800616c <xTaskRemoveFromEventList+0xb8>)
 8006106:	681b      	ldr	r3, [r3, #0]
 8006108:	429a      	cmp	r2, r3
 800610a:	d903      	bls.n	8006114 <xTaskRemoveFromEventList+0x60>
 800610c:	693b      	ldr	r3, [r7, #16]
 800610e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006110:	4a16      	ldr	r2, [pc, #88]	; (800616c <xTaskRemoveFromEventList+0xb8>)
 8006112:	6013      	str	r3, [r2, #0]
 8006114:	693b      	ldr	r3, [r7, #16]
 8006116:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006118:	4613      	mov	r3, r2
 800611a:	009b      	lsls	r3, r3, #2
 800611c:	4413      	add	r3, r2
 800611e:	009b      	lsls	r3, r3, #2
 8006120:	4a13      	ldr	r2, [pc, #76]	; (8006170 <xTaskRemoveFromEventList+0xbc>)
 8006122:	441a      	add	r2, r3
 8006124:	693b      	ldr	r3, [r7, #16]
 8006126:	3304      	adds	r3, #4
 8006128:	4619      	mov	r1, r3
 800612a:	4610      	mov	r0, r2
 800612c:	f7fe fcf1 	bl	8004b12 <vListInsertEnd>
 8006130:	e005      	b.n	800613e <xTaskRemoveFromEventList+0x8a>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8006132:	693b      	ldr	r3, [r7, #16]
 8006134:	3318      	adds	r3, #24
 8006136:	4619      	mov	r1, r3
 8006138:	480e      	ldr	r0, [pc, #56]	; (8006174 <xTaskRemoveFromEventList+0xc0>)
 800613a:	f7fe fcea 	bl	8004b12 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800613e:	693b      	ldr	r3, [r7, #16]
 8006140:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006142:	4b0d      	ldr	r3, [pc, #52]	; (8006178 <xTaskRemoveFromEventList+0xc4>)
 8006144:	681b      	ldr	r3, [r3, #0]
 8006146:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006148:	429a      	cmp	r2, r3
 800614a:	d905      	bls.n	8006158 <xTaskRemoveFromEventList+0xa4>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800614c:	2301      	movs	r3, #1
 800614e:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8006150:	4b0a      	ldr	r3, [pc, #40]	; (800617c <xTaskRemoveFromEventList+0xc8>)
 8006152:	2201      	movs	r2, #1
 8006154:	601a      	str	r2, [r3, #0]
 8006156:	e001      	b.n	800615c <xTaskRemoveFromEventList+0xa8>
	}
	else
	{
		xReturn = pdFALSE;
 8006158:	2300      	movs	r3, #0
 800615a:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800615c:	697b      	ldr	r3, [r7, #20]
}
 800615e:	4618      	mov	r0, r3
 8006160:	3718      	adds	r7, #24
 8006162:	46bd      	mov	sp, r7
 8006164:	bd80      	pop	{r7, pc}
 8006166:	bf00      	nop
 8006168:	20000bec 	.word	0x20000bec
 800616c:	20000bcc 	.word	0x20000bcc
 8006170:	200006f4 	.word	0x200006f4
 8006174:	20000b84 	.word	0x20000b84
 8006178:	200006f0 	.word	0x200006f0
 800617c:	20000bd8 	.word	0x20000bd8

08006180 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8006180:	b480      	push	{r7}
 8006182:	b083      	sub	sp, #12
 8006184:	af00      	add	r7, sp, #0
 8006186:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8006188:	4b06      	ldr	r3, [pc, #24]	; (80061a4 <vTaskInternalSetTimeOutState+0x24>)
 800618a:	681a      	ldr	r2, [r3, #0]
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8006190:	4b05      	ldr	r3, [pc, #20]	; (80061a8 <vTaskInternalSetTimeOutState+0x28>)
 8006192:	681a      	ldr	r2, [r3, #0]
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	605a      	str	r2, [r3, #4]
}
 8006198:	bf00      	nop
 800619a:	370c      	adds	r7, #12
 800619c:	46bd      	mov	sp, r7
 800619e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061a2:	4770      	bx	lr
 80061a4:	20000bdc 	.word	0x20000bdc
 80061a8:	20000bc8 	.word	0x20000bc8

080061ac <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80061ac:	b580      	push	{r7, lr}
 80061ae:	b088      	sub	sp, #32
 80061b0:	af00      	add	r7, sp, #0
 80061b2:	6078      	str	r0, [r7, #4]
 80061b4:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	2b00      	cmp	r3, #0
 80061ba:	d10c      	bne.n	80061d6 <xTaskCheckForTimeOut+0x2a>
	__asm volatile
 80061bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80061c0:	b672      	cpsid	i
 80061c2:	f383 8811 	msr	BASEPRI, r3
 80061c6:	f3bf 8f6f 	isb	sy
 80061ca:	f3bf 8f4f 	dsb	sy
 80061ce:	b662      	cpsie	i
 80061d0:	613b      	str	r3, [r7, #16]
}
 80061d2:	bf00      	nop
 80061d4:	e7fe      	b.n	80061d4 <xTaskCheckForTimeOut+0x28>
	configASSERT( pxTicksToWait );
 80061d6:	683b      	ldr	r3, [r7, #0]
 80061d8:	2b00      	cmp	r3, #0
 80061da:	d10c      	bne.n	80061f6 <xTaskCheckForTimeOut+0x4a>
	__asm volatile
 80061dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80061e0:	b672      	cpsid	i
 80061e2:	f383 8811 	msr	BASEPRI, r3
 80061e6:	f3bf 8f6f 	isb	sy
 80061ea:	f3bf 8f4f 	dsb	sy
 80061ee:	b662      	cpsie	i
 80061f0:	60fb      	str	r3, [r7, #12]
}
 80061f2:	bf00      	nop
 80061f4:	e7fe      	b.n	80061f4 <xTaskCheckForTimeOut+0x48>

	taskENTER_CRITICAL();
 80061f6:	f000 fe71 	bl	8006edc <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80061fa:	4b1d      	ldr	r3, [pc, #116]	; (8006270 <xTaskCheckForTimeOut+0xc4>)
 80061fc:	681b      	ldr	r3, [r3, #0]
 80061fe:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	685b      	ldr	r3, [r3, #4]
 8006204:	69ba      	ldr	r2, [r7, #24]
 8006206:	1ad3      	subs	r3, r2, r3
 8006208:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800620a:	683b      	ldr	r3, [r7, #0]
 800620c:	681b      	ldr	r3, [r3, #0]
 800620e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006212:	d102      	bne.n	800621a <xTaskCheckForTimeOut+0x6e>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8006214:	2300      	movs	r3, #0
 8006216:	61fb      	str	r3, [r7, #28]
 8006218:	e023      	b.n	8006262 <xTaskCheckForTimeOut+0xb6>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	681a      	ldr	r2, [r3, #0]
 800621e:	4b15      	ldr	r3, [pc, #84]	; (8006274 <xTaskCheckForTimeOut+0xc8>)
 8006220:	681b      	ldr	r3, [r3, #0]
 8006222:	429a      	cmp	r2, r3
 8006224:	d007      	beq.n	8006236 <xTaskCheckForTimeOut+0x8a>
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	685b      	ldr	r3, [r3, #4]
 800622a:	69ba      	ldr	r2, [r7, #24]
 800622c:	429a      	cmp	r2, r3
 800622e:	d302      	bcc.n	8006236 <xTaskCheckForTimeOut+0x8a>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8006230:	2301      	movs	r3, #1
 8006232:	61fb      	str	r3, [r7, #28]
 8006234:	e015      	b.n	8006262 <xTaskCheckForTimeOut+0xb6>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8006236:	683b      	ldr	r3, [r7, #0]
 8006238:	681b      	ldr	r3, [r3, #0]
 800623a:	697a      	ldr	r2, [r7, #20]
 800623c:	429a      	cmp	r2, r3
 800623e:	d20b      	bcs.n	8006258 <xTaskCheckForTimeOut+0xac>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8006240:	683b      	ldr	r3, [r7, #0]
 8006242:	681a      	ldr	r2, [r3, #0]
 8006244:	697b      	ldr	r3, [r7, #20]
 8006246:	1ad2      	subs	r2, r2, r3
 8006248:	683b      	ldr	r3, [r7, #0]
 800624a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800624c:	6878      	ldr	r0, [r7, #4]
 800624e:	f7ff ff97 	bl	8006180 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8006252:	2300      	movs	r3, #0
 8006254:	61fb      	str	r3, [r7, #28]
 8006256:	e004      	b.n	8006262 <xTaskCheckForTimeOut+0xb6>
		}
		else
		{
			*pxTicksToWait = 0;
 8006258:	683b      	ldr	r3, [r7, #0]
 800625a:	2200      	movs	r2, #0
 800625c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800625e:	2301      	movs	r3, #1
 8006260:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8006262:	f000 fe6f 	bl	8006f44 <vPortExitCritical>

	return xReturn;
 8006266:	69fb      	ldr	r3, [r7, #28]
}
 8006268:	4618      	mov	r0, r3
 800626a:	3720      	adds	r7, #32
 800626c:	46bd      	mov	sp, r7
 800626e:	bd80      	pop	{r7, pc}
 8006270:	20000bc8 	.word	0x20000bc8
 8006274:	20000bdc 	.word	0x20000bdc

08006278 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8006278:	b480      	push	{r7}
 800627a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800627c:	4b03      	ldr	r3, [pc, #12]	; (800628c <vTaskMissedYield+0x14>)
 800627e:	2201      	movs	r2, #1
 8006280:	601a      	str	r2, [r3, #0]
}
 8006282:	bf00      	nop
 8006284:	46bd      	mov	sp, r7
 8006286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800628a:	4770      	bx	lr
 800628c:	20000bd8 	.word	0x20000bd8

08006290 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8006290:	b580      	push	{r7, lr}
 8006292:	b082      	sub	sp, #8
 8006294:	af00      	add	r7, sp, #0
 8006296:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8006298:	f000 f852 	bl	8006340 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800629c:	4b06      	ldr	r3, [pc, #24]	; (80062b8 <prvIdleTask+0x28>)
 800629e:	681b      	ldr	r3, [r3, #0]
 80062a0:	2b01      	cmp	r3, #1
 80062a2:	d9f9      	bls.n	8006298 <prvIdleTask+0x8>
			{
				taskYIELD();
 80062a4:	4b05      	ldr	r3, [pc, #20]	; (80062bc <prvIdleTask+0x2c>)
 80062a6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80062aa:	601a      	str	r2, [r3, #0]
 80062ac:	f3bf 8f4f 	dsb	sy
 80062b0:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80062b4:	e7f0      	b.n	8006298 <prvIdleTask+0x8>
 80062b6:	bf00      	nop
 80062b8:	200006f4 	.word	0x200006f4
 80062bc:	e000ed04 	.word	0xe000ed04

080062c0 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80062c0:	b580      	push	{r7, lr}
 80062c2:	b082      	sub	sp, #8
 80062c4:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80062c6:	2300      	movs	r3, #0
 80062c8:	607b      	str	r3, [r7, #4]
 80062ca:	e00c      	b.n	80062e6 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80062cc:	687a      	ldr	r2, [r7, #4]
 80062ce:	4613      	mov	r3, r2
 80062d0:	009b      	lsls	r3, r3, #2
 80062d2:	4413      	add	r3, r2
 80062d4:	009b      	lsls	r3, r3, #2
 80062d6:	4a12      	ldr	r2, [pc, #72]	; (8006320 <prvInitialiseTaskLists+0x60>)
 80062d8:	4413      	add	r3, r2
 80062da:	4618      	mov	r0, r3
 80062dc:	f7fe fbec 	bl	8004ab8 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	3301      	adds	r3, #1
 80062e4:	607b      	str	r3, [r7, #4]
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	2b37      	cmp	r3, #55	; 0x37
 80062ea:	d9ef      	bls.n	80062cc <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80062ec:	480d      	ldr	r0, [pc, #52]	; (8006324 <prvInitialiseTaskLists+0x64>)
 80062ee:	f7fe fbe3 	bl	8004ab8 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80062f2:	480d      	ldr	r0, [pc, #52]	; (8006328 <prvInitialiseTaskLists+0x68>)
 80062f4:	f7fe fbe0 	bl	8004ab8 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80062f8:	480c      	ldr	r0, [pc, #48]	; (800632c <prvInitialiseTaskLists+0x6c>)
 80062fa:	f7fe fbdd 	bl	8004ab8 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80062fe:	480c      	ldr	r0, [pc, #48]	; (8006330 <prvInitialiseTaskLists+0x70>)
 8006300:	f7fe fbda 	bl	8004ab8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8006304:	480b      	ldr	r0, [pc, #44]	; (8006334 <prvInitialiseTaskLists+0x74>)
 8006306:	f7fe fbd7 	bl	8004ab8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800630a:	4b0b      	ldr	r3, [pc, #44]	; (8006338 <prvInitialiseTaskLists+0x78>)
 800630c:	4a05      	ldr	r2, [pc, #20]	; (8006324 <prvInitialiseTaskLists+0x64>)
 800630e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8006310:	4b0a      	ldr	r3, [pc, #40]	; (800633c <prvInitialiseTaskLists+0x7c>)
 8006312:	4a05      	ldr	r2, [pc, #20]	; (8006328 <prvInitialiseTaskLists+0x68>)
 8006314:	601a      	str	r2, [r3, #0]
}
 8006316:	bf00      	nop
 8006318:	3708      	adds	r7, #8
 800631a:	46bd      	mov	sp, r7
 800631c:	bd80      	pop	{r7, pc}
 800631e:	bf00      	nop
 8006320:	200006f4 	.word	0x200006f4
 8006324:	20000b54 	.word	0x20000b54
 8006328:	20000b68 	.word	0x20000b68
 800632c:	20000b84 	.word	0x20000b84
 8006330:	20000b98 	.word	0x20000b98
 8006334:	20000bb0 	.word	0x20000bb0
 8006338:	20000b7c 	.word	0x20000b7c
 800633c:	20000b80 	.word	0x20000b80

08006340 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8006340:	b580      	push	{r7, lr}
 8006342:	b082      	sub	sp, #8
 8006344:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006346:	e019      	b.n	800637c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8006348:	f000 fdc8 	bl	8006edc <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800634c:	4b10      	ldr	r3, [pc, #64]	; (8006390 <prvCheckTasksWaitingTermination+0x50>)
 800634e:	68db      	ldr	r3, [r3, #12]
 8006350:	68db      	ldr	r3, [r3, #12]
 8006352:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	3304      	adds	r3, #4
 8006358:	4618      	mov	r0, r3
 800635a:	f7fe fc37 	bl	8004bcc <uxListRemove>
				--uxCurrentNumberOfTasks;
 800635e:	4b0d      	ldr	r3, [pc, #52]	; (8006394 <prvCheckTasksWaitingTermination+0x54>)
 8006360:	681b      	ldr	r3, [r3, #0]
 8006362:	3b01      	subs	r3, #1
 8006364:	4a0b      	ldr	r2, [pc, #44]	; (8006394 <prvCheckTasksWaitingTermination+0x54>)
 8006366:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8006368:	4b0b      	ldr	r3, [pc, #44]	; (8006398 <prvCheckTasksWaitingTermination+0x58>)
 800636a:	681b      	ldr	r3, [r3, #0]
 800636c:	3b01      	subs	r3, #1
 800636e:	4a0a      	ldr	r2, [pc, #40]	; (8006398 <prvCheckTasksWaitingTermination+0x58>)
 8006370:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8006372:	f000 fde7 	bl	8006f44 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8006376:	6878      	ldr	r0, [r7, #4]
 8006378:	f000 f810 	bl	800639c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800637c:	4b06      	ldr	r3, [pc, #24]	; (8006398 <prvCheckTasksWaitingTermination+0x58>)
 800637e:	681b      	ldr	r3, [r3, #0]
 8006380:	2b00      	cmp	r3, #0
 8006382:	d1e1      	bne.n	8006348 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8006384:	bf00      	nop
 8006386:	bf00      	nop
 8006388:	3708      	adds	r7, #8
 800638a:	46bd      	mov	sp, r7
 800638c:	bd80      	pop	{r7, pc}
 800638e:	bf00      	nop
 8006390:	20000b98 	.word	0x20000b98
 8006394:	20000bc4 	.word	0x20000bc4
 8006398:	20000bac 	.word	0x20000bac

0800639c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800639c:	b580      	push	{r7, lr}
 800639e:	b084      	sub	sp, #16
 80063a0:	af00      	add	r7, sp, #0
 80063a2:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 80063aa:	2b00      	cmp	r3, #0
 80063ac:	d108      	bne.n	80063c0 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80063b2:	4618      	mov	r0, r3
 80063b4:	f000 ff88 	bl	80072c8 <vPortFree>
				vPortFree( pxTCB );
 80063b8:	6878      	ldr	r0, [r7, #4]
 80063ba:	f000 ff85 	bl	80072c8 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80063be:	e01a      	b.n	80063f6 <prvDeleteTCB+0x5a>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 80063c6:	2b01      	cmp	r3, #1
 80063c8:	d103      	bne.n	80063d2 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 80063ca:	6878      	ldr	r0, [r7, #4]
 80063cc:	f000 ff7c 	bl	80072c8 <vPortFree>
	}
 80063d0:	e011      	b.n	80063f6 <prvDeleteTCB+0x5a>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 80063d8:	2b02      	cmp	r3, #2
 80063da:	d00c      	beq.n	80063f6 <prvDeleteTCB+0x5a>
	__asm volatile
 80063dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80063e0:	b672      	cpsid	i
 80063e2:	f383 8811 	msr	BASEPRI, r3
 80063e6:	f3bf 8f6f 	isb	sy
 80063ea:	f3bf 8f4f 	dsb	sy
 80063ee:	b662      	cpsie	i
 80063f0:	60fb      	str	r3, [r7, #12]
}
 80063f2:	bf00      	nop
 80063f4:	e7fe      	b.n	80063f4 <prvDeleteTCB+0x58>
	}
 80063f6:	bf00      	nop
 80063f8:	3710      	adds	r7, #16
 80063fa:	46bd      	mov	sp, r7
 80063fc:	bd80      	pop	{r7, pc}
	...

08006400 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8006400:	b480      	push	{r7}
 8006402:	b083      	sub	sp, #12
 8006404:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006406:	4b0c      	ldr	r3, [pc, #48]	; (8006438 <prvResetNextTaskUnblockTime+0x38>)
 8006408:	681b      	ldr	r3, [r3, #0]
 800640a:	681b      	ldr	r3, [r3, #0]
 800640c:	2b00      	cmp	r3, #0
 800640e:	d104      	bne.n	800641a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8006410:	4b0a      	ldr	r3, [pc, #40]	; (800643c <prvResetNextTaskUnblockTime+0x3c>)
 8006412:	f04f 32ff 	mov.w	r2, #4294967295
 8006416:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8006418:	e008      	b.n	800642c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800641a:	4b07      	ldr	r3, [pc, #28]	; (8006438 <prvResetNextTaskUnblockTime+0x38>)
 800641c:	681b      	ldr	r3, [r3, #0]
 800641e:	68db      	ldr	r3, [r3, #12]
 8006420:	68db      	ldr	r3, [r3, #12]
 8006422:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	685b      	ldr	r3, [r3, #4]
 8006428:	4a04      	ldr	r2, [pc, #16]	; (800643c <prvResetNextTaskUnblockTime+0x3c>)
 800642a:	6013      	str	r3, [r2, #0]
}
 800642c:	bf00      	nop
 800642e:	370c      	adds	r7, #12
 8006430:	46bd      	mov	sp, r7
 8006432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006436:	4770      	bx	lr
 8006438:	20000b7c 	.word	0x20000b7c
 800643c:	20000be4 	.word	0x20000be4

08006440 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8006440:	b480      	push	{r7}
 8006442:	b083      	sub	sp, #12
 8006444:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8006446:	4b0b      	ldr	r3, [pc, #44]	; (8006474 <xTaskGetSchedulerState+0x34>)
 8006448:	681b      	ldr	r3, [r3, #0]
 800644a:	2b00      	cmp	r3, #0
 800644c:	d102      	bne.n	8006454 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800644e:	2301      	movs	r3, #1
 8006450:	607b      	str	r3, [r7, #4]
 8006452:	e008      	b.n	8006466 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006454:	4b08      	ldr	r3, [pc, #32]	; (8006478 <xTaskGetSchedulerState+0x38>)
 8006456:	681b      	ldr	r3, [r3, #0]
 8006458:	2b00      	cmp	r3, #0
 800645a:	d102      	bne.n	8006462 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800645c:	2302      	movs	r3, #2
 800645e:	607b      	str	r3, [r7, #4]
 8006460:	e001      	b.n	8006466 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8006462:	2300      	movs	r3, #0
 8006464:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8006466:	687b      	ldr	r3, [r7, #4]
	}
 8006468:	4618      	mov	r0, r3
 800646a:	370c      	adds	r7, #12
 800646c:	46bd      	mov	sp, r7
 800646e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006472:	4770      	bx	lr
 8006474:	20000bd0 	.word	0x20000bd0
 8006478:	20000bec 	.word	0x20000bec

0800647c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800647c:	b580      	push	{r7, lr}
 800647e:	b086      	sub	sp, #24
 8006480:	af00      	add	r7, sp, #0
 8006482:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8006488:	2300      	movs	r3, #0
 800648a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	2b00      	cmp	r3, #0
 8006490:	d05a      	beq.n	8006548 <xTaskPriorityDisinherit+0xcc>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8006492:	4b30      	ldr	r3, [pc, #192]	; (8006554 <xTaskPriorityDisinherit+0xd8>)
 8006494:	681b      	ldr	r3, [r3, #0]
 8006496:	693a      	ldr	r2, [r7, #16]
 8006498:	429a      	cmp	r2, r3
 800649a:	d00c      	beq.n	80064b6 <xTaskPriorityDisinherit+0x3a>
	__asm volatile
 800649c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80064a0:	b672      	cpsid	i
 80064a2:	f383 8811 	msr	BASEPRI, r3
 80064a6:	f3bf 8f6f 	isb	sy
 80064aa:	f3bf 8f4f 	dsb	sy
 80064ae:	b662      	cpsie	i
 80064b0:	60fb      	str	r3, [r7, #12]
}
 80064b2:	bf00      	nop
 80064b4:	e7fe      	b.n	80064b4 <xTaskPriorityDisinherit+0x38>
			configASSERT( pxTCB->uxMutexesHeld );
 80064b6:	693b      	ldr	r3, [r7, #16]
 80064b8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80064ba:	2b00      	cmp	r3, #0
 80064bc:	d10c      	bne.n	80064d8 <xTaskPriorityDisinherit+0x5c>
	__asm volatile
 80064be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80064c2:	b672      	cpsid	i
 80064c4:	f383 8811 	msr	BASEPRI, r3
 80064c8:	f3bf 8f6f 	isb	sy
 80064cc:	f3bf 8f4f 	dsb	sy
 80064d0:	b662      	cpsie	i
 80064d2:	60bb      	str	r3, [r7, #8]
}
 80064d4:	bf00      	nop
 80064d6:	e7fe      	b.n	80064d6 <xTaskPriorityDisinherit+0x5a>
			( pxTCB->uxMutexesHeld )--;
 80064d8:	693b      	ldr	r3, [r7, #16]
 80064da:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80064dc:	1e5a      	subs	r2, r3, #1
 80064de:	693b      	ldr	r3, [r7, #16]
 80064e0:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80064e2:	693b      	ldr	r3, [r7, #16]
 80064e4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80064e6:	693b      	ldr	r3, [r7, #16]
 80064e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80064ea:	429a      	cmp	r2, r3
 80064ec:	d02c      	beq.n	8006548 <xTaskPriorityDisinherit+0xcc>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80064ee:	693b      	ldr	r3, [r7, #16]
 80064f0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80064f2:	2b00      	cmp	r3, #0
 80064f4:	d128      	bne.n	8006548 <xTaskPriorityDisinherit+0xcc>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80064f6:	693b      	ldr	r3, [r7, #16]
 80064f8:	3304      	adds	r3, #4
 80064fa:	4618      	mov	r0, r3
 80064fc:	f7fe fb66 	bl	8004bcc <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8006500:	693b      	ldr	r3, [r7, #16]
 8006502:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006504:	693b      	ldr	r3, [r7, #16]
 8006506:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006508:	693b      	ldr	r3, [r7, #16]
 800650a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800650c:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8006510:	693b      	ldr	r3, [r7, #16]
 8006512:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8006514:	693b      	ldr	r3, [r7, #16]
 8006516:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006518:	4b0f      	ldr	r3, [pc, #60]	; (8006558 <xTaskPriorityDisinherit+0xdc>)
 800651a:	681b      	ldr	r3, [r3, #0]
 800651c:	429a      	cmp	r2, r3
 800651e:	d903      	bls.n	8006528 <xTaskPriorityDisinherit+0xac>
 8006520:	693b      	ldr	r3, [r7, #16]
 8006522:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006524:	4a0c      	ldr	r2, [pc, #48]	; (8006558 <xTaskPriorityDisinherit+0xdc>)
 8006526:	6013      	str	r3, [r2, #0]
 8006528:	693b      	ldr	r3, [r7, #16]
 800652a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800652c:	4613      	mov	r3, r2
 800652e:	009b      	lsls	r3, r3, #2
 8006530:	4413      	add	r3, r2
 8006532:	009b      	lsls	r3, r3, #2
 8006534:	4a09      	ldr	r2, [pc, #36]	; (800655c <xTaskPriorityDisinherit+0xe0>)
 8006536:	441a      	add	r2, r3
 8006538:	693b      	ldr	r3, [r7, #16]
 800653a:	3304      	adds	r3, #4
 800653c:	4619      	mov	r1, r3
 800653e:	4610      	mov	r0, r2
 8006540:	f7fe fae7 	bl	8004b12 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8006544:	2301      	movs	r3, #1
 8006546:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8006548:	697b      	ldr	r3, [r7, #20]
	}
 800654a:	4618      	mov	r0, r3
 800654c:	3718      	adds	r7, #24
 800654e:	46bd      	mov	sp, r7
 8006550:	bd80      	pop	{r7, pc}
 8006552:	bf00      	nop
 8006554:	200006f0 	.word	0x200006f0
 8006558:	20000bcc 	.word	0x20000bcc
 800655c:	200006f4 	.word	0x200006f4

08006560 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8006560:	b580      	push	{r7, lr}
 8006562:	b084      	sub	sp, #16
 8006564:	af00      	add	r7, sp, #0
 8006566:	6078      	str	r0, [r7, #4]
 8006568:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800656a:	4b21      	ldr	r3, [pc, #132]	; (80065f0 <prvAddCurrentTaskToDelayedList+0x90>)
 800656c:	681b      	ldr	r3, [r3, #0]
 800656e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006570:	4b20      	ldr	r3, [pc, #128]	; (80065f4 <prvAddCurrentTaskToDelayedList+0x94>)
 8006572:	681b      	ldr	r3, [r3, #0]
 8006574:	3304      	adds	r3, #4
 8006576:	4618      	mov	r0, r3
 8006578:	f7fe fb28 	bl	8004bcc <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006582:	d10a      	bne.n	800659a <prvAddCurrentTaskToDelayedList+0x3a>
 8006584:	683b      	ldr	r3, [r7, #0]
 8006586:	2b00      	cmp	r3, #0
 8006588:	d007      	beq.n	800659a <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800658a:	4b1a      	ldr	r3, [pc, #104]	; (80065f4 <prvAddCurrentTaskToDelayedList+0x94>)
 800658c:	681b      	ldr	r3, [r3, #0]
 800658e:	3304      	adds	r3, #4
 8006590:	4619      	mov	r1, r3
 8006592:	4819      	ldr	r0, [pc, #100]	; (80065f8 <prvAddCurrentTaskToDelayedList+0x98>)
 8006594:	f7fe fabd 	bl	8004b12 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8006598:	e026      	b.n	80065e8 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800659a:	68fa      	ldr	r2, [r7, #12]
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	4413      	add	r3, r2
 80065a0:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80065a2:	4b14      	ldr	r3, [pc, #80]	; (80065f4 <prvAddCurrentTaskToDelayedList+0x94>)
 80065a4:	681b      	ldr	r3, [r3, #0]
 80065a6:	68ba      	ldr	r2, [r7, #8]
 80065a8:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80065aa:	68ba      	ldr	r2, [r7, #8]
 80065ac:	68fb      	ldr	r3, [r7, #12]
 80065ae:	429a      	cmp	r2, r3
 80065b0:	d209      	bcs.n	80065c6 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80065b2:	4b12      	ldr	r3, [pc, #72]	; (80065fc <prvAddCurrentTaskToDelayedList+0x9c>)
 80065b4:	681a      	ldr	r2, [r3, #0]
 80065b6:	4b0f      	ldr	r3, [pc, #60]	; (80065f4 <prvAddCurrentTaskToDelayedList+0x94>)
 80065b8:	681b      	ldr	r3, [r3, #0]
 80065ba:	3304      	adds	r3, #4
 80065bc:	4619      	mov	r1, r3
 80065be:	4610      	mov	r0, r2
 80065c0:	f7fe facb 	bl	8004b5a <vListInsert>
}
 80065c4:	e010      	b.n	80065e8 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80065c6:	4b0e      	ldr	r3, [pc, #56]	; (8006600 <prvAddCurrentTaskToDelayedList+0xa0>)
 80065c8:	681a      	ldr	r2, [r3, #0]
 80065ca:	4b0a      	ldr	r3, [pc, #40]	; (80065f4 <prvAddCurrentTaskToDelayedList+0x94>)
 80065cc:	681b      	ldr	r3, [r3, #0]
 80065ce:	3304      	adds	r3, #4
 80065d0:	4619      	mov	r1, r3
 80065d2:	4610      	mov	r0, r2
 80065d4:	f7fe fac1 	bl	8004b5a <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80065d8:	4b0a      	ldr	r3, [pc, #40]	; (8006604 <prvAddCurrentTaskToDelayedList+0xa4>)
 80065da:	681b      	ldr	r3, [r3, #0]
 80065dc:	68ba      	ldr	r2, [r7, #8]
 80065de:	429a      	cmp	r2, r3
 80065e0:	d202      	bcs.n	80065e8 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 80065e2:	4a08      	ldr	r2, [pc, #32]	; (8006604 <prvAddCurrentTaskToDelayedList+0xa4>)
 80065e4:	68bb      	ldr	r3, [r7, #8]
 80065e6:	6013      	str	r3, [r2, #0]
}
 80065e8:	bf00      	nop
 80065ea:	3710      	adds	r7, #16
 80065ec:	46bd      	mov	sp, r7
 80065ee:	bd80      	pop	{r7, pc}
 80065f0:	20000bc8 	.word	0x20000bc8
 80065f4:	200006f0 	.word	0x200006f0
 80065f8:	20000bb0 	.word	0x20000bb0
 80065fc:	20000b80 	.word	0x20000b80
 8006600:	20000b7c 	.word	0x20000b7c
 8006604:	20000be4 	.word	0x20000be4

08006608 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8006608:	b580      	push	{r7, lr}
 800660a:	b08a      	sub	sp, #40	; 0x28
 800660c:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800660e:	2300      	movs	r3, #0
 8006610:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8006612:	f000 fb15 	bl	8006c40 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8006616:	4b1d      	ldr	r3, [pc, #116]	; (800668c <xTimerCreateTimerTask+0x84>)
 8006618:	681b      	ldr	r3, [r3, #0]
 800661a:	2b00      	cmp	r3, #0
 800661c:	d021      	beq.n	8006662 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800661e:	2300      	movs	r3, #0
 8006620:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8006622:	2300      	movs	r3, #0
 8006624:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8006626:	1d3a      	adds	r2, r7, #4
 8006628:	f107 0108 	add.w	r1, r7, #8
 800662c:	f107 030c 	add.w	r3, r7, #12
 8006630:	4618      	mov	r0, r3
 8006632:	f7fe fa27 	bl	8004a84 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8006636:	6879      	ldr	r1, [r7, #4]
 8006638:	68bb      	ldr	r3, [r7, #8]
 800663a:	68fa      	ldr	r2, [r7, #12]
 800663c:	9202      	str	r2, [sp, #8]
 800663e:	9301      	str	r3, [sp, #4]
 8006640:	2302      	movs	r3, #2
 8006642:	9300      	str	r3, [sp, #0]
 8006644:	2300      	movs	r3, #0
 8006646:	460a      	mov	r2, r1
 8006648:	4911      	ldr	r1, [pc, #68]	; (8006690 <xTimerCreateTimerTask+0x88>)
 800664a:	4812      	ldr	r0, [pc, #72]	; (8006694 <xTimerCreateTimerTask+0x8c>)
 800664c:	f7ff f8ba 	bl	80057c4 <xTaskCreateStatic>
 8006650:	4603      	mov	r3, r0
 8006652:	4a11      	ldr	r2, [pc, #68]	; (8006698 <xTimerCreateTimerTask+0x90>)
 8006654:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8006656:	4b10      	ldr	r3, [pc, #64]	; (8006698 <xTimerCreateTimerTask+0x90>)
 8006658:	681b      	ldr	r3, [r3, #0]
 800665a:	2b00      	cmp	r3, #0
 800665c:	d001      	beq.n	8006662 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800665e:	2301      	movs	r3, #1
 8006660:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8006662:	697b      	ldr	r3, [r7, #20]
 8006664:	2b00      	cmp	r3, #0
 8006666:	d10c      	bne.n	8006682 <xTimerCreateTimerTask+0x7a>
	__asm volatile
 8006668:	f04f 0350 	mov.w	r3, #80	; 0x50
 800666c:	b672      	cpsid	i
 800666e:	f383 8811 	msr	BASEPRI, r3
 8006672:	f3bf 8f6f 	isb	sy
 8006676:	f3bf 8f4f 	dsb	sy
 800667a:	b662      	cpsie	i
 800667c:	613b      	str	r3, [r7, #16]
}
 800667e:	bf00      	nop
 8006680:	e7fe      	b.n	8006680 <xTimerCreateTimerTask+0x78>
	return xReturn;
 8006682:	697b      	ldr	r3, [r7, #20]
}
 8006684:	4618      	mov	r0, r3
 8006686:	3718      	adds	r7, #24
 8006688:	46bd      	mov	sp, r7
 800668a:	bd80      	pop	{r7, pc}
 800668c:	20000c20 	.word	0x20000c20
 8006690:	080075e8 	.word	0x080075e8
 8006694:	080067d9 	.word	0x080067d9
 8006698:	20000c24 	.word	0x20000c24

0800669c <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800669c:	b580      	push	{r7, lr}
 800669e:	b08a      	sub	sp, #40	; 0x28
 80066a0:	af00      	add	r7, sp, #0
 80066a2:	60f8      	str	r0, [r7, #12]
 80066a4:	60b9      	str	r1, [r7, #8]
 80066a6:	607a      	str	r2, [r7, #4]
 80066a8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 80066aa:	2300      	movs	r3, #0
 80066ac:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 80066ae:	68fb      	ldr	r3, [r7, #12]
 80066b0:	2b00      	cmp	r3, #0
 80066b2:	d10c      	bne.n	80066ce <xTimerGenericCommand+0x32>
	__asm volatile
 80066b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80066b8:	b672      	cpsid	i
 80066ba:	f383 8811 	msr	BASEPRI, r3
 80066be:	f3bf 8f6f 	isb	sy
 80066c2:	f3bf 8f4f 	dsb	sy
 80066c6:	b662      	cpsie	i
 80066c8:	623b      	str	r3, [r7, #32]
}
 80066ca:	bf00      	nop
 80066cc:	e7fe      	b.n	80066cc <xTimerGenericCommand+0x30>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 80066ce:	4b1a      	ldr	r3, [pc, #104]	; (8006738 <xTimerGenericCommand+0x9c>)
 80066d0:	681b      	ldr	r3, [r3, #0]
 80066d2:	2b00      	cmp	r3, #0
 80066d4:	d02a      	beq.n	800672c <xTimerGenericCommand+0x90>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 80066d6:	68bb      	ldr	r3, [r7, #8]
 80066d8:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 80066de:	68fb      	ldr	r3, [r7, #12]
 80066e0:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80066e2:	68bb      	ldr	r3, [r7, #8]
 80066e4:	2b05      	cmp	r3, #5
 80066e6:	dc18      	bgt.n	800671a <xTimerGenericCommand+0x7e>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80066e8:	f7ff feaa 	bl	8006440 <xTaskGetSchedulerState>
 80066ec:	4603      	mov	r3, r0
 80066ee:	2b02      	cmp	r3, #2
 80066f0:	d109      	bne.n	8006706 <xTimerGenericCommand+0x6a>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80066f2:	4b11      	ldr	r3, [pc, #68]	; (8006738 <xTimerGenericCommand+0x9c>)
 80066f4:	6818      	ldr	r0, [r3, #0]
 80066f6:	f107 0110 	add.w	r1, r7, #16
 80066fa:	2300      	movs	r3, #0
 80066fc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80066fe:	f7fe fbe1 	bl	8004ec4 <xQueueGenericSend>
 8006702:	6278      	str	r0, [r7, #36]	; 0x24
 8006704:	e012      	b.n	800672c <xTimerGenericCommand+0x90>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8006706:	4b0c      	ldr	r3, [pc, #48]	; (8006738 <xTimerGenericCommand+0x9c>)
 8006708:	6818      	ldr	r0, [r3, #0]
 800670a:	f107 0110 	add.w	r1, r7, #16
 800670e:	2300      	movs	r3, #0
 8006710:	2200      	movs	r2, #0
 8006712:	f7fe fbd7 	bl	8004ec4 <xQueueGenericSend>
 8006716:	6278      	str	r0, [r7, #36]	; 0x24
 8006718:	e008      	b.n	800672c <xTimerGenericCommand+0x90>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800671a:	4b07      	ldr	r3, [pc, #28]	; (8006738 <xTimerGenericCommand+0x9c>)
 800671c:	6818      	ldr	r0, [r3, #0]
 800671e:	f107 0110 	add.w	r1, r7, #16
 8006722:	2300      	movs	r3, #0
 8006724:	683a      	ldr	r2, [r7, #0]
 8006726:	f7fe fcd3 	bl	80050d0 <xQueueGenericSendFromISR>
 800672a:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800672c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800672e:	4618      	mov	r0, r3
 8006730:	3728      	adds	r7, #40	; 0x28
 8006732:	46bd      	mov	sp, r7
 8006734:	bd80      	pop	{r7, pc}
 8006736:	bf00      	nop
 8006738:	20000c20 	.word	0x20000c20

0800673c <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800673c:	b580      	push	{r7, lr}
 800673e:	b088      	sub	sp, #32
 8006740:	af02      	add	r7, sp, #8
 8006742:	6078      	str	r0, [r7, #4]
 8006744:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006746:	4b23      	ldr	r3, [pc, #140]	; (80067d4 <prvProcessExpiredTimer+0x98>)
 8006748:	681b      	ldr	r3, [r3, #0]
 800674a:	68db      	ldr	r3, [r3, #12]
 800674c:	68db      	ldr	r3, [r3, #12]
 800674e:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006750:	697b      	ldr	r3, [r7, #20]
 8006752:	3304      	adds	r3, #4
 8006754:	4618      	mov	r0, r3
 8006756:	f7fe fa39 	bl	8004bcc <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800675a:	697b      	ldr	r3, [r7, #20]
 800675c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006760:	f003 0304 	and.w	r3, r3, #4
 8006764:	2b00      	cmp	r3, #0
 8006766:	d024      	beq.n	80067b2 <prvProcessExpiredTimer+0x76>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8006768:	697b      	ldr	r3, [r7, #20]
 800676a:	699a      	ldr	r2, [r3, #24]
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	18d1      	adds	r1, r2, r3
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	683a      	ldr	r2, [r7, #0]
 8006774:	6978      	ldr	r0, [r7, #20]
 8006776:	f000 f8d3 	bl	8006920 <prvInsertTimerInActiveList>
 800677a:	4603      	mov	r3, r0
 800677c:	2b00      	cmp	r3, #0
 800677e:	d021      	beq.n	80067c4 <prvProcessExpiredTimer+0x88>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8006780:	2300      	movs	r3, #0
 8006782:	9300      	str	r3, [sp, #0]
 8006784:	2300      	movs	r3, #0
 8006786:	687a      	ldr	r2, [r7, #4]
 8006788:	2100      	movs	r1, #0
 800678a:	6978      	ldr	r0, [r7, #20]
 800678c:	f7ff ff86 	bl	800669c <xTimerGenericCommand>
 8006790:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8006792:	693b      	ldr	r3, [r7, #16]
 8006794:	2b00      	cmp	r3, #0
 8006796:	d115      	bne.n	80067c4 <prvProcessExpiredTimer+0x88>
	__asm volatile
 8006798:	f04f 0350 	mov.w	r3, #80	; 0x50
 800679c:	b672      	cpsid	i
 800679e:	f383 8811 	msr	BASEPRI, r3
 80067a2:	f3bf 8f6f 	isb	sy
 80067a6:	f3bf 8f4f 	dsb	sy
 80067aa:	b662      	cpsie	i
 80067ac:	60fb      	str	r3, [r7, #12]
}
 80067ae:	bf00      	nop
 80067b0:	e7fe      	b.n	80067b0 <prvProcessExpiredTimer+0x74>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80067b2:	697b      	ldr	r3, [r7, #20]
 80067b4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80067b8:	f023 0301 	bic.w	r3, r3, #1
 80067bc:	b2da      	uxtb	r2, r3
 80067be:	697b      	ldr	r3, [r7, #20]
 80067c0:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80067c4:	697b      	ldr	r3, [r7, #20]
 80067c6:	6a1b      	ldr	r3, [r3, #32]
 80067c8:	6978      	ldr	r0, [r7, #20]
 80067ca:	4798      	blx	r3
}
 80067cc:	bf00      	nop
 80067ce:	3718      	adds	r7, #24
 80067d0:	46bd      	mov	sp, r7
 80067d2:	bd80      	pop	{r7, pc}
 80067d4:	20000c18 	.word	0x20000c18

080067d8 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 80067d8:	b580      	push	{r7, lr}
 80067da:	b084      	sub	sp, #16
 80067dc:	af00      	add	r7, sp, #0
 80067de:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80067e0:	f107 0308 	add.w	r3, r7, #8
 80067e4:	4618      	mov	r0, r3
 80067e6:	f000 f857 	bl	8006898 <prvGetNextExpireTime>
 80067ea:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80067ec:	68bb      	ldr	r3, [r7, #8]
 80067ee:	4619      	mov	r1, r3
 80067f0:	68f8      	ldr	r0, [r7, #12]
 80067f2:	f000 f803 	bl	80067fc <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 80067f6:	f000 f8d5 	bl	80069a4 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80067fa:	e7f1      	b.n	80067e0 <prvTimerTask+0x8>

080067fc <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 80067fc:	b580      	push	{r7, lr}
 80067fe:	b084      	sub	sp, #16
 8006800:	af00      	add	r7, sp, #0
 8006802:	6078      	str	r0, [r7, #4]
 8006804:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8006806:	f7ff fa27 	bl	8005c58 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800680a:	f107 0308 	add.w	r3, r7, #8
 800680e:	4618      	mov	r0, r3
 8006810:	f000 f866 	bl	80068e0 <prvSampleTimeNow>
 8006814:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8006816:	68bb      	ldr	r3, [r7, #8]
 8006818:	2b00      	cmp	r3, #0
 800681a:	d130      	bne.n	800687e <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800681c:	683b      	ldr	r3, [r7, #0]
 800681e:	2b00      	cmp	r3, #0
 8006820:	d10a      	bne.n	8006838 <prvProcessTimerOrBlockTask+0x3c>
 8006822:	687a      	ldr	r2, [r7, #4]
 8006824:	68fb      	ldr	r3, [r7, #12]
 8006826:	429a      	cmp	r2, r3
 8006828:	d806      	bhi.n	8006838 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800682a:	f7ff fa23 	bl	8005c74 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800682e:	68f9      	ldr	r1, [r7, #12]
 8006830:	6878      	ldr	r0, [r7, #4]
 8006832:	f7ff ff83 	bl	800673c <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8006836:	e024      	b.n	8006882 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8006838:	683b      	ldr	r3, [r7, #0]
 800683a:	2b00      	cmp	r3, #0
 800683c:	d008      	beq.n	8006850 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800683e:	4b13      	ldr	r3, [pc, #76]	; (800688c <prvProcessTimerOrBlockTask+0x90>)
 8006840:	681b      	ldr	r3, [r3, #0]
 8006842:	681b      	ldr	r3, [r3, #0]
 8006844:	2b00      	cmp	r3, #0
 8006846:	d101      	bne.n	800684c <prvProcessTimerOrBlockTask+0x50>
 8006848:	2301      	movs	r3, #1
 800684a:	e000      	b.n	800684e <prvProcessTimerOrBlockTask+0x52>
 800684c:	2300      	movs	r3, #0
 800684e:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8006850:	4b0f      	ldr	r3, [pc, #60]	; (8006890 <prvProcessTimerOrBlockTask+0x94>)
 8006852:	6818      	ldr	r0, [r3, #0]
 8006854:	687a      	ldr	r2, [r7, #4]
 8006856:	68fb      	ldr	r3, [r7, #12]
 8006858:	1ad3      	subs	r3, r2, r3
 800685a:	683a      	ldr	r2, [r7, #0]
 800685c:	4619      	mov	r1, r3
 800685e:	f7fe ff7d 	bl	800575c <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8006862:	f7ff fa07 	bl	8005c74 <xTaskResumeAll>
 8006866:	4603      	mov	r3, r0
 8006868:	2b00      	cmp	r3, #0
 800686a:	d10a      	bne.n	8006882 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800686c:	4b09      	ldr	r3, [pc, #36]	; (8006894 <prvProcessTimerOrBlockTask+0x98>)
 800686e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006872:	601a      	str	r2, [r3, #0]
 8006874:	f3bf 8f4f 	dsb	sy
 8006878:	f3bf 8f6f 	isb	sy
}
 800687c:	e001      	b.n	8006882 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800687e:	f7ff f9f9 	bl	8005c74 <xTaskResumeAll>
}
 8006882:	bf00      	nop
 8006884:	3710      	adds	r7, #16
 8006886:	46bd      	mov	sp, r7
 8006888:	bd80      	pop	{r7, pc}
 800688a:	bf00      	nop
 800688c:	20000c1c 	.word	0x20000c1c
 8006890:	20000c20 	.word	0x20000c20
 8006894:	e000ed04 	.word	0xe000ed04

08006898 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8006898:	b480      	push	{r7}
 800689a:	b085      	sub	sp, #20
 800689c:	af00      	add	r7, sp, #0
 800689e:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80068a0:	4b0e      	ldr	r3, [pc, #56]	; (80068dc <prvGetNextExpireTime+0x44>)
 80068a2:	681b      	ldr	r3, [r3, #0]
 80068a4:	681b      	ldr	r3, [r3, #0]
 80068a6:	2b00      	cmp	r3, #0
 80068a8:	d101      	bne.n	80068ae <prvGetNextExpireTime+0x16>
 80068aa:	2201      	movs	r2, #1
 80068ac:	e000      	b.n	80068b0 <prvGetNextExpireTime+0x18>
 80068ae:	2200      	movs	r2, #0
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	681b      	ldr	r3, [r3, #0]
 80068b8:	2b00      	cmp	r3, #0
 80068ba:	d105      	bne.n	80068c8 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80068bc:	4b07      	ldr	r3, [pc, #28]	; (80068dc <prvGetNextExpireTime+0x44>)
 80068be:	681b      	ldr	r3, [r3, #0]
 80068c0:	68db      	ldr	r3, [r3, #12]
 80068c2:	681b      	ldr	r3, [r3, #0]
 80068c4:	60fb      	str	r3, [r7, #12]
 80068c6:	e001      	b.n	80068cc <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 80068c8:	2300      	movs	r3, #0
 80068ca:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 80068cc:	68fb      	ldr	r3, [r7, #12]
}
 80068ce:	4618      	mov	r0, r3
 80068d0:	3714      	adds	r7, #20
 80068d2:	46bd      	mov	sp, r7
 80068d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068d8:	4770      	bx	lr
 80068da:	bf00      	nop
 80068dc:	20000c18 	.word	0x20000c18

080068e0 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 80068e0:	b580      	push	{r7, lr}
 80068e2:	b084      	sub	sp, #16
 80068e4:	af00      	add	r7, sp, #0
 80068e6:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 80068e8:	f7ff fa64 	bl	8005db4 <xTaskGetTickCount>
 80068ec:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 80068ee:	4b0b      	ldr	r3, [pc, #44]	; (800691c <prvSampleTimeNow+0x3c>)
 80068f0:	681b      	ldr	r3, [r3, #0]
 80068f2:	68fa      	ldr	r2, [r7, #12]
 80068f4:	429a      	cmp	r2, r3
 80068f6:	d205      	bcs.n	8006904 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 80068f8:	f000 f93c 	bl	8006b74 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	2201      	movs	r2, #1
 8006900:	601a      	str	r2, [r3, #0]
 8006902:	e002      	b.n	800690a <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	2200      	movs	r2, #0
 8006908:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800690a:	4a04      	ldr	r2, [pc, #16]	; (800691c <prvSampleTimeNow+0x3c>)
 800690c:	68fb      	ldr	r3, [r7, #12]
 800690e:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8006910:	68fb      	ldr	r3, [r7, #12]
}
 8006912:	4618      	mov	r0, r3
 8006914:	3710      	adds	r7, #16
 8006916:	46bd      	mov	sp, r7
 8006918:	bd80      	pop	{r7, pc}
 800691a:	bf00      	nop
 800691c:	20000c28 	.word	0x20000c28

08006920 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8006920:	b580      	push	{r7, lr}
 8006922:	b086      	sub	sp, #24
 8006924:	af00      	add	r7, sp, #0
 8006926:	60f8      	str	r0, [r7, #12]
 8006928:	60b9      	str	r1, [r7, #8]
 800692a:	607a      	str	r2, [r7, #4]
 800692c:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800692e:	2300      	movs	r3, #0
 8006930:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8006932:	68fb      	ldr	r3, [r7, #12]
 8006934:	68ba      	ldr	r2, [r7, #8]
 8006936:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8006938:	68fb      	ldr	r3, [r7, #12]
 800693a:	68fa      	ldr	r2, [r7, #12]
 800693c:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800693e:	68ba      	ldr	r2, [r7, #8]
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	429a      	cmp	r2, r3
 8006944:	d812      	bhi.n	800696c <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006946:	687a      	ldr	r2, [r7, #4]
 8006948:	683b      	ldr	r3, [r7, #0]
 800694a:	1ad2      	subs	r2, r2, r3
 800694c:	68fb      	ldr	r3, [r7, #12]
 800694e:	699b      	ldr	r3, [r3, #24]
 8006950:	429a      	cmp	r2, r3
 8006952:	d302      	bcc.n	800695a <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8006954:	2301      	movs	r3, #1
 8006956:	617b      	str	r3, [r7, #20]
 8006958:	e01b      	b.n	8006992 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800695a:	4b10      	ldr	r3, [pc, #64]	; (800699c <prvInsertTimerInActiveList+0x7c>)
 800695c:	681a      	ldr	r2, [r3, #0]
 800695e:	68fb      	ldr	r3, [r7, #12]
 8006960:	3304      	adds	r3, #4
 8006962:	4619      	mov	r1, r3
 8006964:	4610      	mov	r0, r2
 8006966:	f7fe f8f8 	bl	8004b5a <vListInsert>
 800696a:	e012      	b.n	8006992 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800696c:	687a      	ldr	r2, [r7, #4]
 800696e:	683b      	ldr	r3, [r7, #0]
 8006970:	429a      	cmp	r2, r3
 8006972:	d206      	bcs.n	8006982 <prvInsertTimerInActiveList+0x62>
 8006974:	68ba      	ldr	r2, [r7, #8]
 8006976:	683b      	ldr	r3, [r7, #0]
 8006978:	429a      	cmp	r2, r3
 800697a:	d302      	bcc.n	8006982 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800697c:	2301      	movs	r3, #1
 800697e:	617b      	str	r3, [r7, #20]
 8006980:	e007      	b.n	8006992 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8006982:	4b07      	ldr	r3, [pc, #28]	; (80069a0 <prvInsertTimerInActiveList+0x80>)
 8006984:	681a      	ldr	r2, [r3, #0]
 8006986:	68fb      	ldr	r3, [r7, #12]
 8006988:	3304      	adds	r3, #4
 800698a:	4619      	mov	r1, r3
 800698c:	4610      	mov	r0, r2
 800698e:	f7fe f8e4 	bl	8004b5a <vListInsert>
		}
	}

	return xProcessTimerNow;
 8006992:	697b      	ldr	r3, [r7, #20]
}
 8006994:	4618      	mov	r0, r3
 8006996:	3718      	adds	r7, #24
 8006998:	46bd      	mov	sp, r7
 800699a:	bd80      	pop	{r7, pc}
 800699c:	20000c1c 	.word	0x20000c1c
 80069a0:	20000c18 	.word	0x20000c18

080069a4 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 80069a4:	b580      	push	{r7, lr}
 80069a6:	b08e      	sub	sp, #56	; 0x38
 80069a8:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80069aa:	e0d0      	b.n	8006b4e <prvProcessReceivedCommands+0x1aa>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	2b00      	cmp	r3, #0
 80069b0:	da1a      	bge.n	80069e8 <prvProcessReceivedCommands+0x44>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 80069b2:	1d3b      	adds	r3, r7, #4
 80069b4:	3304      	adds	r3, #4
 80069b6:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 80069b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80069ba:	2b00      	cmp	r3, #0
 80069bc:	d10c      	bne.n	80069d8 <prvProcessReceivedCommands+0x34>
	__asm volatile
 80069be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80069c2:	b672      	cpsid	i
 80069c4:	f383 8811 	msr	BASEPRI, r3
 80069c8:	f3bf 8f6f 	isb	sy
 80069cc:	f3bf 8f4f 	dsb	sy
 80069d0:	b662      	cpsie	i
 80069d2:	61fb      	str	r3, [r7, #28]
}
 80069d4:	bf00      	nop
 80069d6:	e7fe      	b.n	80069d6 <prvProcessReceivedCommands+0x32>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 80069d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80069da:	681b      	ldr	r3, [r3, #0]
 80069dc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80069de:	6850      	ldr	r0, [r2, #4]
 80069e0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80069e2:	6892      	ldr	r2, [r2, #8]
 80069e4:	4611      	mov	r1, r2
 80069e6:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	2b00      	cmp	r3, #0
 80069ec:	f2c0 80ae 	blt.w	8006b4c <prvProcessReceivedCommands+0x1a8>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80069f0:	68fb      	ldr	r3, [r7, #12]
 80069f2:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80069f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80069f6:	695b      	ldr	r3, [r3, #20]
 80069f8:	2b00      	cmp	r3, #0
 80069fa:	d004      	beq.n	8006a06 <prvProcessReceivedCommands+0x62>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80069fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80069fe:	3304      	adds	r3, #4
 8006a00:	4618      	mov	r0, r3
 8006a02:	f7fe f8e3 	bl	8004bcc <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8006a06:	463b      	mov	r3, r7
 8006a08:	4618      	mov	r0, r3
 8006a0a:	f7ff ff69 	bl	80068e0 <prvSampleTimeNow>
 8006a0e:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	2b09      	cmp	r3, #9
 8006a14:	f200 809b 	bhi.w	8006b4e <prvProcessReceivedCommands+0x1aa>
 8006a18:	a201      	add	r2, pc, #4	; (adr r2, 8006a20 <prvProcessReceivedCommands+0x7c>)
 8006a1a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006a1e:	bf00      	nop
 8006a20:	08006a49 	.word	0x08006a49
 8006a24:	08006a49 	.word	0x08006a49
 8006a28:	08006a49 	.word	0x08006a49
 8006a2c:	08006ac1 	.word	0x08006ac1
 8006a30:	08006ad5 	.word	0x08006ad5
 8006a34:	08006b23 	.word	0x08006b23
 8006a38:	08006a49 	.word	0x08006a49
 8006a3c:	08006a49 	.word	0x08006a49
 8006a40:	08006ac1 	.word	0x08006ac1
 8006a44:	08006ad5 	.word	0x08006ad5
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8006a48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a4a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006a4e:	f043 0301 	orr.w	r3, r3, #1
 8006a52:	b2da      	uxtb	r2, r3
 8006a54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a56:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8006a5a:	68ba      	ldr	r2, [r7, #8]
 8006a5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a5e:	699b      	ldr	r3, [r3, #24]
 8006a60:	18d1      	adds	r1, r2, r3
 8006a62:	68bb      	ldr	r3, [r7, #8]
 8006a64:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006a66:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006a68:	f7ff ff5a 	bl	8006920 <prvInsertTimerInActiveList>
 8006a6c:	4603      	mov	r3, r0
 8006a6e:	2b00      	cmp	r3, #0
 8006a70:	d06d      	beq.n	8006b4e <prvProcessReceivedCommands+0x1aa>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006a72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a74:	6a1b      	ldr	r3, [r3, #32]
 8006a76:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006a78:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8006a7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a7c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006a80:	f003 0304 	and.w	r3, r3, #4
 8006a84:	2b00      	cmp	r3, #0
 8006a86:	d062      	beq.n	8006b4e <prvProcessReceivedCommands+0x1aa>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8006a88:	68ba      	ldr	r2, [r7, #8]
 8006a8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a8c:	699b      	ldr	r3, [r3, #24]
 8006a8e:	441a      	add	r2, r3
 8006a90:	2300      	movs	r3, #0
 8006a92:	9300      	str	r3, [sp, #0]
 8006a94:	2300      	movs	r3, #0
 8006a96:	2100      	movs	r1, #0
 8006a98:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006a9a:	f7ff fdff 	bl	800669c <xTimerGenericCommand>
 8006a9e:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8006aa0:	6a3b      	ldr	r3, [r7, #32]
 8006aa2:	2b00      	cmp	r3, #0
 8006aa4:	d153      	bne.n	8006b4e <prvProcessReceivedCommands+0x1aa>
	__asm volatile
 8006aa6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006aaa:	b672      	cpsid	i
 8006aac:	f383 8811 	msr	BASEPRI, r3
 8006ab0:	f3bf 8f6f 	isb	sy
 8006ab4:	f3bf 8f4f 	dsb	sy
 8006ab8:	b662      	cpsie	i
 8006aba:	61bb      	str	r3, [r7, #24]
}
 8006abc:	bf00      	nop
 8006abe:	e7fe      	b.n	8006abe <prvProcessReceivedCommands+0x11a>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8006ac0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ac2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006ac6:	f023 0301 	bic.w	r3, r3, #1
 8006aca:	b2da      	uxtb	r2, r3
 8006acc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ace:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8006ad2:	e03c      	b.n	8006b4e <prvProcessReceivedCommands+0x1aa>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8006ad4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ad6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006ada:	f043 0301 	orr.w	r3, r3, #1
 8006ade:	b2da      	uxtb	r2, r3
 8006ae0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ae2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8006ae6:	68ba      	ldr	r2, [r7, #8]
 8006ae8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006aea:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8006aec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006aee:	699b      	ldr	r3, [r3, #24]
 8006af0:	2b00      	cmp	r3, #0
 8006af2:	d10c      	bne.n	8006b0e <prvProcessReceivedCommands+0x16a>
	__asm volatile
 8006af4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006af8:	b672      	cpsid	i
 8006afa:	f383 8811 	msr	BASEPRI, r3
 8006afe:	f3bf 8f6f 	isb	sy
 8006b02:	f3bf 8f4f 	dsb	sy
 8006b06:	b662      	cpsie	i
 8006b08:	617b      	str	r3, [r7, #20]
}
 8006b0a:	bf00      	nop
 8006b0c:	e7fe      	b.n	8006b0c <prvProcessReceivedCommands+0x168>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8006b0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b10:	699a      	ldr	r2, [r3, #24]
 8006b12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b14:	18d1      	adds	r1, r2, r3
 8006b16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b18:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006b1a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006b1c:	f7ff ff00 	bl	8006920 <prvInsertTimerInActiveList>
					break;
 8006b20:	e015      	b.n	8006b4e <prvProcessReceivedCommands+0x1aa>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8006b22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b24:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006b28:	f003 0302 	and.w	r3, r3, #2
 8006b2c:	2b00      	cmp	r3, #0
 8006b2e:	d103      	bne.n	8006b38 <prvProcessReceivedCommands+0x194>
						{
							vPortFree( pxTimer );
 8006b30:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006b32:	f000 fbc9 	bl	80072c8 <vPortFree>
 8006b36:	e00a      	b.n	8006b4e <prvProcessReceivedCommands+0x1aa>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8006b38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b3a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006b3e:	f023 0301 	bic.w	r3, r3, #1
 8006b42:	b2da      	uxtb	r2, r3
 8006b44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b46:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8006b4a:	e000      	b.n	8006b4e <prvProcessReceivedCommands+0x1aa>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8006b4c:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8006b4e:	4b08      	ldr	r3, [pc, #32]	; (8006b70 <prvProcessReceivedCommands+0x1cc>)
 8006b50:	681b      	ldr	r3, [r3, #0]
 8006b52:	1d39      	adds	r1, r7, #4
 8006b54:	2200      	movs	r2, #0
 8006b56:	4618      	mov	r0, r3
 8006b58:	f7fe fb5a 	bl	8005210 <xQueueReceive>
 8006b5c:	4603      	mov	r3, r0
 8006b5e:	2b00      	cmp	r3, #0
 8006b60:	f47f af24 	bne.w	80069ac <prvProcessReceivedCommands+0x8>
	}
}
 8006b64:	bf00      	nop
 8006b66:	bf00      	nop
 8006b68:	3730      	adds	r7, #48	; 0x30
 8006b6a:	46bd      	mov	sp, r7
 8006b6c:	bd80      	pop	{r7, pc}
 8006b6e:	bf00      	nop
 8006b70:	20000c20 	.word	0x20000c20

08006b74 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8006b74:	b580      	push	{r7, lr}
 8006b76:	b088      	sub	sp, #32
 8006b78:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8006b7a:	e04a      	b.n	8006c12 <prvSwitchTimerLists+0x9e>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006b7c:	4b2e      	ldr	r3, [pc, #184]	; (8006c38 <prvSwitchTimerLists+0xc4>)
 8006b7e:	681b      	ldr	r3, [r3, #0]
 8006b80:	68db      	ldr	r3, [r3, #12]
 8006b82:	681b      	ldr	r3, [r3, #0]
 8006b84:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006b86:	4b2c      	ldr	r3, [pc, #176]	; (8006c38 <prvSwitchTimerLists+0xc4>)
 8006b88:	681b      	ldr	r3, [r3, #0]
 8006b8a:	68db      	ldr	r3, [r3, #12]
 8006b8c:	68db      	ldr	r3, [r3, #12]
 8006b8e:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006b90:	68fb      	ldr	r3, [r7, #12]
 8006b92:	3304      	adds	r3, #4
 8006b94:	4618      	mov	r0, r3
 8006b96:	f7fe f819 	bl	8004bcc <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006b9a:	68fb      	ldr	r3, [r7, #12]
 8006b9c:	6a1b      	ldr	r3, [r3, #32]
 8006b9e:	68f8      	ldr	r0, [r7, #12]
 8006ba0:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8006ba2:	68fb      	ldr	r3, [r7, #12]
 8006ba4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006ba8:	f003 0304 	and.w	r3, r3, #4
 8006bac:	2b00      	cmp	r3, #0
 8006bae:	d030      	beq.n	8006c12 <prvSwitchTimerLists+0x9e>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8006bb0:	68fb      	ldr	r3, [r7, #12]
 8006bb2:	699b      	ldr	r3, [r3, #24]
 8006bb4:	693a      	ldr	r2, [r7, #16]
 8006bb6:	4413      	add	r3, r2
 8006bb8:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8006bba:	68ba      	ldr	r2, [r7, #8]
 8006bbc:	693b      	ldr	r3, [r7, #16]
 8006bbe:	429a      	cmp	r2, r3
 8006bc0:	d90e      	bls.n	8006be0 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8006bc2:	68fb      	ldr	r3, [r7, #12]
 8006bc4:	68ba      	ldr	r2, [r7, #8]
 8006bc6:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8006bc8:	68fb      	ldr	r3, [r7, #12]
 8006bca:	68fa      	ldr	r2, [r7, #12]
 8006bcc:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8006bce:	4b1a      	ldr	r3, [pc, #104]	; (8006c38 <prvSwitchTimerLists+0xc4>)
 8006bd0:	681a      	ldr	r2, [r3, #0]
 8006bd2:	68fb      	ldr	r3, [r7, #12]
 8006bd4:	3304      	adds	r3, #4
 8006bd6:	4619      	mov	r1, r3
 8006bd8:	4610      	mov	r0, r2
 8006bda:	f7fd ffbe 	bl	8004b5a <vListInsert>
 8006bde:	e018      	b.n	8006c12 <prvSwitchTimerLists+0x9e>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8006be0:	2300      	movs	r3, #0
 8006be2:	9300      	str	r3, [sp, #0]
 8006be4:	2300      	movs	r3, #0
 8006be6:	693a      	ldr	r2, [r7, #16]
 8006be8:	2100      	movs	r1, #0
 8006bea:	68f8      	ldr	r0, [r7, #12]
 8006bec:	f7ff fd56 	bl	800669c <xTimerGenericCommand>
 8006bf0:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	2b00      	cmp	r3, #0
 8006bf6:	d10c      	bne.n	8006c12 <prvSwitchTimerLists+0x9e>
	__asm volatile
 8006bf8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006bfc:	b672      	cpsid	i
 8006bfe:	f383 8811 	msr	BASEPRI, r3
 8006c02:	f3bf 8f6f 	isb	sy
 8006c06:	f3bf 8f4f 	dsb	sy
 8006c0a:	b662      	cpsie	i
 8006c0c:	603b      	str	r3, [r7, #0]
}
 8006c0e:	bf00      	nop
 8006c10:	e7fe      	b.n	8006c10 <prvSwitchTimerLists+0x9c>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8006c12:	4b09      	ldr	r3, [pc, #36]	; (8006c38 <prvSwitchTimerLists+0xc4>)
 8006c14:	681b      	ldr	r3, [r3, #0]
 8006c16:	681b      	ldr	r3, [r3, #0]
 8006c18:	2b00      	cmp	r3, #0
 8006c1a:	d1af      	bne.n	8006b7c <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8006c1c:	4b06      	ldr	r3, [pc, #24]	; (8006c38 <prvSwitchTimerLists+0xc4>)
 8006c1e:	681b      	ldr	r3, [r3, #0]
 8006c20:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8006c22:	4b06      	ldr	r3, [pc, #24]	; (8006c3c <prvSwitchTimerLists+0xc8>)
 8006c24:	681b      	ldr	r3, [r3, #0]
 8006c26:	4a04      	ldr	r2, [pc, #16]	; (8006c38 <prvSwitchTimerLists+0xc4>)
 8006c28:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8006c2a:	4a04      	ldr	r2, [pc, #16]	; (8006c3c <prvSwitchTimerLists+0xc8>)
 8006c2c:	697b      	ldr	r3, [r7, #20]
 8006c2e:	6013      	str	r3, [r2, #0]
}
 8006c30:	bf00      	nop
 8006c32:	3718      	adds	r7, #24
 8006c34:	46bd      	mov	sp, r7
 8006c36:	bd80      	pop	{r7, pc}
 8006c38:	20000c18 	.word	0x20000c18
 8006c3c:	20000c1c 	.word	0x20000c1c

08006c40 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8006c40:	b580      	push	{r7, lr}
 8006c42:	b082      	sub	sp, #8
 8006c44:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8006c46:	f000 f949 	bl	8006edc <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8006c4a:	4b15      	ldr	r3, [pc, #84]	; (8006ca0 <prvCheckForValidListAndQueue+0x60>)
 8006c4c:	681b      	ldr	r3, [r3, #0]
 8006c4e:	2b00      	cmp	r3, #0
 8006c50:	d120      	bne.n	8006c94 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8006c52:	4814      	ldr	r0, [pc, #80]	; (8006ca4 <prvCheckForValidListAndQueue+0x64>)
 8006c54:	f7fd ff30 	bl	8004ab8 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8006c58:	4813      	ldr	r0, [pc, #76]	; (8006ca8 <prvCheckForValidListAndQueue+0x68>)
 8006c5a:	f7fd ff2d 	bl	8004ab8 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8006c5e:	4b13      	ldr	r3, [pc, #76]	; (8006cac <prvCheckForValidListAndQueue+0x6c>)
 8006c60:	4a10      	ldr	r2, [pc, #64]	; (8006ca4 <prvCheckForValidListAndQueue+0x64>)
 8006c62:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8006c64:	4b12      	ldr	r3, [pc, #72]	; (8006cb0 <prvCheckForValidListAndQueue+0x70>)
 8006c66:	4a10      	ldr	r2, [pc, #64]	; (8006ca8 <prvCheckForValidListAndQueue+0x68>)
 8006c68:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8006c6a:	2300      	movs	r3, #0
 8006c6c:	9300      	str	r3, [sp, #0]
 8006c6e:	4b11      	ldr	r3, [pc, #68]	; (8006cb4 <prvCheckForValidListAndQueue+0x74>)
 8006c70:	4a11      	ldr	r2, [pc, #68]	; (8006cb8 <prvCheckForValidListAndQueue+0x78>)
 8006c72:	2110      	movs	r1, #16
 8006c74:	200a      	movs	r0, #10
 8006c76:	f7fe f83d 	bl	8004cf4 <xQueueGenericCreateStatic>
 8006c7a:	4603      	mov	r3, r0
 8006c7c:	4a08      	ldr	r2, [pc, #32]	; (8006ca0 <prvCheckForValidListAndQueue+0x60>)
 8006c7e:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8006c80:	4b07      	ldr	r3, [pc, #28]	; (8006ca0 <prvCheckForValidListAndQueue+0x60>)
 8006c82:	681b      	ldr	r3, [r3, #0]
 8006c84:	2b00      	cmp	r3, #0
 8006c86:	d005      	beq.n	8006c94 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8006c88:	4b05      	ldr	r3, [pc, #20]	; (8006ca0 <prvCheckForValidListAndQueue+0x60>)
 8006c8a:	681b      	ldr	r3, [r3, #0]
 8006c8c:	490b      	ldr	r1, [pc, #44]	; (8006cbc <prvCheckForValidListAndQueue+0x7c>)
 8006c8e:	4618      	mov	r0, r3
 8006c90:	f7fe fd3a 	bl	8005708 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8006c94:	f000 f956 	bl	8006f44 <vPortExitCritical>
}
 8006c98:	bf00      	nop
 8006c9a:	46bd      	mov	sp, r7
 8006c9c:	bd80      	pop	{r7, pc}
 8006c9e:	bf00      	nop
 8006ca0:	20000c20 	.word	0x20000c20
 8006ca4:	20000bf0 	.word	0x20000bf0
 8006ca8:	20000c04 	.word	0x20000c04
 8006cac:	20000c18 	.word	0x20000c18
 8006cb0:	20000c1c 	.word	0x20000c1c
 8006cb4:	20000ccc 	.word	0x20000ccc
 8006cb8:	20000c2c 	.word	0x20000c2c
 8006cbc:	080075f0 	.word	0x080075f0

08006cc0 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8006cc0:	b480      	push	{r7}
 8006cc2:	b085      	sub	sp, #20
 8006cc4:	af00      	add	r7, sp, #0
 8006cc6:	60f8      	str	r0, [r7, #12]
 8006cc8:	60b9      	str	r1, [r7, #8]
 8006cca:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8006ccc:	68fb      	ldr	r3, [r7, #12]
 8006cce:	3b04      	subs	r3, #4
 8006cd0:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8006cd2:	68fb      	ldr	r3, [r7, #12]
 8006cd4:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8006cd8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8006cda:	68fb      	ldr	r3, [r7, #12]
 8006cdc:	3b04      	subs	r3, #4
 8006cde:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8006ce0:	68bb      	ldr	r3, [r7, #8]
 8006ce2:	f023 0201 	bic.w	r2, r3, #1
 8006ce6:	68fb      	ldr	r3, [r7, #12]
 8006ce8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8006cea:	68fb      	ldr	r3, [r7, #12]
 8006cec:	3b04      	subs	r3, #4
 8006cee:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8006cf0:	4a0c      	ldr	r2, [pc, #48]	; (8006d24 <pxPortInitialiseStack+0x64>)
 8006cf2:	68fb      	ldr	r3, [r7, #12]
 8006cf4:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8006cf6:	68fb      	ldr	r3, [r7, #12]
 8006cf8:	3b14      	subs	r3, #20
 8006cfa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8006cfc:	687a      	ldr	r2, [r7, #4]
 8006cfe:	68fb      	ldr	r3, [r7, #12]
 8006d00:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8006d02:	68fb      	ldr	r3, [r7, #12]
 8006d04:	3b04      	subs	r3, #4
 8006d06:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8006d08:	68fb      	ldr	r3, [r7, #12]
 8006d0a:	f06f 0202 	mvn.w	r2, #2
 8006d0e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8006d10:	68fb      	ldr	r3, [r7, #12]
 8006d12:	3b20      	subs	r3, #32
 8006d14:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8006d16:	68fb      	ldr	r3, [r7, #12]
}
 8006d18:	4618      	mov	r0, r3
 8006d1a:	3714      	adds	r7, #20
 8006d1c:	46bd      	mov	sp, r7
 8006d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d22:	4770      	bx	lr
 8006d24:	08006d29 	.word	0x08006d29

08006d28 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8006d28:	b480      	push	{r7}
 8006d2a:	b085      	sub	sp, #20
 8006d2c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8006d2e:	2300      	movs	r3, #0
 8006d30:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8006d32:	4b14      	ldr	r3, [pc, #80]	; (8006d84 <prvTaskExitError+0x5c>)
 8006d34:	681b      	ldr	r3, [r3, #0]
 8006d36:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006d3a:	d00c      	beq.n	8006d56 <prvTaskExitError+0x2e>
	__asm volatile
 8006d3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d40:	b672      	cpsid	i
 8006d42:	f383 8811 	msr	BASEPRI, r3
 8006d46:	f3bf 8f6f 	isb	sy
 8006d4a:	f3bf 8f4f 	dsb	sy
 8006d4e:	b662      	cpsie	i
 8006d50:	60fb      	str	r3, [r7, #12]
}
 8006d52:	bf00      	nop
 8006d54:	e7fe      	b.n	8006d54 <prvTaskExitError+0x2c>
	__asm volatile
 8006d56:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d5a:	b672      	cpsid	i
 8006d5c:	f383 8811 	msr	BASEPRI, r3
 8006d60:	f3bf 8f6f 	isb	sy
 8006d64:	f3bf 8f4f 	dsb	sy
 8006d68:	b662      	cpsie	i
 8006d6a:	60bb      	str	r3, [r7, #8]
}
 8006d6c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8006d6e:	bf00      	nop
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	2b00      	cmp	r3, #0
 8006d74:	d0fc      	beq.n	8006d70 <prvTaskExitError+0x48>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8006d76:	bf00      	nop
 8006d78:	bf00      	nop
 8006d7a:	3714      	adds	r7, #20
 8006d7c:	46bd      	mov	sp, r7
 8006d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d82:	4770      	bx	lr
 8006d84:	2000000c 	.word	0x2000000c
	...

08006d90 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8006d90:	4b07      	ldr	r3, [pc, #28]	; (8006db0 <pxCurrentTCBConst2>)
 8006d92:	6819      	ldr	r1, [r3, #0]
 8006d94:	6808      	ldr	r0, [r1, #0]
 8006d96:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006d9a:	f380 8809 	msr	PSP, r0
 8006d9e:	f3bf 8f6f 	isb	sy
 8006da2:	f04f 0000 	mov.w	r0, #0
 8006da6:	f380 8811 	msr	BASEPRI, r0
 8006daa:	4770      	bx	lr
 8006dac:	f3af 8000 	nop.w

08006db0 <pxCurrentTCBConst2>:
 8006db0:	200006f0 	.word	0x200006f0
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8006db4:	bf00      	nop
 8006db6:	bf00      	nop

08006db8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8006db8:	4808      	ldr	r0, [pc, #32]	; (8006ddc <prvPortStartFirstTask+0x24>)
 8006dba:	6800      	ldr	r0, [r0, #0]
 8006dbc:	6800      	ldr	r0, [r0, #0]
 8006dbe:	f380 8808 	msr	MSP, r0
 8006dc2:	f04f 0000 	mov.w	r0, #0
 8006dc6:	f380 8814 	msr	CONTROL, r0
 8006dca:	b662      	cpsie	i
 8006dcc:	b661      	cpsie	f
 8006dce:	f3bf 8f4f 	dsb	sy
 8006dd2:	f3bf 8f6f 	isb	sy
 8006dd6:	df00      	svc	0
 8006dd8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8006dda:	bf00      	nop
 8006ddc:	e000ed08 	.word	0xe000ed08

08006de0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8006de0:	b580      	push	{r7, lr}
 8006de2:	b084      	sub	sp, #16
 8006de4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8006de6:	4b37      	ldr	r3, [pc, #220]	; (8006ec4 <xPortStartScheduler+0xe4>)
 8006de8:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8006dea:	68fb      	ldr	r3, [r7, #12]
 8006dec:	781b      	ldrb	r3, [r3, #0]
 8006dee:	b2db      	uxtb	r3, r3
 8006df0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8006df2:	68fb      	ldr	r3, [r7, #12]
 8006df4:	22ff      	movs	r2, #255	; 0xff
 8006df6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8006df8:	68fb      	ldr	r3, [r7, #12]
 8006dfa:	781b      	ldrb	r3, [r3, #0]
 8006dfc:	b2db      	uxtb	r3, r3
 8006dfe:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8006e00:	78fb      	ldrb	r3, [r7, #3]
 8006e02:	b2db      	uxtb	r3, r3
 8006e04:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8006e08:	b2da      	uxtb	r2, r3
 8006e0a:	4b2f      	ldr	r3, [pc, #188]	; (8006ec8 <xPortStartScheduler+0xe8>)
 8006e0c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8006e0e:	4b2f      	ldr	r3, [pc, #188]	; (8006ecc <xPortStartScheduler+0xec>)
 8006e10:	2207      	movs	r2, #7
 8006e12:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006e14:	e009      	b.n	8006e2a <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 8006e16:	4b2d      	ldr	r3, [pc, #180]	; (8006ecc <xPortStartScheduler+0xec>)
 8006e18:	681b      	ldr	r3, [r3, #0]
 8006e1a:	3b01      	subs	r3, #1
 8006e1c:	4a2b      	ldr	r2, [pc, #172]	; (8006ecc <xPortStartScheduler+0xec>)
 8006e1e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8006e20:	78fb      	ldrb	r3, [r7, #3]
 8006e22:	b2db      	uxtb	r3, r3
 8006e24:	005b      	lsls	r3, r3, #1
 8006e26:	b2db      	uxtb	r3, r3
 8006e28:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006e2a:	78fb      	ldrb	r3, [r7, #3]
 8006e2c:	b2db      	uxtb	r3, r3
 8006e2e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006e32:	2b80      	cmp	r3, #128	; 0x80
 8006e34:	d0ef      	beq.n	8006e16 <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8006e36:	4b25      	ldr	r3, [pc, #148]	; (8006ecc <xPortStartScheduler+0xec>)
 8006e38:	681b      	ldr	r3, [r3, #0]
 8006e3a:	f1c3 0307 	rsb	r3, r3, #7
 8006e3e:	2b04      	cmp	r3, #4
 8006e40:	d00c      	beq.n	8006e5c <xPortStartScheduler+0x7c>
	__asm volatile
 8006e42:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e46:	b672      	cpsid	i
 8006e48:	f383 8811 	msr	BASEPRI, r3
 8006e4c:	f3bf 8f6f 	isb	sy
 8006e50:	f3bf 8f4f 	dsb	sy
 8006e54:	b662      	cpsie	i
 8006e56:	60bb      	str	r3, [r7, #8]
}
 8006e58:	bf00      	nop
 8006e5a:	e7fe      	b.n	8006e5a <xPortStartScheduler+0x7a>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8006e5c:	4b1b      	ldr	r3, [pc, #108]	; (8006ecc <xPortStartScheduler+0xec>)
 8006e5e:	681b      	ldr	r3, [r3, #0]
 8006e60:	021b      	lsls	r3, r3, #8
 8006e62:	4a1a      	ldr	r2, [pc, #104]	; (8006ecc <xPortStartScheduler+0xec>)
 8006e64:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8006e66:	4b19      	ldr	r3, [pc, #100]	; (8006ecc <xPortStartScheduler+0xec>)
 8006e68:	681b      	ldr	r3, [r3, #0]
 8006e6a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8006e6e:	4a17      	ldr	r2, [pc, #92]	; (8006ecc <xPortStartScheduler+0xec>)
 8006e70:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	b2da      	uxtb	r2, r3
 8006e76:	68fb      	ldr	r3, [r7, #12]
 8006e78:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8006e7a:	4b15      	ldr	r3, [pc, #84]	; (8006ed0 <xPortStartScheduler+0xf0>)
 8006e7c:	681b      	ldr	r3, [r3, #0]
 8006e7e:	4a14      	ldr	r2, [pc, #80]	; (8006ed0 <xPortStartScheduler+0xf0>)
 8006e80:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8006e84:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8006e86:	4b12      	ldr	r3, [pc, #72]	; (8006ed0 <xPortStartScheduler+0xf0>)
 8006e88:	681b      	ldr	r3, [r3, #0]
 8006e8a:	4a11      	ldr	r2, [pc, #68]	; (8006ed0 <xPortStartScheduler+0xf0>)
 8006e8c:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8006e90:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8006e92:	f000 f8dd 	bl	8007050 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8006e96:	4b0f      	ldr	r3, [pc, #60]	; (8006ed4 <xPortStartScheduler+0xf4>)
 8006e98:	2200      	movs	r2, #0
 8006e9a:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8006e9c:	f000 f8fc 	bl	8007098 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8006ea0:	4b0d      	ldr	r3, [pc, #52]	; (8006ed8 <xPortStartScheduler+0xf8>)
 8006ea2:	681b      	ldr	r3, [r3, #0]
 8006ea4:	4a0c      	ldr	r2, [pc, #48]	; (8006ed8 <xPortStartScheduler+0xf8>)
 8006ea6:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8006eaa:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8006eac:	f7ff ff84 	bl	8006db8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8006eb0:	f7ff f84c 	bl	8005f4c <vTaskSwitchContext>
	prvTaskExitError();
 8006eb4:	f7ff ff38 	bl	8006d28 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8006eb8:	2300      	movs	r3, #0
}
 8006eba:	4618      	mov	r0, r3
 8006ebc:	3710      	adds	r7, #16
 8006ebe:	46bd      	mov	sp, r7
 8006ec0:	bd80      	pop	{r7, pc}
 8006ec2:	bf00      	nop
 8006ec4:	e000e400 	.word	0xe000e400
 8006ec8:	20000d1c 	.word	0x20000d1c
 8006ecc:	20000d20 	.word	0x20000d20
 8006ed0:	e000ed20 	.word	0xe000ed20
 8006ed4:	2000000c 	.word	0x2000000c
 8006ed8:	e000ef34 	.word	0xe000ef34

08006edc <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8006edc:	b480      	push	{r7}
 8006ede:	b083      	sub	sp, #12
 8006ee0:	af00      	add	r7, sp, #0
	__asm volatile
 8006ee2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ee6:	b672      	cpsid	i
 8006ee8:	f383 8811 	msr	BASEPRI, r3
 8006eec:	f3bf 8f6f 	isb	sy
 8006ef0:	f3bf 8f4f 	dsb	sy
 8006ef4:	b662      	cpsie	i
 8006ef6:	607b      	str	r3, [r7, #4]
}
 8006ef8:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8006efa:	4b10      	ldr	r3, [pc, #64]	; (8006f3c <vPortEnterCritical+0x60>)
 8006efc:	681b      	ldr	r3, [r3, #0]
 8006efe:	3301      	adds	r3, #1
 8006f00:	4a0e      	ldr	r2, [pc, #56]	; (8006f3c <vPortEnterCritical+0x60>)
 8006f02:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8006f04:	4b0d      	ldr	r3, [pc, #52]	; (8006f3c <vPortEnterCritical+0x60>)
 8006f06:	681b      	ldr	r3, [r3, #0]
 8006f08:	2b01      	cmp	r3, #1
 8006f0a:	d111      	bne.n	8006f30 <vPortEnterCritical+0x54>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8006f0c:	4b0c      	ldr	r3, [pc, #48]	; (8006f40 <vPortEnterCritical+0x64>)
 8006f0e:	681b      	ldr	r3, [r3, #0]
 8006f10:	b2db      	uxtb	r3, r3
 8006f12:	2b00      	cmp	r3, #0
 8006f14:	d00c      	beq.n	8006f30 <vPortEnterCritical+0x54>
	__asm volatile
 8006f16:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f1a:	b672      	cpsid	i
 8006f1c:	f383 8811 	msr	BASEPRI, r3
 8006f20:	f3bf 8f6f 	isb	sy
 8006f24:	f3bf 8f4f 	dsb	sy
 8006f28:	b662      	cpsie	i
 8006f2a:	603b      	str	r3, [r7, #0]
}
 8006f2c:	bf00      	nop
 8006f2e:	e7fe      	b.n	8006f2e <vPortEnterCritical+0x52>
	}
}
 8006f30:	bf00      	nop
 8006f32:	370c      	adds	r7, #12
 8006f34:	46bd      	mov	sp, r7
 8006f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f3a:	4770      	bx	lr
 8006f3c:	2000000c 	.word	0x2000000c
 8006f40:	e000ed04 	.word	0xe000ed04

08006f44 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8006f44:	b480      	push	{r7}
 8006f46:	b083      	sub	sp, #12
 8006f48:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8006f4a:	4b13      	ldr	r3, [pc, #76]	; (8006f98 <vPortExitCritical+0x54>)
 8006f4c:	681b      	ldr	r3, [r3, #0]
 8006f4e:	2b00      	cmp	r3, #0
 8006f50:	d10c      	bne.n	8006f6c <vPortExitCritical+0x28>
	__asm volatile
 8006f52:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f56:	b672      	cpsid	i
 8006f58:	f383 8811 	msr	BASEPRI, r3
 8006f5c:	f3bf 8f6f 	isb	sy
 8006f60:	f3bf 8f4f 	dsb	sy
 8006f64:	b662      	cpsie	i
 8006f66:	607b      	str	r3, [r7, #4]
}
 8006f68:	bf00      	nop
 8006f6a:	e7fe      	b.n	8006f6a <vPortExitCritical+0x26>
	uxCriticalNesting--;
 8006f6c:	4b0a      	ldr	r3, [pc, #40]	; (8006f98 <vPortExitCritical+0x54>)
 8006f6e:	681b      	ldr	r3, [r3, #0]
 8006f70:	3b01      	subs	r3, #1
 8006f72:	4a09      	ldr	r2, [pc, #36]	; (8006f98 <vPortExitCritical+0x54>)
 8006f74:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8006f76:	4b08      	ldr	r3, [pc, #32]	; (8006f98 <vPortExitCritical+0x54>)
 8006f78:	681b      	ldr	r3, [r3, #0]
 8006f7a:	2b00      	cmp	r3, #0
 8006f7c:	d105      	bne.n	8006f8a <vPortExitCritical+0x46>
 8006f7e:	2300      	movs	r3, #0
 8006f80:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006f82:	683b      	ldr	r3, [r7, #0]
 8006f84:	f383 8811 	msr	BASEPRI, r3
}
 8006f88:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8006f8a:	bf00      	nop
 8006f8c:	370c      	adds	r7, #12
 8006f8e:	46bd      	mov	sp, r7
 8006f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f94:	4770      	bx	lr
 8006f96:	bf00      	nop
 8006f98:	2000000c 	.word	0x2000000c
 8006f9c:	00000000 	.word	0x00000000

08006fa0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8006fa0:	f3ef 8009 	mrs	r0, PSP
 8006fa4:	f3bf 8f6f 	isb	sy
 8006fa8:	4b15      	ldr	r3, [pc, #84]	; (8007000 <pxCurrentTCBConst>)
 8006faa:	681a      	ldr	r2, [r3, #0]
 8006fac:	f01e 0f10 	tst.w	lr, #16
 8006fb0:	bf08      	it	eq
 8006fb2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8006fb6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006fba:	6010      	str	r0, [r2, #0]
 8006fbc:	e92d 0009 	stmdb	sp!, {r0, r3}
 8006fc0:	f04f 0050 	mov.w	r0, #80	; 0x50
 8006fc4:	b672      	cpsid	i
 8006fc6:	f380 8811 	msr	BASEPRI, r0
 8006fca:	f3bf 8f4f 	dsb	sy
 8006fce:	f3bf 8f6f 	isb	sy
 8006fd2:	b662      	cpsie	i
 8006fd4:	f7fe ffba 	bl	8005f4c <vTaskSwitchContext>
 8006fd8:	f04f 0000 	mov.w	r0, #0
 8006fdc:	f380 8811 	msr	BASEPRI, r0
 8006fe0:	bc09      	pop	{r0, r3}
 8006fe2:	6819      	ldr	r1, [r3, #0]
 8006fe4:	6808      	ldr	r0, [r1, #0]
 8006fe6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006fea:	f01e 0f10 	tst.w	lr, #16
 8006fee:	bf08      	it	eq
 8006ff0:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8006ff4:	f380 8809 	msr	PSP, r0
 8006ff8:	f3bf 8f6f 	isb	sy
 8006ffc:	4770      	bx	lr
 8006ffe:	bf00      	nop

08007000 <pxCurrentTCBConst>:
 8007000:	200006f0 	.word	0x200006f0
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8007004:	bf00      	nop
 8007006:	bf00      	nop

08007008 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8007008:	b580      	push	{r7, lr}
 800700a:	b082      	sub	sp, #8
 800700c:	af00      	add	r7, sp, #0
	__asm volatile
 800700e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007012:	b672      	cpsid	i
 8007014:	f383 8811 	msr	BASEPRI, r3
 8007018:	f3bf 8f6f 	isb	sy
 800701c:	f3bf 8f4f 	dsb	sy
 8007020:	b662      	cpsie	i
 8007022:	607b      	str	r3, [r7, #4]
}
 8007024:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8007026:	f7fe fed5 	bl	8005dd4 <xTaskIncrementTick>
 800702a:	4603      	mov	r3, r0
 800702c:	2b00      	cmp	r3, #0
 800702e:	d003      	beq.n	8007038 <SysTick_Handler+0x30>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8007030:	4b06      	ldr	r3, [pc, #24]	; (800704c <SysTick_Handler+0x44>)
 8007032:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007036:	601a      	str	r2, [r3, #0]
 8007038:	2300      	movs	r3, #0
 800703a:	603b      	str	r3, [r7, #0]
	__asm volatile
 800703c:	683b      	ldr	r3, [r7, #0]
 800703e:	f383 8811 	msr	BASEPRI, r3
}
 8007042:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8007044:	bf00      	nop
 8007046:	3708      	adds	r7, #8
 8007048:	46bd      	mov	sp, r7
 800704a:	bd80      	pop	{r7, pc}
 800704c:	e000ed04 	.word	0xe000ed04

08007050 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8007050:	b480      	push	{r7}
 8007052:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8007054:	4b0b      	ldr	r3, [pc, #44]	; (8007084 <vPortSetupTimerInterrupt+0x34>)
 8007056:	2200      	movs	r2, #0
 8007058:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800705a:	4b0b      	ldr	r3, [pc, #44]	; (8007088 <vPortSetupTimerInterrupt+0x38>)
 800705c:	2200      	movs	r2, #0
 800705e:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8007060:	4b0a      	ldr	r3, [pc, #40]	; (800708c <vPortSetupTimerInterrupt+0x3c>)
 8007062:	681b      	ldr	r3, [r3, #0]
 8007064:	4a0a      	ldr	r2, [pc, #40]	; (8007090 <vPortSetupTimerInterrupt+0x40>)
 8007066:	fba2 2303 	umull	r2, r3, r2, r3
 800706a:	099b      	lsrs	r3, r3, #6
 800706c:	4a09      	ldr	r2, [pc, #36]	; (8007094 <vPortSetupTimerInterrupt+0x44>)
 800706e:	3b01      	subs	r3, #1
 8007070:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8007072:	4b04      	ldr	r3, [pc, #16]	; (8007084 <vPortSetupTimerInterrupt+0x34>)
 8007074:	2207      	movs	r2, #7
 8007076:	601a      	str	r2, [r3, #0]
}
 8007078:	bf00      	nop
 800707a:	46bd      	mov	sp, r7
 800707c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007080:	4770      	bx	lr
 8007082:	bf00      	nop
 8007084:	e000e010 	.word	0xe000e010
 8007088:	e000e018 	.word	0xe000e018
 800708c:	20000000 	.word	0x20000000
 8007090:	10624dd3 	.word	0x10624dd3
 8007094:	e000e014 	.word	0xe000e014

08007098 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8007098:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80070a8 <vPortEnableVFP+0x10>
 800709c:	6801      	ldr	r1, [r0, #0]
 800709e:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80070a2:	6001      	str	r1, [r0, #0]
 80070a4:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80070a6:	bf00      	nop
 80070a8:	e000ed88 	.word	0xe000ed88

080070ac <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80070ac:	b480      	push	{r7}
 80070ae:	b085      	sub	sp, #20
 80070b0:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80070b2:	f3ef 8305 	mrs	r3, IPSR
 80070b6:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80070b8:	68fb      	ldr	r3, [r7, #12]
 80070ba:	2b0f      	cmp	r3, #15
 80070bc:	d916      	bls.n	80070ec <vPortValidateInterruptPriority+0x40>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80070be:	4a19      	ldr	r2, [pc, #100]	; (8007124 <vPortValidateInterruptPriority+0x78>)
 80070c0:	68fb      	ldr	r3, [r7, #12]
 80070c2:	4413      	add	r3, r2
 80070c4:	781b      	ldrb	r3, [r3, #0]
 80070c6:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80070c8:	4b17      	ldr	r3, [pc, #92]	; (8007128 <vPortValidateInterruptPriority+0x7c>)
 80070ca:	781b      	ldrb	r3, [r3, #0]
 80070cc:	7afa      	ldrb	r2, [r7, #11]
 80070ce:	429a      	cmp	r2, r3
 80070d0:	d20c      	bcs.n	80070ec <vPortValidateInterruptPriority+0x40>
	__asm volatile
 80070d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80070d6:	b672      	cpsid	i
 80070d8:	f383 8811 	msr	BASEPRI, r3
 80070dc:	f3bf 8f6f 	isb	sy
 80070e0:	f3bf 8f4f 	dsb	sy
 80070e4:	b662      	cpsie	i
 80070e6:	607b      	str	r3, [r7, #4]
}
 80070e8:	bf00      	nop
 80070ea:	e7fe      	b.n	80070ea <vPortValidateInterruptPriority+0x3e>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80070ec:	4b0f      	ldr	r3, [pc, #60]	; (800712c <vPortValidateInterruptPriority+0x80>)
 80070ee:	681b      	ldr	r3, [r3, #0]
 80070f0:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80070f4:	4b0e      	ldr	r3, [pc, #56]	; (8007130 <vPortValidateInterruptPriority+0x84>)
 80070f6:	681b      	ldr	r3, [r3, #0]
 80070f8:	429a      	cmp	r2, r3
 80070fa:	d90c      	bls.n	8007116 <vPortValidateInterruptPriority+0x6a>
	__asm volatile
 80070fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007100:	b672      	cpsid	i
 8007102:	f383 8811 	msr	BASEPRI, r3
 8007106:	f3bf 8f6f 	isb	sy
 800710a:	f3bf 8f4f 	dsb	sy
 800710e:	b662      	cpsie	i
 8007110:	603b      	str	r3, [r7, #0]
}
 8007112:	bf00      	nop
 8007114:	e7fe      	b.n	8007114 <vPortValidateInterruptPriority+0x68>
	}
 8007116:	bf00      	nop
 8007118:	3714      	adds	r7, #20
 800711a:	46bd      	mov	sp, r7
 800711c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007120:	4770      	bx	lr
 8007122:	bf00      	nop
 8007124:	e000e3f0 	.word	0xe000e3f0
 8007128:	20000d1c 	.word	0x20000d1c
 800712c:	e000ed0c 	.word	0xe000ed0c
 8007130:	20000d20 	.word	0x20000d20

08007134 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8007134:	b580      	push	{r7, lr}
 8007136:	b08a      	sub	sp, #40	; 0x28
 8007138:	af00      	add	r7, sp, #0
 800713a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800713c:	2300      	movs	r3, #0
 800713e:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8007140:	f7fe fd8a 	bl	8005c58 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8007144:	4b5b      	ldr	r3, [pc, #364]	; (80072b4 <pvPortMalloc+0x180>)
 8007146:	681b      	ldr	r3, [r3, #0]
 8007148:	2b00      	cmp	r3, #0
 800714a:	d101      	bne.n	8007150 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800714c:	f000 f91a 	bl	8007384 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8007150:	4b59      	ldr	r3, [pc, #356]	; (80072b8 <pvPortMalloc+0x184>)
 8007152:	681a      	ldr	r2, [r3, #0]
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	4013      	ands	r3, r2
 8007158:	2b00      	cmp	r3, #0
 800715a:	f040 8092 	bne.w	8007282 <pvPortMalloc+0x14e>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	2b00      	cmp	r3, #0
 8007162:	d01f      	beq.n	80071a4 <pvPortMalloc+0x70>
			{
				xWantedSize += xHeapStructSize;
 8007164:	2208      	movs	r2, #8
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	4413      	add	r3, r2
 800716a:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	f003 0307 	and.w	r3, r3, #7
 8007172:	2b00      	cmp	r3, #0
 8007174:	d016      	beq.n	80071a4 <pvPortMalloc+0x70>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	f023 0307 	bic.w	r3, r3, #7
 800717c:	3308      	adds	r3, #8
 800717e:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	f003 0307 	and.w	r3, r3, #7
 8007186:	2b00      	cmp	r3, #0
 8007188:	d00c      	beq.n	80071a4 <pvPortMalloc+0x70>
	__asm volatile
 800718a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800718e:	b672      	cpsid	i
 8007190:	f383 8811 	msr	BASEPRI, r3
 8007194:	f3bf 8f6f 	isb	sy
 8007198:	f3bf 8f4f 	dsb	sy
 800719c:	b662      	cpsie	i
 800719e:	617b      	str	r3, [r7, #20]
}
 80071a0:	bf00      	nop
 80071a2:	e7fe      	b.n	80071a2 <pvPortMalloc+0x6e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	2b00      	cmp	r3, #0
 80071a8:	d06b      	beq.n	8007282 <pvPortMalloc+0x14e>
 80071aa:	4b44      	ldr	r3, [pc, #272]	; (80072bc <pvPortMalloc+0x188>)
 80071ac:	681b      	ldr	r3, [r3, #0]
 80071ae:	687a      	ldr	r2, [r7, #4]
 80071b0:	429a      	cmp	r2, r3
 80071b2:	d866      	bhi.n	8007282 <pvPortMalloc+0x14e>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80071b4:	4b42      	ldr	r3, [pc, #264]	; (80072c0 <pvPortMalloc+0x18c>)
 80071b6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80071b8:	4b41      	ldr	r3, [pc, #260]	; (80072c0 <pvPortMalloc+0x18c>)
 80071ba:	681b      	ldr	r3, [r3, #0]
 80071bc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80071be:	e004      	b.n	80071ca <pvPortMalloc+0x96>
				{
					pxPreviousBlock = pxBlock;
 80071c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071c2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80071c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071c6:	681b      	ldr	r3, [r3, #0]
 80071c8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80071ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071cc:	685b      	ldr	r3, [r3, #4]
 80071ce:	687a      	ldr	r2, [r7, #4]
 80071d0:	429a      	cmp	r2, r3
 80071d2:	d903      	bls.n	80071dc <pvPortMalloc+0xa8>
 80071d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071d6:	681b      	ldr	r3, [r3, #0]
 80071d8:	2b00      	cmp	r3, #0
 80071da:	d1f1      	bne.n	80071c0 <pvPortMalloc+0x8c>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80071dc:	4b35      	ldr	r3, [pc, #212]	; (80072b4 <pvPortMalloc+0x180>)
 80071de:	681b      	ldr	r3, [r3, #0]
 80071e0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80071e2:	429a      	cmp	r2, r3
 80071e4:	d04d      	beq.n	8007282 <pvPortMalloc+0x14e>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80071e6:	6a3b      	ldr	r3, [r7, #32]
 80071e8:	681b      	ldr	r3, [r3, #0]
 80071ea:	2208      	movs	r2, #8
 80071ec:	4413      	add	r3, r2
 80071ee:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80071f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071f2:	681a      	ldr	r2, [r3, #0]
 80071f4:	6a3b      	ldr	r3, [r7, #32]
 80071f6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80071f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071fa:	685a      	ldr	r2, [r3, #4]
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	1ad2      	subs	r2, r2, r3
 8007200:	2308      	movs	r3, #8
 8007202:	005b      	lsls	r3, r3, #1
 8007204:	429a      	cmp	r2, r3
 8007206:	d921      	bls.n	800724c <pvPortMalloc+0x118>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8007208:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	4413      	add	r3, r2
 800720e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007210:	69bb      	ldr	r3, [r7, #24]
 8007212:	f003 0307 	and.w	r3, r3, #7
 8007216:	2b00      	cmp	r3, #0
 8007218:	d00c      	beq.n	8007234 <pvPortMalloc+0x100>
	__asm volatile
 800721a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800721e:	b672      	cpsid	i
 8007220:	f383 8811 	msr	BASEPRI, r3
 8007224:	f3bf 8f6f 	isb	sy
 8007228:	f3bf 8f4f 	dsb	sy
 800722c:	b662      	cpsie	i
 800722e:	613b      	str	r3, [r7, #16]
}
 8007230:	bf00      	nop
 8007232:	e7fe      	b.n	8007232 <pvPortMalloc+0xfe>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8007234:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007236:	685a      	ldr	r2, [r3, #4]
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	1ad2      	subs	r2, r2, r3
 800723c:	69bb      	ldr	r3, [r7, #24]
 800723e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8007240:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007242:	687a      	ldr	r2, [r7, #4]
 8007244:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8007246:	69b8      	ldr	r0, [r7, #24]
 8007248:	f000 f8fe 	bl	8007448 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800724c:	4b1b      	ldr	r3, [pc, #108]	; (80072bc <pvPortMalloc+0x188>)
 800724e:	681a      	ldr	r2, [r3, #0]
 8007250:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007252:	685b      	ldr	r3, [r3, #4]
 8007254:	1ad3      	subs	r3, r2, r3
 8007256:	4a19      	ldr	r2, [pc, #100]	; (80072bc <pvPortMalloc+0x188>)
 8007258:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800725a:	4b18      	ldr	r3, [pc, #96]	; (80072bc <pvPortMalloc+0x188>)
 800725c:	681a      	ldr	r2, [r3, #0]
 800725e:	4b19      	ldr	r3, [pc, #100]	; (80072c4 <pvPortMalloc+0x190>)
 8007260:	681b      	ldr	r3, [r3, #0]
 8007262:	429a      	cmp	r2, r3
 8007264:	d203      	bcs.n	800726e <pvPortMalloc+0x13a>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8007266:	4b15      	ldr	r3, [pc, #84]	; (80072bc <pvPortMalloc+0x188>)
 8007268:	681b      	ldr	r3, [r3, #0]
 800726a:	4a16      	ldr	r2, [pc, #88]	; (80072c4 <pvPortMalloc+0x190>)
 800726c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800726e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007270:	685a      	ldr	r2, [r3, #4]
 8007272:	4b11      	ldr	r3, [pc, #68]	; (80072b8 <pvPortMalloc+0x184>)
 8007274:	681b      	ldr	r3, [r3, #0]
 8007276:	431a      	orrs	r2, r3
 8007278:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800727a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800727c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800727e:	2200      	movs	r2, #0
 8007280:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8007282:	f7fe fcf7 	bl	8005c74 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8007286:	69fb      	ldr	r3, [r7, #28]
 8007288:	f003 0307 	and.w	r3, r3, #7
 800728c:	2b00      	cmp	r3, #0
 800728e:	d00c      	beq.n	80072aa <pvPortMalloc+0x176>
	__asm volatile
 8007290:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007294:	b672      	cpsid	i
 8007296:	f383 8811 	msr	BASEPRI, r3
 800729a:	f3bf 8f6f 	isb	sy
 800729e:	f3bf 8f4f 	dsb	sy
 80072a2:	b662      	cpsie	i
 80072a4:	60fb      	str	r3, [r7, #12]
}
 80072a6:	bf00      	nop
 80072a8:	e7fe      	b.n	80072a8 <pvPortMalloc+0x174>
	return pvReturn;
 80072aa:	69fb      	ldr	r3, [r7, #28]
}
 80072ac:	4618      	mov	r0, r3
 80072ae:	3728      	adds	r7, #40	; 0x28
 80072b0:	46bd      	mov	sp, r7
 80072b2:	bd80      	pop	{r7, pc}
 80072b4:	2000492c 	.word	0x2000492c
 80072b8:	20004938 	.word	0x20004938
 80072bc:	20004930 	.word	0x20004930
 80072c0:	20004924 	.word	0x20004924
 80072c4:	20004934 	.word	0x20004934

080072c8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80072c8:	b580      	push	{r7, lr}
 80072ca:	b086      	sub	sp, #24
 80072cc:	af00      	add	r7, sp, #0
 80072ce:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	2b00      	cmp	r3, #0
 80072d8:	d04c      	beq.n	8007374 <vPortFree+0xac>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80072da:	2308      	movs	r3, #8
 80072dc:	425b      	negs	r3, r3
 80072de:	697a      	ldr	r2, [r7, #20]
 80072e0:	4413      	add	r3, r2
 80072e2:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80072e4:	697b      	ldr	r3, [r7, #20]
 80072e6:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80072e8:	693b      	ldr	r3, [r7, #16]
 80072ea:	685a      	ldr	r2, [r3, #4]
 80072ec:	4b23      	ldr	r3, [pc, #140]	; (800737c <vPortFree+0xb4>)
 80072ee:	681b      	ldr	r3, [r3, #0]
 80072f0:	4013      	ands	r3, r2
 80072f2:	2b00      	cmp	r3, #0
 80072f4:	d10c      	bne.n	8007310 <vPortFree+0x48>
	__asm volatile
 80072f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80072fa:	b672      	cpsid	i
 80072fc:	f383 8811 	msr	BASEPRI, r3
 8007300:	f3bf 8f6f 	isb	sy
 8007304:	f3bf 8f4f 	dsb	sy
 8007308:	b662      	cpsie	i
 800730a:	60fb      	str	r3, [r7, #12]
}
 800730c:	bf00      	nop
 800730e:	e7fe      	b.n	800730e <vPortFree+0x46>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8007310:	693b      	ldr	r3, [r7, #16]
 8007312:	681b      	ldr	r3, [r3, #0]
 8007314:	2b00      	cmp	r3, #0
 8007316:	d00c      	beq.n	8007332 <vPortFree+0x6a>
	__asm volatile
 8007318:	f04f 0350 	mov.w	r3, #80	; 0x50
 800731c:	b672      	cpsid	i
 800731e:	f383 8811 	msr	BASEPRI, r3
 8007322:	f3bf 8f6f 	isb	sy
 8007326:	f3bf 8f4f 	dsb	sy
 800732a:	b662      	cpsie	i
 800732c:	60bb      	str	r3, [r7, #8]
}
 800732e:	bf00      	nop
 8007330:	e7fe      	b.n	8007330 <vPortFree+0x68>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8007332:	693b      	ldr	r3, [r7, #16]
 8007334:	685a      	ldr	r2, [r3, #4]
 8007336:	4b11      	ldr	r3, [pc, #68]	; (800737c <vPortFree+0xb4>)
 8007338:	681b      	ldr	r3, [r3, #0]
 800733a:	4013      	ands	r3, r2
 800733c:	2b00      	cmp	r3, #0
 800733e:	d019      	beq.n	8007374 <vPortFree+0xac>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8007340:	693b      	ldr	r3, [r7, #16]
 8007342:	681b      	ldr	r3, [r3, #0]
 8007344:	2b00      	cmp	r3, #0
 8007346:	d115      	bne.n	8007374 <vPortFree+0xac>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8007348:	693b      	ldr	r3, [r7, #16]
 800734a:	685a      	ldr	r2, [r3, #4]
 800734c:	4b0b      	ldr	r3, [pc, #44]	; (800737c <vPortFree+0xb4>)
 800734e:	681b      	ldr	r3, [r3, #0]
 8007350:	43db      	mvns	r3, r3
 8007352:	401a      	ands	r2, r3
 8007354:	693b      	ldr	r3, [r7, #16]
 8007356:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8007358:	f7fe fc7e 	bl	8005c58 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800735c:	693b      	ldr	r3, [r7, #16]
 800735e:	685a      	ldr	r2, [r3, #4]
 8007360:	4b07      	ldr	r3, [pc, #28]	; (8007380 <vPortFree+0xb8>)
 8007362:	681b      	ldr	r3, [r3, #0]
 8007364:	4413      	add	r3, r2
 8007366:	4a06      	ldr	r2, [pc, #24]	; (8007380 <vPortFree+0xb8>)
 8007368:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800736a:	6938      	ldr	r0, [r7, #16]
 800736c:	f000 f86c 	bl	8007448 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8007370:	f7fe fc80 	bl	8005c74 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8007374:	bf00      	nop
 8007376:	3718      	adds	r7, #24
 8007378:	46bd      	mov	sp, r7
 800737a:	bd80      	pop	{r7, pc}
 800737c:	20004938 	.word	0x20004938
 8007380:	20004930 	.word	0x20004930

08007384 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8007384:	b480      	push	{r7}
 8007386:	b085      	sub	sp, #20
 8007388:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800738a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800738e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8007390:	4b27      	ldr	r3, [pc, #156]	; (8007430 <prvHeapInit+0xac>)
 8007392:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8007394:	68fb      	ldr	r3, [r7, #12]
 8007396:	f003 0307 	and.w	r3, r3, #7
 800739a:	2b00      	cmp	r3, #0
 800739c:	d00c      	beq.n	80073b8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800739e:	68fb      	ldr	r3, [r7, #12]
 80073a0:	3307      	adds	r3, #7
 80073a2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80073a4:	68fb      	ldr	r3, [r7, #12]
 80073a6:	f023 0307 	bic.w	r3, r3, #7
 80073aa:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80073ac:	68ba      	ldr	r2, [r7, #8]
 80073ae:	68fb      	ldr	r3, [r7, #12]
 80073b0:	1ad3      	subs	r3, r2, r3
 80073b2:	4a1f      	ldr	r2, [pc, #124]	; (8007430 <prvHeapInit+0xac>)
 80073b4:	4413      	add	r3, r2
 80073b6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80073b8:	68fb      	ldr	r3, [r7, #12]
 80073ba:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80073bc:	4a1d      	ldr	r2, [pc, #116]	; (8007434 <prvHeapInit+0xb0>)
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80073c2:	4b1c      	ldr	r3, [pc, #112]	; (8007434 <prvHeapInit+0xb0>)
 80073c4:	2200      	movs	r2, #0
 80073c6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	68ba      	ldr	r2, [r7, #8]
 80073cc:	4413      	add	r3, r2
 80073ce:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80073d0:	2208      	movs	r2, #8
 80073d2:	68fb      	ldr	r3, [r7, #12]
 80073d4:	1a9b      	subs	r3, r3, r2
 80073d6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80073d8:	68fb      	ldr	r3, [r7, #12]
 80073da:	f023 0307 	bic.w	r3, r3, #7
 80073de:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80073e0:	68fb      	ldr	r3, [r7, #12]
 80073e2:	4a15      	ldr	r2, [pc, #84]	; (8007438 <prvHeapInit+0xb4>)
 80073e4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80073e6:	4b14      	ldr	r3, [pc, #80]	; (8007438 <prvHeapInit+0xb4>)
 80073e8:	681b      	ldr	r3, [r3, #0]
 80073ea:	2200      	movs	r2, #0
 80073ec:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80073ee:	4b12      	ldr	r3, [pc, #72]	; (8007438 <prvHeapInit+0xb4>)
 80073f0:	681b      	ldr	r3, [r3, #0]
 80073f2:	2200      	movs	r2, #0
 80073f4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80073fa:	683b      	ldr	r3, [r7, #0]
 80073fc:	68fa      	ldr	r2, [r7, #12]
 80073fe:	1ad2      	subs	r2, r2, r3
 8007400:	683b      	ldr	r3, [r7, #0]
 8007402:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8007404:	4b0c      	ldr	r3, [pc, #48]	; (8007438 <prvHeapInit+0xb4>)
 8007406:	681a      	ldr	r2, [r3, #0]
 8007408:	683b      	ldr	r3, [r7, #0]
 800740a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800740c:	683b      	ldr	r3, [r7, #0]
 800740e:	685b      	ldr	r3, [r3, #4]
 8007410:	4a0a      	ldr	r2, [pc, #40]	; (800743c <prvHeapInit+0xb8>)
 8007412:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007414:	683b      	ldr	r3, [r7, #0]
 8007416:	685b      	ldr	r3, [r3, #4]
 8007418:	4a09      	ldr	r2, [pc, #36]	; (8007440 <prvHeapInit+0xbc>)
 800741a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800741c:	4b09      	ldr	r3, [pc, #36]	; (8007444 <prvHeapInit+0xc0>)
 800741e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8007422:	601a      	str	r2, [r3, #0]
}
 8007424:	bf00      	nop
 8007426:	3714      	adds	r7, #20
 8007428:	46bd      	mov	sp, r7
 800742a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800742e:	4770      	bx	lr
 8007430:	20000d24 	.word	0x20000d24
 8007434:	20004924 	.word	0x20004924
 8007438:	2000492c 	.word	0x2000492c
 800743c:	20004934 	.word	0x20004934
 8007440:	20004930 	.word	0x20004930
 8007444:	20004938 	.word	0x20004938

08007448 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8007448:	b480      	push	{r7}
 800744a:	b085      	sub	sp, #20
 800744c:	af00      	add	r7, sp, #0
 800744e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8007450:	4b28      	ldr	r3, [pc, #160]	; (80074f4 <prvInsertBlockIntoFreeList+0xac>)
 8007452:	60fb      	str	r3, [r7, #12]
 8007454:	e002      	b.n	800745c <prvInsertBlockIntoFreeList+0x14>
 8007456:	68fb      	ldr	r3, [r7, #12]
 8007458:	681b      	ldr	r3, [r3, #0]
 800745a:	60fb      	str	r3, [r7, #12]
 800745c:	68fb      	ldr	r3, [r7, #12]
 800745e:	681b      	ldr	r3, [r3, #0]
 8007460:	687a      	ldr	r2, [r7, #4]
 8007462:	429a      	cmp	r2, r3
 8007464:	d8f7      	bhi.n	8007456 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8007466:	68fb      	ldr	r3, [r7, #12]
 8007468:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800746a:	68fb      	ldr	r3, [r7, #12]
 800746c:	685b      	ldr	r3, [r3, #4]
 800746e:	68ba      	ldr	r2, [r7, #8]
 8007470:	4413      	add	r3, r2
 8007472:	687a      	ldr	r2, [r7, #4]
 8007474:	429a      	cmp	r2, r3
 8007476:	d108      	bne.n	800748a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8007478:	68fb      	ldr	r3, [r7, #12]
 800747a:	685a      	ldr	r2, [r3, #4]
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	685b      	ldr	r3, [r3, #4]
 8007480:	441a      	add	r2, r3
 8007482:	68fb      	ldr	r3, [r7, #12]
 8007484:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8007486:	68fb      	ldr	r3, [r7, #12]
 8007488:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	685b      	ldr	r3, [r3, #4]
 8007492:	68ba      	ldr	r2, [r7, #8]
 8007494:	441a      	add	r2, r3
 8007496:	68fb      	ldr	r3, [r7, #12]
 8007498:	681b      	ldr	r3, [r3, #0]
 800749a:	429a      	cmp	r2, r3
 800749c:	d118      	bne.n	80074d0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800749e:	68fb      	ldr	r3, [r7, #12]
 80074a0:	681a      	ldr	r2, [r3, #0]
 80074a2:	4b15      	ldr	r3, [pc, #84]	; (80074f8 <prvInsertBlockIntoFreeList+0xb0>)
 80074a4:	681b      	ldr	r3, [r3, #0]
 80074a6:	429a      	cmp	r2, r3
 80074a8:	d00d      	beq.n	80074c6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	685a      	ldr	r2, [r3, #4]
 80074ae:	68fb      	ldr	r3, [r7, #12]
 80074b0:	681b      	ldr	r3, [r3, #0]
 80074b2:	685b      	ldr	r3, [r3, #4]
 80074b4:	441a      	add	r2, r3
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80074ba:	68fb      	ldr	r3, [r7, #12]
 80074bc:	681b      	ldr	r3, [r3, #0]
 80074be:	681a      	ldr	r2, [r3, #0]
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	601a      	str	r2, [r3, #0]
 80074c4:	e008      	b.n	80074d8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80074c6:	4b0c      	ldr	r3, [pc, #48]	; (80074f8 <prvInsertBlockIntoFreeList+0xb0>)
 80074c8:	681a      	ldr	r2, [r3, #0]
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	601a      	str	r2, [r3, #0]
 80074ce:	e003      	b.n	80074d8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80074d0:	68fb      	ldr	r3, [r7, #12]
 80074d2:	681a      	ldr	r2, [r3, #0]
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80074d8:	68fa      	ldr	r2, [r7, #12]
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	429a      	cmp	r2, r3
 80074de:	d002      	beq.n	80074e6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80074e0:	68fb      	ldr	r3, [r7, #12]
 80074e2:	687a      	ldr	r2, [r7, #4]
 80074e4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80074e6:	bf00      	nop
 80074e8:	3714      	adds	r7, #20
 80074ea:	46bd      	mov	sp, r7
 80074ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074f0:	4770      	bx	lr
 80074f2:	bf00      	nop
 80074f4:	20004924 	.word	0x20004924
 80074f8:	2000492c 	.word	0x2000492c

080074fc <__libc_init_array>:
 80074fc:	b570      	push	{r4, r5, r6, lr}
 80074fe:	4d0d      	ldr	r5, [pc, #52]	; (8007534 <__libc_init_array+0x38>)
 8007500:	4c0d      	ldr	r4, [pc, #52]	; (8007538 <__libc_init_array+0x3c>)
 8007502:	1b64      	subs	r4, r4, r5
 8007504:	10a4      	asrs	r4, r4, #2
 8007506:	2600      	movs	r6, #0
 8007508:	42a6      	cmp	r6, r4
 800750a:	d109      	bne.n	8007520 <__libc_init_array+0x24>
 800750c:	4d0b      	ldr	r5, [pc, #44]	; (800753c <__libc_init_array+0x40>)
 800750e:	4c0c      	ldr	r4, [pc, #48]	; (8007540 <__libc_init_array+0x44>)
 8007510:	f000 f836 	bl	8007580 <_init>
 8007514:	1b64      	subs	r4, r4, r5
 8007516:	10a4      	asrs	r4, r4, #2
 8007518:	2600      	movs	r6, #0
 800751a:	42a6      	cmp	r6, r4
 800751c:	d105      	bne.n	800752a <__libc_init_array+0x2e>
 800751e:	bd70      	pop	{r4, r5, r6, pc}
 8007520:	f855 3b04 	ldr.w	r3, [r5], #4
 8007524:	4798      	blx	r3
 8007526:	3601      	adds	r6, #1
 8007528:	e7ee      	b.n	8007508 <__libc_init_array+0xc>
 800752a:	f855 3b04 	ldr.w	r3, [r5], #4
 800752e:	4798      	blx	r3
 8007530:	3601      	adds	r6, #1
 8007532:	e7f2      	b.n	800751a <__libc_init_array+0x1e>
 8007534:	08007818 	.word	0x08007818
 8007538:	08007818 	.word	0x08007818
 800753c:	08007818 	.word	0x08007818
 8007540:	0800781c 	.word	0x0800781c

08007544 <memcpy>:
 8007544:	440a      	add	r2, r1
 8007546:	4291      	cmp	r1, r2
 8007548:	f100 33ff 	add.w	r3, r0, #4294967295
 800754c:	d100      	bne.n	8007550 <memcpy+0xc>
 800754e:	4770      	bx	lr
 8007550:	b510      	push	{r4, lr}
 8007552:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007556:	f803 4f01 	strb.w	r4, [r3, #1]!
 800755a:	4291      	cmp	r1, r2
 800755c:	d1f9      	bne.n	8007552 <memcpy+0xe>
 800755e:	bd10      	pop	{r4, pc}

08007560 <memset>:
 8007560:	4402      	add	r2, r0
 8007562:	4603      	mov	r3, r0
 8007564:	4293      	cmp	r3, r2
 8007566:	d100      	bne.n	800756a <memset+0xa>
 8007568:	4770      	bx	lr
 800756a:	f803 1b01 	strb.w	r1, [r3], #1
 800756e:	e7f9      	b.n	8007564 <memset+0x4>

08007570 <strcpy>:
 8007570:	4603      	mov	r3, r0
 8007572:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007576:	f803 2b01 	strb.w	r2, [r3], #1
 800757a:	2a00      	cmp	r2, #0
 800757c:	d1f9      	bne.n	8007572 <strcpy+0x2>
 800757e:	4770      	bx	lr

08007580 <_init>:
 8007580:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007582:	bf00      	nop
 8007584:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007586:	bc08      	pop	{r3}
 8007588:	469e      	mov	lr, r3
 800758a:	4770      	bx	lr

0800758c <_fini>:
 800758c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800758e:	bf00      	nop
 8007590:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007592:	bc08      	pop	{r3}
 8007594:	469e      	mov	lr, r3
 8007596:	4770      	bx	lr
